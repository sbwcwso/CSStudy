{:highlights [{:id #uuid "634fe7b0-f336-468c-87ad-d6457f250915", :page 1, :position {:bounding {:x1 239.09375, :y1 134.875, :x2 419.81866455078125, :y2 167.875, :width 959.9999999999999, :height 1080}, :rects ({:x1 239.09375, :y1 134.875, :x2 419.81866455078125, :y2 167.875, :width 959.9999999999999, :height 1080}), :page 1}, :content {:text "Boolean Logic"}, :properties {:color "yellow"}} {:id #uuid "634fe810-94ed-4e48-89fa-87c291597567", :page 1, :position {:bounding {:x1 0, :y1 96, :x2 836.7710571289062, :y2 544.109375, :width 959.9999999999999, :height 1080}, :rects ({:x1 0, :y1 96, :x2 0, :y2 112, :width 959.9999999999999, :height 1080} {:x1 0, :y1 112, :x2 0, :y2 128, :width 959.9999999999999, :height 1080} {:x1 578.0859985351562, :y1 481.9375, :x2 836.4628295898438, :y2 500.9375, :width 959.9999999999999, :height 1080} {:x1 239.09375, :y1 503.578125, :x2 836.7710571289062, :y2 522.578125, :width 959.9999999999999, :height 1080} {:x1 239.09375, :y1 525.109375, :x2 561.3881225585938, :y2 544.109375, :width 959.9999999999999, :height 1080}), :page 1}, :content {:text "The gates can be physically implemented in many different materials and fabrication technologies, but their logical behavior is consistent across all computers"}, :properties {:color "purple"}} {:id #uuid "634fe926-3c4e-4ce8-9d5e-ea2c9ffaf197", :page 2, :position {:bounding {:x1 123.0625, :y1 122.140625, :x2 256.2216796875, :y2 142.140625, :width 959.9999999999999, :height 1080}, :rects ({:x1 123.0625, :y1 122.140625, :x2 150.828125, :y2 142.140625, :width 959.9999999999999, :height 1080} {:x1 164.546875, :y1 122.140625, :x2 256.2216796875, :y2 142.140625, :width 959.9999999999999, :height 1080}), :page 2}, :content {:text "1.1 Background"}, :properties {:color "blue"}} {:id #uuid "634fe972-2f63-413f-be0f-a52a7291e40d", :page 2, :position {:bounding {:x1 242.59375, :y1 338.3125, :x2 408.2298583984375, :y2 357.3125, :width 959.9999999999999, :height 1080}, :rects ({:x1 242.59375, :y1 338.3125, :x2 278.2541198730469, :y2 357.3125, :width 959.9999999999999, :height 1080} {:x1 293.234375, :y1 338.3125, :x2 408.2298583984375, :y2 357.3125, :width 959.9999999999999, :height 1080}), :page 2}, :content {:text "1.1.1 Boolean Algebra"}, :properties {:color "yellow"}} {:id #uuid "634fe99b-6fcc-490d-bdea-c5d10380e618", :page 2, :position {:bounding {:x1 0, :y1 160, :x2 840.209228515625, :y2 443.671875, :width 959.9999999999999, :height 1080}, :rects ({:x1 0, :y1 160, :x2 0, :y2 176, :width 959.9999999999999, :height 1080} {:x1 763.4686279296875, :y1 403.125, :x2 838.5213623046875, :y2 422.125, :width 959.9999999999999, :height 1080} {:x1 242.59375, :y1 424.671875, :x2 840.209228515625, :y2 443.671875, :width 959.9999999999999, :height 1080}), :page 2}, :content {:text "A Boolean function is a function that operates on binary inputs and returns binary outputs."}, :properties {:color "blue"}} {:id #uuid "634fe9c8-f7aa-4afd-a55b-4276dc17cbbb", :page 2, :position {:bounding {:x1 242.59375, :y1 554.21875, :x2 437.59783935546875, :y2 573.21875, :width 959.9999999999999, :height 1080}, :rects ({:x1 242.59375, :y1 554.21875, :x2 437.59783935546875, :y2 573.21875, :width 959.9999999999999, :height 1080}), :page 2}, :content {:text "Truth Table Representation"}, :properties {:color "blue"}} {:id #uuid "634fe9fc-4363-47bd-8bbb-526579fe5a0d", :page 3, :position {:bounding {:x1 229, :y1 106, :x2 714, :y2 352, :width 959.9999999999999, :height 1080}, :rects (), :page 3}, :content {:text "[:span]", :image 1666181627210}, :properties {:color "blue"}} {:id #uuid "634fea4c-8a39-4c94-a3a8-e60ebb733d4b", :page 2, :position {:bounding {:x1 242.59375, :y1 726.84375, :x2 386.92364501953125, :y2 745.84375, :width 959.9999999999999, :height 1080}, :rects ({:x1 242.59375, :y1 726.84375, :x2 386.92364501953125, :y2 745.84375, :width 959.9999999999999, :height 1080}), :page 2}, :content {:text "Boolean Expressions "}, :properties {:color "blue"}} {:id #uuid "634feaa0-ec4e-4594-b80a-27cfd9a3c4bd", :page 2, :position {:bounding {:x1 0, :y1 448, :x2 840.4063110351562, :y2 875.390625, :width 959.9999999999999, :height 1080}, :rects ({:x1 0, :y1 448, :x2 0, :y2 464, :width 959.9999999999999, :height 1080} {:x1 369.40625, :y1 834.84375, :x2 840.4063110351562, :y2 853.84375, :width 959.9999999999999, :height 1080} {:x1 242.59375, :y1 856.390625, :x2 289.359375, :y2 875.390625, :width 959.9999999999999, :height 1080}), :page 2}, :content {:text "x  y (or xy) means x And y, x þ y means x Or y, and x means Not x."}, :properties {:color "blue"}} {:id #uuid "634feb64-2124-4060-9f2d-ce5e87de8eef", :page 3, :position {:bounding {:x1 239.09375, :y1 501.109375, :x2 417.3116149902344, :y2 520.109375, :width 959.9999999999999, :height 1080}, :rects ({:x1 239.09375, :y1 501.109375, :x2 417.3116149902344, :y2 520.109375, :width 959.9999999999999, :height 1080}), :page 3}, :content {:text "Canonical Representation"}, :properties {:color "blue"}} {:id #uuid "634fec51-da75-49b1-ad9d-090b7b472c83", :page 2, :position {:bounding {:x1 0, :y1 480, :x2 840.260986328125, :y2 918.578125, :width 959.9999999999999, :height 1080}, :rects ({:x1 0, :y1 480, :x2 0, :y2 496, :width 959.9999999999999, :height 1080} {:x1 349.7536315917969, :y1 878.03125, :x2 840.260986328125, :y2 897.03125, :width 959.9999999999999, :height 1080} {:x1 242.59375, :y1 899.578125, :x2 478.15625, :y2 918.578125, :width 959.9999999999999, :height 1080}), :page 2}, :content {:text "the function defined in figure 1.1 is equivalently given by the Boolean expression f ðx; y; zÞ ¼ ðx þ yÞ  z"}, :properties {:color "blue"}} {:id #uuid "634fecbe-31fe-490e-bef4-944bd05ba728", :page 3, :position {:bounding {:x1 0, :y1 224, :x2 836.7738037109375, :y2 757.46875, :width 959.9999999999999, :height 1080}, :rects ({:x1 0, :y1 224, :x2 0, :y2 240, :width 959.9999999999999, :height 1080} {:x1 0, :y1 240, :x2 0, :y2 256, :width 959.9999999999999, :height 1080} {:x1 813.8148193359375, :y1 695.390625, :x2 836.4705200195312, :y2 714.390625, :width 959.9999999999999, :height 1080} {:x1 239.09375, :y1 716.921875, :x2 836.7738037109375, :y2 735.921875, :width 959.9999999999999, :height 1080} {:x1 239.09375, :y1 738.46875, :x2 361.9585876464844, :y2 757.46875, :width 959.9999999999999, :height 1080}), :page 3}, :content {:text "the canonical representation of the Boolean function shown in figure 1.1 is f ðx; y; zÞ ¼ xyz þ xyz þ xyz. "}, :properties {:color "yellow"}} {:id #uuid "634fed2a-8ace-46bf-9425-0abb42cd6d0e", :page 3, :position {:bounding {:x1 0, :y1 256, :x2 836.7993774414062, :y2 800.65625, :width 959.9999999999999, :height 1080}, :rects ({:x1 0, :y1 256, :x2 0, :y2 272, :width 959.9999999999999, :height 1080} {:x1 0, :y1 272, :x2 0, :y2 288, :width 959.9999999999999, :height 1080} {:x1 361.94329833984375, :y1 738.46875, :x2 836.3812255859375, :y2 757.46875, :width 959.9999999999999, :height 1080} {:x1 239.09375, :y1 760.109375, :x2 836.7993774414062, :y2 779.109375, :width 959.9999999999999, :height 1080} {:x1 239.09375, :y1 781.65625, :x2 411.1254577636719, :y2 800.65625, :width 959.9999999999999, :height 1080}), :page 3}, :content {:text "This construction leads to an important conclusion: Every Boolean function, no matter how complex, can be expressed using three Boolean operators only: And, Or, and Not."}, :properties {:color "blue"}} {:id #uuid "634fede2-f9a0-49fc-8fbf-f05b5e7c3ab0", :page 3, :position {:bounding {:x1 239.09375, :y1 824.828125, :x2 445.18768310546875, :y2 843.828125, :width 959.9999999999999, :height 1080}, :rects ({:x1 239.09375, :y1 824.828125, :x2 445.18768310546875, :y2 843.828125, :width 959.9999999999999, :height 1080}), :page 3}, :content {:text "Two-Input Boolean Functions "}, :properties {:color "yellow"}} {:id #uuid "634fee25-e46f-4365-86c4-cdebb9088520", :page 3, :position {:bounding {:x1 0, :y1 304, :x2 836.7979125976562, :y2 865.46875, :width 959.9999999999999, :height 1080}, :rects ({:x1 0, :y1 304, :x2 0, :y2 320, :width 959.9999999999999, :height 1080} {:x1 0, :y1 320, :x2 0, :y2 336, :width 959.9999999999999, :height 1080} {:x1 733.29150390625, :y1 824.828125, :x2 836.7979125976562, :y2 843.828125, :width 959.9999999999999, :height 1080} {:x1 717.671875, :y1 845.5, :x2 728.921875, :y2 858.5, :width 959.9999999999999, :height 1080} {:x1 239.09375, :y1 846.46875, :x2 735.1646118164062, :y2 865.46875, :width 959.9999999999999, :height 1080}), :page 3}, :content {:text " the number of Boolean functions that can be defined over n binary variables is 2 2 n."}, :properties {:color "yellow"}} {:id #uuid "634fee6a-86f1-449c-bb31-b9ccd386476d", :page 3, :position {:bounding {:x1 239.09375, :y1 868.015625, :x2 792.4673461914062, :y2 887.015625, :width 959.9999999999999, :height 1080}, :rects ({:x1 239.09375, :y1 868.015625, :x2 792.4673461914062, :y2 887.015625, :width 959.9999999999999, :height 1080}), :page 3}, :content {:text "the sixteen Boolean functions spanned by two variables are listed in figure 1.2. "}, :properties {:color "blue"}} {:id #uuid "634fee9e-7025-48c9-8fce-08005464f75e", :page 4, :position {:bounding {:x1 232, :y1 99, :x2 679, :y2 570, :width 959.9999999999999, :height 1080}, :rects (), :page 4}, :content {:text "[:span]", :image 1666182812763}, :properties {:color "blue"}} {:id #uuid "634feeba-dcbc-4013-b331-017cd551d779", :page 3, :position {:bounding {:x1 602.6073608398438, :y1 911.203125, :x2 836.7141723632812, :y2 930.203125, :width 959.9999999999999, :height 1080}, :rects ({:x1 602.6073608398438, :y1 911.203125, :x2 836.7141723632812, :y2 930.203125, :width 959.9999999999999, :height 1080}), :page 3}, :content {:text "Each function has a conventional"}, :properties {:color "yellow"}} {:id #uuid "634feec2-6bf1-4aa8-90f7-cc73a159a30a", :page 4, :position {:bounding {:x1 242.59375, :y1 584.921875, :x2 623.8026733398438, :y2 603.921875, :width 959.9999999999999, :height 1080}, :rects ({:x1 242.59375, :y1 584.921875, :x2 623.8026733398438, :y2 603.921875, :width 959.9999999999999, :height 1080}), :page 4}, :content {:text "name that seeks to describe its underlying operation. "}, :properties {:color "yellow"}} {:id #uuid "634ff082-9e9d-4f50-ac8c-9970bc636463", :page 4, :position {:bounding {:x1 0, :y1 0, :x2 840.03173828125, :y2 625.46875, :width 959.9999999999999, :height 1080}, :rects ({:x1 0, :y1 0, :x2 0, :y2 16, :width 959.9999999999999, :height 1080} {:x1 812.2774047851562, :y1 584.921875, :x2 840.03173828125, :y2 603.921875, :width 959.9999999999999, :height 1080} {:x1 242.59375, :y1 606.46875, :x2 608.9334106445312, :y2 625.46875, :width 959.9999999999999, :height 1080}), :page 4}, :content {:text "The name of the Nor function is shorthand for Not-O"}, :properties {:color "blue"}} {:id #uuid "634ff0a8-809f-4114-b182-4eca06efb210", :page 4, :position {:bounding {:x1 0, :y1 32, :x2 839.9403686523438, :y2 668.65625, :width 959.9999999999999, :height 1080}, :rects ({:x1 0, :y1 32, :x2 0, :y2 48, :width 959.9999999999999, :height 1080} {:x1 369.8180847167969, :y1 628.109375, :x2 839.9403686523438, :y2 647.109375, :width 959.9999999999999, :height 1080} {:x1 242.59375, :y1 649.65625, :x2 715.7650756835938, :y2 668.65625, :width 959.9999999999999, :height 1080}), :page 4}, :content {:text " The Xor function—shorthand for ‘‘exclusive or’’—returns 1 when its two variables have opposing truth-values and 0 otherwise."}, :properties {:color "blue"}} {:id #uuid "634ff132-ea38-4f56-b2ff-a254addb6119", :page 4, :position {:bounding {:x1 0, :y1 48, :x2 840.3936157226562, :y2 690.28125, :width 959.9999999999999, :height 1080}, :rects ({:x1 0, :y1 48, :x2 0, :y2 64, :width 959.9999999999999, :height 1080} {:x1 818.671875, :y1 649.65625, :x2 840.3936157226562, :y2 668.65625, :width 959.9999999999999, :height 1080} {:x1 242.59375, :y1 671.28125, :x2 840.3397216796875, :y2 690.28125, :width 959.9999999999999, :height 1080}), :page 4}, :content {:text "the Equivalence function returns 1 when the two variables have identical truth-values."}, :properties {:color "blue"}} {:id #uuid "634ff149-52dd-47da-8e4e-e5c36f612a9a", :page 4, :position {:bounding {:x1 0, :y1 80, :x2 840.3511962890625, :y2 733.46875, :width 959.9999999999999, :height 1080}, :rects ({:x1 0, :y1 80, :x2 0, :y2 96, :width 959.9999999999999, :height 1080} {:x1 242.59375, :y1 692.828125, :x2 546.359375, :y2 711.828125, :width 959.9999999999999, :height 1080} {:x1 558.34375, :y1 692.828125, :x2 840.3511962890625, :y2 711.828125, :width 959.9999999999999, :height 1080} {:x1 242.59375, :y1 714.46875, :x2 457.22564697265625, :y2 733.46875, :width 959.9999999999999, :height 1080}), :page 4}, :content {:text "The If-x-then-y function (also known as x ! y, or ‘‘x Implies y’’) returns 1 when x is0 or when both x and y are 1."}, :properties {:color "blue"}} {:id #uuid "634ff22e-0abd-4231-bf83-662f254b9727", :page 4, :position {:bounding {:x1 0, :y1 112, :x2 840.3638916015625, :y2 776.65625, :width 959.9999999999999, :height 1080}, :rects ({:x1 0, :y1 112, :x2 0, :y2 128, :width 959.9999999999999, :height 1080} {:x1 259.21875, :y1 736.015625, :x2 840.3638916015625, :y2 755.015625, :width 959.9999999999999, :height 1080} {:x1 242.59375, :y1 757.65625, :x2 839.3646850585938, :y2 776.65625, :width 959.9999999999999, :height 1080}), :page 4}, :content {:text "The Nand function (as well as the Nor function) has an interesting theoretical property: Each one of the operations And, Or, and Not can be constructed from it,"}, :properties {:color "blue"}} {:id #uuid "634ff25c-03c6-4afc-8f47-76c8e4551d3e", :page 4, :position {:bounding {:x1 242.59375, :y1 779.1875, :x2 325.4025573730469, :y2 798.1875, :width 959.9999999999999, :height 1080}, :rects ({:x1 242.59375, :y1 779.1875, :x2 325.4025573730469, :y2 798.1875, :width 959.9999999999999, :height 1080}), :page 4}, :content {:text "and it alone"}, :properties {:color "blue"}} {:id #uuid "634ff283-2c2a-483f-a3c5-892792a9ef3c", :page 4, :position {:bounding {:x1 335.17315673828125, :y1 779.1875, :x2 659.78125, :y2 798.1875, :width 959.9999999999999, :height 1080}, :rects ({:x1 335.17315673828125, :y1 779.1875, :x2 659.78125, :y2 798.1875, :width 959.9999999999999, :height 1080}), :page 4}, :content {:text "e.g., x Or y ¼ ðx Nand xÞ Nand ðy Nand yÞ"}, :properties {:color "blue"}} {:id #uuid "634ff2e4-01a9-4677-be2e-8da1376bfb9d", :page 4, :position {:bounding {:x1 0, :y1 144, :x2 839.4583740234375, :y2 841.375, :width 959.9999999999999, :height 1080}, :rects ({:x1 0, :y1 144, :x2 0, :y2 160, :width 959.9999999999999, :height 1080} {:x1 0, :y1 160, :x2 0, :y2 176, :width 959.9999999999999, :height 1080} {:x1 663.0957641601562, :y1 779.1875, :x2 839.4583740234375, :y2 798.1875, :width 959.9999999999999, :height 1080} {:x1 242.59375, :y1 800.734375, :x2 839.3886108398438, :y2 819.734375, :width 959.9999999999999, :height 1080} {:x1 242.59375, :y1 822.375, :x2 401.60980224609375, :y2 841.375, :width 959.9999999999999, :height 1080}), :page 4}, :content {:text "And since every Boolean function can be constructed from And, Or, and Not operations using the canonical representation metho"}, :properties {:color "yellow"}} {:id #uuid "634ff30b-6f2c-45fd-b87a-ef76fd0fbc2a", :page 4, :position {:bounding {:x1 0, :y1 176, :x2 840.2545776367188, :y2 862.921875, :width 959.9999999999999, :height 1080}, :rects ({:x1 0, :y1 176, :x2 0, :y2 192, :width 959.9999999999999, :height 1080} {:x1 410.9413146972656, :y1 822.375, :x2 840.2545776367188, :y2 841.375, :width 959.9999999999999, :height 1080} {:x1 242.59375, :y1 843.921875, :x2 463.847900390625, :y2 862.921875, :width 959.9999999999999, :height 1080}), :page 4}, :content {:text ", it follows that every Boolean function can be constructed from Nand operations alone. "}, :properties {:color "blue"}} {:id #uuid "634ff35e-2e6f-454b-b13b-b5c597d74bc3", :page 4, :position {:bounding {:x1 463.83172607421875, :y1 843.921875, :x2 840.0463256835938, :y2 862.921875, :width 959.9999999999999, :height 1080}, :rects ({:x1 463.83172607421875, :y1 843.921875, :x2 840.0463256835938, :y2 862.921875, :width 959.9999999999999, :height 1080}), :page 4}, :content {:text "This result has far-reaching practical implications:"}, :properties {:color "yellow"}} {:id #uuid "634ff370-2bd7-4308-b241-0be44d4d80e8", :page 4, :position {:bounding {:x1 242.59375, :y1 865.546875, :x2 753.2300415039062, :y2 884.546875, :width 959.9999999999999, :height 1080}, :rects ({:x1 242.59375, :y1 865.546875, :x2 753.2300415039062, :y2 884.546875, :width 959.9999999999999, :height 1080}), :page 4}, :content {:text "Once we have in our disposal a physical device that implements Nand,"}, :properties {:color "blue"}} {:id #uuid "634ff392-8616-4995-9374-60ea77b7e9e3", :page 4, :position {:bounding {:x1 0, :y1 208, :x2 840.302490234375, :y2 927.734375, :width 959.9999999999999, :height 1080}, :rects ({:x1 0, :y1 208, :x2 0, :y2 224, :width 959.9999999999999, :height 1080} {:x1 0, :y1 224, :x2 0, :y2 240, :width 959.9999999999999, :height 1080} {:x1 757.7471923828125, :y1 865.546875, :x2 840.3001708984375, :y2 884.546875, :width 959.9999999999999, :height 1080} {:x1 242.59375, :y1 887.09375, :x2 840.302490234375, :y2 906.09375, :width 959.9999999999999, :height 1080} {:x1 242.59375, :y1 908.734375, :x2 368.7945251464844, :y2 927.734375, :width 959.9999999999999, :height 1080}), :page 4}, :content {:text "we can use many copies of this device (wired in a certain way) to implement in hardware any Boolean function."}, :properties {:color "green"}} {:id #uuid "634ff421-83c3-4f78-bd8a-3f671c2a9e52", :page 5, :position {:bounding {:x1 239.09375, :y1 107.578125, :x2 367.908935546875, :y2 126.578125, :width 959.9999999999999, :height 1080}, :rects ({:x1 239.09375, :y1 107.578125, :x2 277.125, :y2 126.578125, :width 959.9999999999999, :height 1080} {:x1 289.640625, :y1 107.578125, :x2 367.908935546875, :y2 126.578125, :width 959.9999999999999, :height 1080}), :page 5}, :content {:text "1.1.2 Gate Logic"}, :properties {:color "blue"}} {:id #uuid "634ff448-7127-4c15-8763-3f476a16f830", :page 5, :position {:bounding {:x1 239.09375, :y1 150.75, :x2 686.3342895507812, :y2 169.75, :width 959.9999999999999, :height 1080}, :rects ({:x1 239.09375, :y1 150.75, :x2 686.3342895507812, :y2 169.75, :width 959.9999999999999, :height 1080}), :page 5}, :content {:text "A gate is a physical device that implements a Boolean function."}, :properties {:color "blue"}} {:id #uuid "634ff47b-4018-4363-aeb1-a97d3f68ec65", :page 5, :position {:bounding {:x1 0, :y1 80, :x2 836.7237548828125, :y2 299.203125, :width 959.9999999999999, :height 1080}, :rects ({:x1 0, :y1 80, :x2 0, :y2 96, :width 959.9999999999999, :height 1080} {:x1 0, :y1 96, :x2 0, :y2 112, :width 959.9999999999999, :height 1080} {:x1 610.0968017578125, :y1 237.015625, :x2 835.7386474609375, :y2 256.015625, :width 959.9999999999999, :height 1080} {:x1 239.09375, :y1 258.65625, :x2 836.7237548828125, :y2 277.65625, :width 959.9999999999999, :height 1080} {:x1 239.09375, :y1 280.203125, :x2 505.133056640625, :y2 299.203125, :width 959.9999999999999, :height 1080}), :page 5}, :content {:text "And just like complex Boolean functions can be expressed in terms of simpler functions, complex gates are composed from more elementary gates."}, :properties {:color "blue"}} {:id #uuid "634ff4e5-4ebb-4483-9235-ce18074c69b2", :page 5, :position {:bounding {:x1 0, :y1 224, :x2 836.4351806640625, :y2 471.921875, :width 959.9999999999999, :height 1080}, :rects ({:x1 0, :y1 224, :x2 0, :y2 240, :width 959.9999999999999, :height 1080} {:x1 747.022705078125, :y1 431.296875, :x2 836.4351806640625, :y2 450.296875, :width 959.9999999999999, :height 1080} {:x1 239.09375, :y1 452.921875, :x2 751.85498046875, :y2 471.921875, :width 959.9999999999999, :height 1080}), :page 5}, :content {:text " Today, most gates are implemented as transistors etched in silicon, packaged as chips. "}, :properties {:color "blue"}} {:id #uuid "634ff5dd-f018-41b3-95d1-b6c416828fb3", :page 5, :position {:bounding {:x1 0, :y1 288, :x2 836.8074340820312, :y2 579.828125, :width 959.9999999999999, :height 1080}, :rects ({:x1 0, :y1 288, :x2 0, :y2 304, :width 959.9999999999999, :height 1080} {:x1 0, :y1 304, :x2 0, :y2 320, :width 959.9999999999999, :height 1080} {:x1 255.640625, :y1 517.65625, :x2 836.7434692382812, :y2 536.65625, :width 959.9999999999999, :height 1080} {:x1 239.09375, :y1 539.296875, :x2 836.8074340820312, :y2 558.296875, :width 959.9999999999999, :height 1080} {:x1 239.09375, :y1 560.828125, :x2 652.2570190429688, :y2 579.828125, :width 959.9999999999999, :height 1080}), :page 5}, :content {:text "The availability of alternative switching technology options, on the one hand, and the observation that Boolean algebra can be used to abstract the behavior of any such technology, on the other, is extremely important."}, :properties {:color "blue"}} {:id #uuid "634ff611-5fe6-4c4a-8e1a-d1acb591a306", :page 5, :position {:bounding {:x1 0, :y1 320, :x2 836.7666625976562, :y2 623.015625, :width 959.9999999999999, :height 1080}, :rects ({:x1 0, :y1 320, :x2 0, :y2 336, :width 959.9999999999999, :height 1080} {:x1 0, :y1 336, :x2 0, :y2 352, :width 959.9999999999999, :height 1080} {:x1 729.7344360351562, :y1 560.828125, :x2 836.745849609375, :y2 579.828125, :width 959.9999999999999, :height 1080} {:x1 239.09375, :y1 582.46875, :x2 836.7666625976562, :y2 601.46875, :width 959.9999999999999, :height 1080} {:x1 239.09375, :y1 604.015625, :x2 486.01806640625, :y2 623.015625, :width 959.9999999999999, :height 1080}), :page 5}, :content {:text " it implies that computer scientists don’t have to worry about physical things like electricity, circuits, switches, relays, and power supply"}, :properties {:color "blue"}} {:id #uuid "634ff627-ac52-4e9f-a7fa-64a91119e45a", :page 5, :position {:bounding {:x1 0, :y1 352, :x2 836.7958374023438, :y2 687.734375, :width 959.9999999999999, :height 1080}, :rects ({:x1 0, :y1 352, :x2 0, :y2 368, :width 959.9999999999999, :height 1080} {:x1 0, :y1 368, :x2 0, :y2 384, :width 959.9999999999999, :height 1080} {:x1 0, :y1 384, :x2 0, :y2 400, :width 959.9999999999999, :height 1080} {:x1 490.46331787109375, :y1 604.015625, :x2 836.7863159179688, :y2 623.015625, :width 959.9999999999999, :height 1080} {:x1 239.09375, :y1 625.640625, :x2 836.7302856445312, :y2 644.640625, :width 959.9999999999999, :height 1080} {:x1 239.09375, :y1 647.1875, :x2 836.7958374023438, :y2 666.1875, :width 959.9999999999999, :height 1080} {:x1 239.09375, :y1 668.734375, :x2 494.1905517578125, :y2 687.734375, :width 959.9999999999999, :height 1080}), :page 5}, :content {:text " Instead, computer scientists can be content with the abstract notions of Boolean algebra and gate logic, trusting that someone else(the physicists and electrical engineers—bless their souls) will figure out how to actually realize them in hardware. "}, :properties {:color "yellow"}} {:id #uuid "634ff671-76a5-425f-a154-f4b66433f6f0", :page 5, :position {:bounding {:x1 0, :y1 400, :x2 836.737548828125, :y2 709.375, :width 959.9999999999999, :height 1080}, :rects ({:x1 0, :y1 400, :x2 0, :y2 416, :width 959.9999999999999, :height 1080} {:x1 552.1116333007812, :y1 668.734375, :x2 836.737548828125, :y2 687.734375, :width 959.9999999999999, :height 1080} {:x1 239.09375, :y1 690.375, :x2 788.8409423828125, :y2 709.375, :width 959.9999999999999, :height 1080}), :page 5}, :content {:text "a primitive gate (see figure 1.3) can be viewed as a black box device that implements an elementary logical operation"}, :properties {:color "blue"}} {:id #uuid "634ff687-308c-40c6-ac8a-47ac824da5ca", :page 5, :position {:bounding {:x1 0, :y1 432, :x2 836.789794921875, :y2 774.09375, :width 959.9999999999999, :height 1080}, :rects ({:x1 0, :y1 432, :x2 0, :y2 448, :width 959.9999999999999, :height 1080} {:x1 0, :y1 448, :x2 0, :y2 464, :width 959.9999999999999, :height 1080} {:x1 510.817138671875, :y1 711.90625, :x2 834.8390502929688, :y2 730.90625, :width 959.9999999999999, :height 1080} {:x1 239.09375, :y1 733.546875, :x2 836.789794921875, :y2 752.546875, :width 959.9999999999999, :height 1080} {:x1 239.09375, :y1 755.09375, :x2 490.774169921875, :y2 774.09375, :width 959.9999999999999, :height 1080}), :page 5}, :content {:text " hardware designer starts from such primitive gates and designs more complicated functionality by interconnecting them, leading to the construction of composite gates."}, :properties {:color "purple"}} {:id #uuid "634ff6a4-847b-42c1-a5b7-240575fc0ae7", :page 5, :position {:bounding {:x1 223, :y1 801, :x2 774, :y2 912, :width 959.9999999999999, :height 1080}, :rects (), :page 5}, :content {:text "[:span]", :image 1666184866737}, :properties {:color "yellow"}} {:id #uuid "634ff6d5-9b39-4f10-aa3c-c46359577b34", :page 6, :position {:bounding {:x1 213, :y1 102, :x2 877, :y2 337, :width 959.9999999999999, :height 1080}, :rects (), :page 6}, :content {:text "[:span]", :image 1666184916650}, :properties {:color "blue"}} {:id #uuid "634ff724-4fd9-4b5f-ba11-9ebc47277d1e", :page 6, :position {:bounding {:x1 242.59375, :y1 351.640625, :x2 462.7139892578125, :y2 370.640625, :width 959.9999999999999, :height 1080}, :rects ({:x1 242.59375, :y1 351.640625, :x2 462.7139892578125, :y2 370.640625, :width 959.9999999999999, :height 1080}), :page 6}, :content {:text "Primitive and Composite Gates"}, :properties {:color "blue"}} {:id #uuid "634ff737-3cdb-4f8b-a5d0-917fd0f81ecb", :page 6, :position {:bounding {:x1 0, :y1 0, :x2 840.3814086914062, :y2 413.8125, :width 959.9999999999999, :height 1080}, :rects ({:x1 0, :y1 0, :x2 0, :y2 16, :width 959.9999999999999, :height 1080} {:x1 0, :y1 16, :x2 0, :y2 32, :width 959.9999999999999, :height 1080} {:x1 479.375, :y1 351.640625, :x2 840.254150390625, :y2 370.640625, :width 959.9999999999999, :height 1080} {:x1 242.59375, :y1 373.171875, :x2 840.3814086914062, :y2 392.171875, :width 959.9999999999999, :height 1080} {:x1 242.59375, :y1 394.8125, :x2 395.0279541015625, :y2 413.8125, :width 959.9999999999999, :height 1080}), :page 6}, :content {:text "Since all logic gates have the same input and output semantics (0’s and 1’s), they can be chained together, creating composite gates of arbitrary complexity. "}, :properties {:color "green"}} {:id #uuid "634ffa93-442d-4cea-9aa9-8583aab86a12", :page 6, :position {:bounding {:x1 0, :y1 208, :x2 840.3601684570312, :y2 672.8125, :width 959.9999999999999, :height 1080}, :rects ({:x1 0, :y1 208, :x2 0, :y2 224, :width 959.9999999999999, :height 1080} {:x1 351.4328918457031, :y1 632.265625, :x2 840.3601684570312, :y2 651.265625, :width 959.9999999999999, :height 1080} {:x1 242.59375, :y1 653.8125, :x2 408.6101379394531, :y2 672.8125, :width 959.9999999999999, :height 1080}), :page 6}, :content {:text "any given logic gate can be viewed from two different perspectives: external and internal. "}, :properties {:color "blue"}} {:id #uuid "634ffab1-69be-4da9-83e6-59eef27f55f3", :page 6, :position {:bounding {:x1 0, :y1 224, :x2 839.943359375, :y2 694.4375, :width 959.9999999999999, :height 1080}, :rects ({:x1 0, :y1 224, :x2 0, :y2 240, :width 959.9999999999999, :height 1080} {:x1 408.5938415527344, :y1 653.8125, :x2 839.943359375, :y2 672.8125, :width 959.9999999999999, :height 1080} {:x1 242.59375, :y1 675.4375, :x2 463.88409423828125, :y2 694.4375, :width 959.9999999999999, :height 1080}), :page 6}, :content {:text "The right-hand side of figure 1.4 gives the gate’s internal architecture, or implementation"}, :properties {:color "yellow"}} {:id #uuid "634ffac7-72b7-41b4-afc1-80a83ae737f7", :page 6, :position {:bounding {:x1 0, :y1 240, :x2 840.515625, :y2 715.984375, :width 959.9999999999999, :height 1080}, :rects ({:x1 0, :y1 240, :x2 0, :y2 256, :width 959.9999999999999, :height 1080} {:x1 472.9962158203125, :y1 675.4375, :x2 840.515625, :y2 694.4375, :width 959.9999999999999, :height 1080} {:x1 242.59375, :y1 696.984375, :x2 740.111572265625, :y2 715.984375, :width 959.9999999999999, :height 1080}), :page 6}, :content {:text "whereas the left side shows only the gate interface, namely, the input and output pins that it exposes to the outside world."}, :properties {:color "blue"}} {:id #uuid "634ffb70-f079-4976-ba63-c220fa34c086", :page 7, :position {:bounding {:x1 226, :y1 95, :x2 849, :y2 346, :width 959.9999999999999, :height 1080}, :rects (), :page 7}, :content {:text "[:span]", :image 1666186094204}, :properties {:color "blue"}} {:id #uuid "634ffba0-9011-4575-8655-de311771ddaf", :page 7, :position {:bounding {:x1 0, :y1 80, :x2 836.7407836914062, :y2 515.109375, :width 959.9999999999999, :height 1080}, :rects ({:x1 0, :y1 80, :x2 0, :y2 96, :width 959.9999999999999, :height 1080} {:x1 320.704345703125, :y1 474.46875, :x2 836.7407836914062, :y2 493.46875, :width 959.9999999999999, :height 1080} {:x1 239.09375, :y1 496.109375, :x2 523.0084228515625, :y2 515.109375, :width 959.9999999999999, :height 1080}), :page 7}, :content {:text "From an efficiency standpoint, the general rule is to try to do more with less, that is, use as few gates as possible."}, :properties {:color "blue"}} {:id #uuid "634ffbf0-0633-40d3-9ada-247ad7783873", :page 7, :position {:bounding {:x1 255.625, :y1 517.65625, :x2 701.9728393554688, :y2 536.65625, :width 959.9999999999999, :height 1080}, :rects ({:x1 255.625, :y1 517.65625, :x2 701.9728393554688, :y2 536.65625, :width 959.9999999999999, :height 1080}), :page 7}, :content {:text "To sum up, the art of logic design can be described as follows: "}, :properties {:color "yellow"}} {:id #uuid "634ffc07-82e3-4f8e-a357-d90de52eb005", :page 7, :position {:bounding {:x1 0, :y1 112, :x2 836.7678833007812, :y2 579.828125, :width 959.9999999999999, :height 1080}, :rects ({:x1 0, :y1 112, :x2 0, :y2 128, :width 959.9999999999999, :height 1080} {:x1 0, :y1 128, :x2 0, :y2 144, :width 959.9999999999999, :height 1080} {:x1 701.957763671875, :y1 517.65625, :x2 836.7678833007812, :y2 536.65625, :width 959.9999999999999, :height 1080} {:x1 239.09375, :y1 539.28125, :x2 836.7449340820312, :y2 558.28125, :width 959.9999999999999, :height 1080} {:x1 239.09375, :y1 560.828125, :x2 434.0143737792969, :y2 579.828125, :width 959.9999999999999, :height 1080}), :page 7}, :content {:text "Given a gate specification (interface), find an efficient way to implement it using other gates that were already implemented"}, :properties {:color "blue"}} {:id #uuid "634ffc3c-afa1-4b1c-8a0e-b4b99887f76a", :page 7, :position {:bounding {:x1 0, :y1 144, :x2 836.4371948242188, :y2 601.46875, :width 959.9999999999999, :height 1080}, :rects ({:x1 0, :y1 144, :x2 0, :y2 160, :width 959.9999999999999, :height 1080} {:x1 438.6151123046875, :y1 560.828125, :x2 836.4371948242188, :y2 579.828125, :width 959.9999999999999, :height 1080} {:x1 239.09375, :y1 582.46875, :x2 295.93511962890625, :y2 601.46875, :width 959.9999999999999, :height 1080}), :page 7}, :content {:text " This, in a nutshell, is what we will do in the rest of this chapter."}, :properties {:color "purple"}}]}