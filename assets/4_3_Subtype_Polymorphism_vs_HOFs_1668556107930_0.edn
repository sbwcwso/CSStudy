{:highlights [{:id #uuid "637426e2-bf0c-446f-88ee-6bf790be4ce2", :page 1, :position {:bounding {:x1 98.328125, :y1 238.875, :x2 377.6836242675781, :y2 266.875, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 98.328125, :y1 238.875, :x2 377.6836242675781, :y2 266.875, :width 991.5999333333333, :height 1403.1999666666666}), :page 1}, :content {:text "Subtype Polymorphism"}, :properties {:color "yellow"}} {:id #uuid "6374297d-bded-42f7-a3a9-e5499d626a9f", :page 1, :position {:bounding {:x1 0, :y1 0, :x2 867.2263488769531, :y2 394.78125, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 0, :y1 0, :x2 0, :y2 0, :width 991.5999333333333, :height 1403.1999666666666} {:x1 238.81008911132812, :y1 344.015625, :x2 867.2263488769531, :y2 366.015625, :width 991.5999333333333, :height 1403.1999666666666} {:x1 98.328125, :y1 372.78125, :x2 369.5625, :y2 394.78125, :width 991.5999333333333, :height 1403.1999666666666}), :page 1}, :content {:text "Inheritance also makes it possible to design general data structures and methods using polymorphism."}, :properties {:color "yellow"}} {:id #uuid "63742a82-8630-4b0a-ab69-f7a4ebac0b87", :page 1, :position {:bounding {:x1 0, :y1 0, :x2 243.40476989746094, :y2 1235.140625, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 0, :y1 0, :x2 0, :y2 16, :width 991.5999333333333, :height 1403.1999666666666} {:x1 98.328125, :y1 1210.140625, :x2 243.40476989746094, :y2 1235.140625, :width 991.5999333333333, :height 1403.1999666666666}), :page 1}, :content {:text "Max Function"}, :properties {:color "yellow"}} {:id #uuid "63742b5f-474f-49cf-935d-eb34e7acc10c", :page 2, :position {:bounding {:x1 0, :y1 0, :x2 840.0358276367188, :y2 1323.984375, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 0, :y1 0, :x2 0, :y2 16, :width 991.5999333333333, :height 1403.1999666666666} {:x1 98.328125, :y1 1274.46875, :x2 760.6104125976562, :y2 1296.46875, :width 991.5999333333333, :height 1403.1999666666666} {:x1 98.328125, :y1 1301.984375, :x2 840.0358276367188, :y2 1323.984375, :width 991.5999333333333, :height 1403.1999666666666}), :page 2}, :content {:text "This makes sense, as how could Java know whether it should use the String representation of the object, or the size, or another metric, to make the comparison?"}, :properties {:color "purple"}} {:id #uuid "63742c21-dfce-436b-958a-07a87f8aa2e9", :page 3, :position {:bounding {:x1 115, :y1 267, :x2 880, :y2 690, :width 991.5999333333333, :height 1403.1999666666666}, :rects (), :page 3}, :content {:text "[:span]", :image 1668557892766}, :properties {:color "yellow"}} {:id #uuid "63742c7b-8c9b-4214-8e6e-01424f83dff5", :page 3, :position {:bounding {:x1 98.328125, :y1 860.515625, :x2 400.05218505859375, :y2 882.515625, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 98.328125, :y1 860.515625, :x2 400.05218505859375, :y2 882.515625, :width 991.5999333333333, :height 1403.1999666666666}), :page 3}, :content {:text "We will define its behavior like so:"}, :properties {:color "yellow"}} {:id #uuid "63742d07-0529-45e7-a4a3-f612acf1b556", :page 4, :position {:bounding {:x1 0, :y1 0, :x2 887.9035034179688, :y2 661.40625, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 0, :y1 0, :x2 0, :y2 0, :width 991.5999333333333, :height 1403.1999666666666} {:x1 98.328125, :y1 607.890625, :x2 870.0091552734375, :y2 633.890625, :width 991.5999333333333, :height 1403.1999666666666} {:x1 98.328125, :y1 635.40625, :x2 887.9035034179688, :y2 661.40625, :width 991.5999333333333, :height 1403.1999666666666} {:x1 692.890625, :y1 638.453125, :x2 696.9375, :y2 656.46875, :width 991.5999333333333, :height 1403.1999666666666}), :page 4}, :content {:text "Notice that since compareTo takes in any arbitrary Object o, we have to cast the input to a Dog to make our comparison using the size instance variable."}, :properties {:color "yellow"}} {:id #uuid "63742e9c-8225-4cf2-9af3-e67396a64851", :page 5, :position {:bounding {:x1 0, :y1 0, :x2 860.4575805664062, :y2 232.203125, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 0, :y1 0, :x2 0, :y2 16, :width 991.5999333333333, :height 1403.1999666666666} {:x1 98.328125, :y1 182.6875, :x2 860.4575805664062, :y2 204.6875, :width 991.5999333333333, :height 1403.1999666666666} {:x1 98.328125, :y1 210.203125, :x2 316.3224792480469, :y2 232.203125, :width 991.5999333333333, :height 1403.1999666666666}), :page 5}, :content {:text "Using inheritance, we were able to generalize our maximization function. What are the benefits to this approach"}, :properties {:color "yellow"}} {:id #uuid "63742ecb-b576-4378-a626-c0bd9fa15f31", :page 5, :position {:bounding {:x1 0, :y1 0, :x2 889.9823608398438, :y2 308.484375, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 0, :y1 0, :x2 0, :y2 0, :width 991.5999333333333, :height 1403.1999666666666} {:x1 0, :y1 0, :x2 0, :y2 16, :width 991.5999333333333, :height 1403.1999666666666} {:x1 148.34375, :y1 257.71875, :x2 889.9823608398438, :y2 283.71875, :width 991.5999333333333, :height 1403.1999666666666} {:x1 148.34375, :y1 286.484375, :x2 224.15365600585938, :y2 308.484375, :width 991.5999333333333, :height 1403.1999666666666}), :page 5}, :content {:text "No need for maximization code in every class(i.e. no Dog.maxDog(Dog[]) function required"}, :properties {:color "yellow"}} {:id #uuid "63742ee3-e917-43c5-9071-31f680ed4cb2", :page 5, :position {:bounding {:x1 148.34375, :y1 314, :x2 718.9689331054688, :y2 336, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 148.34375, :y1 314, :x2 718.9689331054688, :y2 336, :width 991.5999333333333, :height 1403.1999666666666}), :page 5}, :content {:text "We have code that operates on multiple types (mostly) gracefully"}, :properties {:color "yellow"}} {:id #uuid "63742fe9-4f77-47f3-9a03-0d6a11184551", :page 6, :position {:bounding {:x1 98.328125, :y1 301.40625, :x2 256.7981262207031, :y2 329.40625, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 98.328125, :y1 301.40625, :x2 256.7981262207031, :y2 329.40625, :width 991.5999333333333, :height 1403.1999666666666}), :page 6}, :content {:text "Comparables"}, :properties {:color "yellow"}} {:id #uuid "6374301f-6032-4fbf-a11e-7a3173f5765d", :page 6, :position {:bounding {:x1 148.34375, :y1 427.796875, :x2 445.285888671875, :y2 449.796875, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 148.34375, :y1 427.796875, :x2 445.285888671875, :y2 449.796875, :width 991.5999333333333, :height 1403.1999666666666}), :page 6}, :content {:text "Awkward casting to/from Objects"}, :properties {:color "yellow"}} {:id #uuid "63743087-6768-4f3e-a69c-e8c22e25dd3e", :page 6, :position {:bounding {:x1 105.828125, :y1 614.4375, :x2 753.991943359375, :y2 640.4375, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 105.828125, :y1 614.4375, :x2 753.991943359375, :y2 640.4375, :width 991.5999333333333, :height 1403.1999666666666} {:x1 213.84375, :y1 618.4375, :x2 230.30369567871094, :y2 636.453125, :width 991.5999333333333, :height 1403.1999666666666}), :page 6}, :content {:text "Comparable is already defined by Java and is used by countless libraries."}, :properties {:color "yellow"}} {:id #uuid "6374312c-29f9-4766-b153-a907a3ebe749", :page 6, :position {:bounding {:x1 0, :y1 0, :x2 861.5452270507812, :y2 910.03125, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 0, :y1 0, :x2 0, :y2 0, :width 991.5999333333333, :height 1403.1999666666666} {:x1 0, :y1 0, :x2 0, :y2 16, :width 991.5999333333333, :height 1403.1999666666666} {:x1 208.6875, :y1 858.3125, :x2 861.5452270507812, :y2 884.3125, :width 991.5999333333333, :height 1403.1999666666666} {:x1 208.6875, :y1 862.3125, :x2 349.09967041015625, :y2 880.328125, :width 991.5999333333333, :height 1403.1999666666666} {:x1 98.328125, :y1 888.03125, :x2 467.909912109375, :y2 910.03125, :width 991.5999333333333, :height 1403.1999666666666}), :page 6}, :content {:text "Comparable<T> means that it takes a generic type. This will help us avoid having to cast an object to a specific type! "}, :properties {:color "yellow"}} {:id #uuid "637431b7-3f08-468d-8498-e5f292690aae", :page 7, :position {:bounding {:x1 79, :y1 57, :x2 922, :y2 290, :width 991.5999333333333, :height 1403.1999666666666}, :rects (), :page 7}, :content {:text "[:span]", :image 1668559290974}, :properties {:color "yellow"}} {:id #uuid "63743233-c50d-44a1-849c-a4359cf13ea3", :page 7, :position {:bounding {:x1 98.328125, :y1 310.15625, :x2 240.09024047851562, :y2 338.15625, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 98.328125, :y1 310.15625, :x2 240.09024047851562, :y2 338.15625, :width 991.5999333333333, :height 1403.1999666666666}), :page 7}, :content {:text "Comparator"}, :properties {:color "yellow"}} {:id #uuid "63743362-e836-494f-9c1c-8d2bb6ca93cb", :page 7, :position {:bounding {:x1 0, :y1 0, :x2 817.7481079101562, :y2 985.3125, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 0, :y1 0, :x2 0, :y2 0, :width 991.5999333333333, :height 1403.1999666666666} {:x1 413.3013610839844, :y1 959.3125, :x2 817.7481079101562, :y2 985.3125, :width 991.5999333333333, :height 1403.1999666666666} {:x1 708.1875, :y1 960.3125, :x2 724.6198120117188, :y2 980.328125, :width 991.5999333333333, :height 1403.1999666666666}), :page 7}, :content {:text "The rule for compare is just like compareTo"}, :properties {:color "yellow"}} {:id #uuid "6374396a-2d29-44cb-8bba-0a3a2ea9738c", :page 8, :position {:bounding {:x1 0, :y1 0, :x2 878.247314453125, :y2 847.75, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 0, :y1 0, :x2 0, :y2 0, :width 991.5999333333333, :height 1403.1999666666666} {:x1 429.8089599609375, :y1 766.71875, :x2 835.7962646484375, :y2 788.71875, :width 991.5999333333333, :height 1403.1999666666666} {:x1 98.328125, :y1 794.234375, :x2 878.247314453125, :y2 816.234375, :width 991.5999333333333, :height 1403.1999666666666} {:x1 98.328125, :y1 821.75, :x2 605.090576171875, :y2 847.75, :width 991.5999333333333, :height 1403.1999666666666} {:x1 440.953125, :y1 824.796875, :x2 445, :y2 842.8125, :width 991.5999333333333, :height 1403.1999666666666}), :page 8}, :content {:text " inheritance hierarchy - we have a Comparator interface that's built-in to Java, which we can implement to define our own Comparators( NameComparator , SizeComparator , etc.) within Dog."}, :properties {:color "yellow"}} {:id #uuid "637439c2-60b8-440c-8bec-1c480613e857", :page 8, :position {:bounding {:x1 126.70932006835938, :y1 1091.875, :x2 223.20880126953125, :y2 1113.875, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 126.70932006835938, :y1 1091.875, :x2 223.20880126953125, :y2 1113.875, :width 991.5999333333333, :height 1403.1999666666666}), :page 8}, :content {:text "summarize"}, :properties {:color "yellow"}} {:id #uuid "637439d9-6c09-4d96-9079-4586a06782e7", :page 8, :position {:bounding {:x1 0, :y1 0, :x2 803.421875, :y2 1113.875, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 0, :y1 0, :x2 0, :y2 0, :width 991.5999333333333, :height 1403.1999666666666} {:x1 234.18675231933594, :y1 1091.875, :x2 803.421875, :y2 1113.875, :width 991.5999333333333, :height 1403.1999666666666}), :page 8}, :content {:text "interfaces in Java provide us with the ability to make callbacks."}, :properties {:color "yellow"}} {:id #uuid "637439fe-733a-4fab-a7a9-d7ec7cc6af59", :page 8, :position {:bounding {:x1 0, :y1 0, :x2 879.2100219726562, :y2 1201.671875, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 0, :y1 0, :x2 0, :y2 0, :width 991.5999333333333, :height 1403.1999666666666} {:x1 98.328125, :y1 1120.640625, :x2 828.611572265625, :y2 1142.640625, :width 991.5999333333333, :height 1403.1999666666666} {:x1 98.328125, :y1 1148.15625, :x2 879.2100219726562, :y2 1174.15625, :width 991.5999333333333, :height 1403.1999666666666} {:x1 98.328125, :y1 1175.671875, :x2 346.1608581542969, :y2 1201.671875, :width 991.5999333333333, :height 1403.1999666666666} {:x1 320.453125, :y1 1178.71875, :x2 324.5, :y2 1196.734375, :width 991.5999333333333, :height 1403.1999666666666}), :page 8}, :content {:text "Sometimes, a function needs the help of another function that might not have been written yet (e.g. max needs compareTo ). A callback function is the helping function (in the scenario, compareTo ). "}, :properties {:color "blue"}} {:id #uuid "63743a37-a072-4b90-9470-5219cdbe99ce", :page 8, :position {:bounding {:x1 0, :y1 0, :x2 820.5344848632812, :y2 1226.4375, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 0, :y1 0, :x2 0, :y2 16, :width 991.5999333333333, :height 1403.1999666666666} {:x1 346.143798828125, :y1 1175.671875, :x2 820.5344848632812, :y2 1197.671875, :width 991.5999333333333, :height 1403.1999666666666} {:x1 98.328125, :y1 1204.4375, :x2 255.23431396484375, :y2 1226.4375, :width 991.5999333333333, :height 1403.1999666666666}), :page 8}, :content {:text "In some languages, this is accomplished using explicit function passing; "}, :properties {:color "green"}} {:id #uuid "63743ba0-dda3-4f58-a9bf-77d7f09ab71e", :page 8, :position {:bounding {:x1 255.217041015625, :y1 1204.4375, :x2 720.246826171875, :y2 1226.4375, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 255.217041015625, :y1 1204.4375, :x2 720.246826171875, :y2 1226.4375, :width 991.5999333333333, :height 1403.1999666666666}), :page 8}, :content {:text "in Java, we wrap the needed function in an interface."}, :properties {:color "yellow"}} {:id #uuid "63743e01-0ed5-4874-887b-c926592f1893", :page 9, :position {:bounding {:x1 0, :y1 0, :x2 869.1329956054688, :y2 122.140625, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 0, :y1 0, :x2 0, :y2 0, :width 991.5999333333333, :height 1403.1999666666666} {:x1 98.328125, :y1 72.625, :x2 869.1329956054688, :y2 94.625, :width 991.5999333333333, :height 1403.1999666666666} {:x1 98.328125, :y1 100.140625, :x2 659.2969970703125, :y2 122.140625, :width 991.5999333333333, :height 1403.1999666666666}), :page 9}, :content {:text "A Comparable says, \"I want to compare myself to another object\". It is imbedded within the object itself, and it defines the natural ordering of a type."}, :properties {:color "yellow"}} {:id #uuid "63743ef3-7a37-4d15-8fc7-24bc9c525173", :page 9, :position {:bounding {:x1 0, :y1 0, :x2 864.0672607421875, :y2 150.90625, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 0, :y1 0, :x2 0, :y2 16, :width 991.5999333333333, :height 1403.1999666666666} {:x1 663.5176391601562, :y1 100.140625, :x2 851.41943359375, :y2 122.140625, :width 991.5999333333333, :height 1403.1999666666666} {:x1 98.328125, :y1 128.90625, :x2 864.0672607421875, :y2 150.90625, :width 991.5999333333333, :height 1403.1999666666666}), :page 9}, :content {:text "A Comparator, on the other hand, is more like a third party machine that compares two objects to each other."}, :properties {:color "blue"}} {:id #uuid "63743f14-0497-425e-aaa4-ae0a1a0f8172", :page 9, :position {:bounding {:x1 0, :y1 0, :x2 812.7151489257812, :y2 207.1875, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 0, :y1 0, :x2 0, :y2 0, :width 991.5999333333333, :height 1403.1999666666666} {:x1 0, :y1 0, :x2 0, :y2 16, :width 991.5999333333333, :height 1403.1999666666666} {:x1 98.328125, :y1 156.421875, :x2 812.7151489257812, :y2 182.421875, :width 991.5999333333333, :height 1403.1999666666666} {:x1 98.328125, :y1 185.1875, :x2 442.3288879394531, :y2 207.1875, :width 991.5999333333333, :height 1403.1999666666666}), :page 9}, :content {:text "Since there's only room for one compareTo method, if we want multiple ways to compare, we must turn to Comparator."}, :properties {:color "blue"}} {:id #uuid "638c3c7e-5620-416c-be2c-9892ec77e4a4", :page 8, :position {:bounding {:x1 98.328125, :y1 643.546875, :x2 530.51953125, :y2 667.546875, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 98.328125, :y1 643.546875, :x2 530.51953125, :y2 667.546875, :width 991.5999333333333, :height 1403.1999666666666}), :page 8}, :content {:text "Comparator<Dog> nc = Dog.getNameComparator();"}, :properties {:color "yellow"}} {:id #uuid "638c3c89-1ce3-4652-a04d-28ab7a7e51c7", :page 8, :position {:bounding {:x1 234.3006591796875, :y1 599.140625, :x2 630.4616088867188, :y2 621.140625, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 234.3006591796875, :y1 599.140625, :x2 630.4616088867188, :y2 621.140625, :width 991.5999333333333, :height 1403.1999666666666}), :page 8}, :content {:text " we can retrieve our NameComparator like so"}, :properties {:color "yellow"}}]}