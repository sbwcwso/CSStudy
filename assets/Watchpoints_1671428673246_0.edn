{:highlights [{:id #uuid "639ffa4c-ffdc-4008-9499-f788f6fa76fa", :page 1, :position {:bounding {:x1 98.328125, :y1 94.703125, :x2 277.2977294921875, :y2 127.703125, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 98.328125, :y1 94.703125, :x2 277.2977294921875, :y2 127.703125, :width 991.5999333333333, :height 1403.1999666666666}), :page 1}, :content {:text "Watchpoints"}, :properties {:color "yellow"}} {:id #uuid "639ffa7a-5651-476d-9f3b-b4b24c2f2ecc", :page 1, :position {:bounding {:x1 0, :y1 0, :x2 851.9136352539062, :y2 269.71875, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 0, :y1 0, :x2 0, :y2 0, :width 991.5999333333333, :height 1403.1999666666666} {:x1 0, :y1 0, :x2 0, :y2 16, :width 991.5999333333333, :height 1403.1999666666666} {:x1 490.203125, :y1 220.203125, :x2 851.9136352539062, :y2 242.203125, :width 991.5999333333333, :height 1403.1999666666666} {:x1 98.328125, :y1 247.71875, :x2 544.2736206054688, :y2 269.71875, :width 991.5999333333333, :height 1403.1999666666666}), :page 1}, :content {:text "watchpoint —the ability to have gdb stop when the value of a particular expression changes. "}, :properties {:color "yellow"}} {:id #uuid "639fface-3e05-40e3-b5be-abfeebd32e10", :page 1, :position {:bounding {:x1 0, :y1 0, :x2 889.0994873046875, :y2 326, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 0, :y1 0, :x2 0, :y2 0, :width 991.5999333333333, :height 1403.1999666666666} {:x1 0, :y1 0, :x2 0, :y2 16, :width 991.5999333333333, :height 1403.1999666666666} {:x1 639.9711303710938, :y1 275.234375, :x2 889.0994873046875, :y2 297.234375, :width 991.5999333333333, :height 1403.1999666666666} {:x1 98.328125, :y1 304, :x2 785.964599609375, :y2 326, :width 991.5999333333333, :height 1403.1999666666666}), :page 1}, :content {:text "When gdb stops in response to a watchpoint, it will print the old value of the expression and the new value."}, :properties {:color "yellow"}} {:id #uuid "639ffb20-80bf-4e1b-9742-56e1e915a19d", :page 1, :position {:bounding {:x1 0, :y1 0, :x2 885.5132446289062, :y2 402.28125, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 0, :y1 0, :x2 0, :y2 16, :width 991.5999333333333, :height 1403.1999666666666} {:x1 98.328125, :y1 351.515625, :x2 885.5132446289062, :y2 373.515625, :width 991.5999333333333, :height 1403.1999666666666} {:x1 98.328125, :y1 380.28125, :x2 565.9096069335938, :y2 402.28125, :width 991.5999333333333, :height 1403.1999666666666}), :page 1}, :content {:text "Watchpoints can be a particularly powerful tool when you have pointer-related problems, and values of variables are changing through aliases. "}, :properties {:color "yellow"}} {:id #uuid "639ffb62-660a-4460-9046-09e913ef4e83", :page 1, :position {:bounding {:x1 0, :y1 0, :x2 864.2017211914062, :y2 457.3125, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 0, :y1 0, :x2 0, :y2 0, :width 991.5999333333333, :height 1403.1999666666666} {:x1 0, :y1 0, :x2 0, :y2 16, :width 991.5999333333333, :height 1403.1999666666666} {:x1 760.8250732421875, :y1 380.28125, :x2 864.2017211914062, :y2 402.28125, :width 991.5999333333333, :height 1403.1999666666666} {:x1 98.328125, :y1 407.796875, :x2 813.88623046875, :y2 429.796875, :width 991.5999333333333, :height 1403.1999666666666} {:x1 98.328125, :y1 435.3125, :x2 295.4818115234375, :y2 457.3125, :width 991.5999333333333, :height 1403.1999666666666}), :page 1}, :content {:text "the alias we have when we setup the watchpoint may go out of scope before the change we are interested in happens. "}, :properties {:color "red"}} {:id #uuid "639ffb6d-61e3-4754-a9e4-ee435628c95a", :page 1, :position {:bounding {:x1 0, :y1 0, :x2 865.9173583984375, :y2 486.078125, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 0, :y1 0, :x2 0, :y2 0, :width 991.5999333333333, :height 1403.1999666666666} {:x1 0, :y1 0, :x2 0, :y2 16, :width 991.5999333333333, :height 1403.1999666666666} {:x1 417.3119812011719, :y1 435.3125, :x2 865.9173583984375, :y2 457.3125, :width 991.5999333333333, :height 1403.1999666666666} {:x1 98.328125, :y1 464.078125, :x2 485.0115966796875, :y2 486.078125, :width 991.5999333333333, :height 1403.1999666666666}), :page 1}, :content {:text "we may want to watch *p , but p is a local variable, whose scope ends before the value changes. "}, :properties {:color "green"}} {:id #uuid "639ffb88-8f23-4f11-a662-8699b7e837d1", :page 1, :position {:bounding {:x1 0, :y1 0, :x2 868.1889038085938, :y2 569.859375, :width 991.5999333333333, :height 1403.1999666666666}, :rects ({:x1 0, :y1 0, :x2 0, :y2 0, :width 991.5999333333333, :height 1403.1999666666666} {:x1 485.0115966796875, :y1 464.078125, :x2 856.3600463867188, :y2 486.078125, :width 991.5999333333333, :height 1403.1999666666666} {:x1 98.328125, :y1 491.578125, :x2 868.1889038085938, :y2 513.578125, :width 991.5999333333333, :height 1403.1999666666666} {:x1 98.328125, :y1 520.34375, :x2 861.1638793945312, :y2 542.34375, :width 991.5999333333333, :height 1403.1999666666666} {:x1 98.328125, :y1 547.859375, :x2 308.78125, :y2 569.859375, :width 991.5999333333333, :height 1403.1999666666666}), :page 1}, :content {:text "Whenever we face such a problem, we can print p , which will give us the pointer in a gdb variable ( e.g., $6 ), and then we can use that $ -variable (which never goes out of scope—it lives until we restart gdb ) to set our watchpoint: watch *$6 ."}, :properties {:color "red"}}], :extra {:page 1}}