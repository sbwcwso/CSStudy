#+last-update-time: Mon May 15 08:45:22 2023
#+exclude-from-graph-view: false
#+title: MIT-Missing-Semester
#+tags: Course, Vim, Git

* [[https://missing.csail.mit.edu/][The Missing Semester of Your CS Education · the missing semester of your cs education]]
* Course overview + the shell
:PROPERTIES:
:id: 53dc6c82-3022-4c59-9cc7-841f077784a3
:heading: 1
:collapsed: true
:END:
** [[https://missing.csail.mit.edu/2020/course-shell/][Course overview + the shell]]
** ![overview  the shell.pdf](../assets/overview_the_shell_1669430912601_0.pdf)
** Video
:PROPERTIES:
:heading: 2
:id: 6383f3c5-479e-49b6-ab2d-ef804550b57b
:collapsed: true
:END:
*** {{video https://youtu.be/Z56Jmr9Z34Q}}
**** {{youtube-timestamp 20}} ((63817ee7-b7fc-4560-ba1d-1765ad8acc29))
:PROPERTIES:
:id: 6388018a-d0f2-48a3-9199-c71fecd74534
:END:
**** {{youtube-timestamp 95}} ((63817f70-b6d8-4645-bc5d-e5af849bd3c9))
**** {{youtube-timestamp 250}} ((63818004-bfcf-43ea-8e2a-695f7d513b9e))
**** {{youtube-timestamp 360}}  ((63818047-4fba-4689-8245-cff2fe78bcb4))
***** {{youtube-timestamp 570}}  Environment
**** {{youtube-timestamp 768}} ((63818090-841d-4bb9-950f-0ca981db95fd))
***** {{youtube-timestamp 1080}}  =cd -=
**** {{youtube-timestamp 1115}} Help
**** {{youtube-timestamp 1470}} =mv, cp, rm, rmdir, mkdir=
**** {{youtube-timestamp 1620}}  =man=
**** {{youtube-timestamp 1680}} ((63818286-8650-4195-b118-97539a0aff6d))
:PROPERTIES:
:id: 6388018a-1a00-4c68-9845-de4688b08552
:END:
**** {{youtube-timestamp 2128}}  More interest and powerful way
:PROPERTIES:
:id: 6383ee2a-2637-401d-8fa1-7e48d2ab614e
:END:
***** {{youtube-timestamp 2218}} ~sudo~
****** {{youtube-timestamp 2425}}  ~sudo su~
******* ~sudo sh -c "echo $(whoami):10000:65536 >> /etc/subuid"~
******** ~$(whoami)~ will be the current user, not the root
******** Can replace this command with the ~tee~ command
********* ~tee~ take a input and write to the output
********* ~echo $(whoami):10000:65536 | sudo tee -a /etc/subuid~
***** {{youtube-timestamp 2673}}  Control the keyboard light, funny
****** ~echo 1 | sudo tee /sys/class/leds/input4::scrolllock/brightness~
****** ~echo 0 | sudo tee /sys/class/leds/input4::scrolllock/brightness~
***** {{youtube-timestamp 2728}}  ~xdg-open~ open a file with the default app
** ((63817ee7-b7fc-4560-ba1d-1765ad8acc29))
:PROPERTIES:
:heading: 2
:id: 6383f3a8-e97a-4136-a38f-446c5667501e
:END:
** ((63817f70-b6d8-4645-bc5d-e5af849bd3c9))
:PROPERTIES:
:heading: 2
:id: 6383f3fd-27ad-4ae3-947a-2f873b559a73
:END:
** ((63818004-bfcf-43ea-8e2a-695f7d513b9e))
:PROPERTIES:
:heading: 2
:id: 6383f5d7-70d9-4ac3-95bf-a297f7898b26
:END:
** ((63818047-4fba-4689-8245-cff2fe78bcb4))
:PROPERTIES:
:heading: 2
:id: 6383f675-7b56-49ea-971d-ceab454edd31
:END:
*** ((6383f71c-ca56-461e-b163-34429a21409a))
*** ((6383f787-d933-424e-9044-0f2d103da8f6))
**** ((6383f792-3d1c-48b9-ad99-3105ba31c1ae))
**** ((6383f7b0-ce6f-49ae-b2a2-b41a678949bb))
*** ((6383f80a-f382-4545-83a9-49c11363b9cb))
** ((63818090-841d-4bb9-950f-0ca981db95fd))
:PROPERTIES:
:heading: 2
:id: 6383f85e-0914-495d-ac18-e9ab94642e66
:END:
*** ((6385930b-75f5-43a2-83dc-6e4b39cb9088))
** ((63818286-8650-4195-b118-97539a0aff6d))
:PROPERTIES:
:heading: 2
:id: 63859351-976c-49f4-809f-62f900beecfd
:END:
*** ((6385950e-c8ba-4994-8756-ea25b5293290))
**** ~cat < hello.txt > hello2.txt~
*** ((63859558-0415-4a25-91b8-0a9c04b3b209))
** ((6385956d-ca3f-42c8-be44-809ad06eef40))
:PROPERTIES:
:heading: 2
:id: 6385956f-e4cb-42a8-a2a9-623d174fc463
:END:
*** ((638595ea-6041-4be6-a823-75feb4312a28))
** ((63859cbb-67b2-4309-bcef-7bd759fc6cd2))
:PROPERTIES:
:heading: 2
:id: 63859694-05b5-4791-9f00-26bd35db5b54
:END:
* Shell Tools and Scripting
:PROPERTIES:
:id: 6386982d-1d7b-45ed-9647-28d171efdba1
:heading: 1
:collapsed: true
:END:
** [[https://missing.csail.mit.edu/2020/shell-tools/][Shell Tools and Scripting]]
** [[../assets/Shell_Tools_and_Scripting_1669765419089_0.pdf][Shell Tools and Scripting.pdf]]
** {{video https://youtu.be/kgII-YWo3Zw}}
:PROPERTIES:
:collapsed: true
:END:
*** {{youtube-timestamp 50}} ((6386994e-0e29-46d7-901b-b1af07f0b83b))
:PROPERTIES:
:id: 6386992d-1876-4329-bcc5-bbbd68b4676a
:END:
**** {{youtube-timestamp 70}}  Define a variable
***** {{youtube-timestamp 84}}  Watch out there is no space between ~=~
***** {{youtube-timestamp 150}}  Difference between ~""~ and ~''~
****** ~"$foo"~ will be  replaced  with the value of the variable ~"foo"~
****** ~'$foo'~ will not be  replaced  with the value of the variable ~"foo"~
****** #+BEGIN_SRC sh
foo=bar
echo "$foo"
/# prints bar/
echo '$foo'
/# prints $foo/
#+END_SRC
**** {{youtube-timestamp 195}}  Define function
***** #+BEGIN_SRC sh
mcd () {
    mkdir -p "$1"
    cd "$1"
}
#+END_SRC
***** {{youtube-timestamp 244}}   ~$1~: the first  argument
***** {{youtube-timestamp 282}} ~source *.sh~ to load the function in the shell
**** {{youtube-timestamp 389}}  ~!!~ then ~tab~ will be the previous command
**** {{youtube-timestamp 520}}  ~||~ or operation
**** {{youtube-timestamp 586}}  ~;~, will always run the second command
**** {{youtube-timestamp 615}} Getting the output of a command into a variable
***** ~foo=$(pwd)~
**** {{youtube-timestamp 676}}  Process substitution
:PROPERTIES:
:id: 6386a046-06c9-4d3f-aada-cdeda46f1dc5
:END:
***** ~cat <(ls) <(ls ..)~
****** Watch out the blank
****** The output of the command is likely haven been stored in a temporary file
**** {{youtube-timestamp 733}}  An example
:PROPERTIES:
:id: 6388018a-57df-4757-ad95-837df7900c9f
:END:
***** #+BEGIN_SRC sh
/#!/bin/bash/
echo "Starting program at $(date)" /# Date will be substituted/
echo "Running program $0 with $# arguments with pid $$"
for file in "$@"; do
    grep foobar "$file" > /dev/null 2> /dev/null
    /# When pattern is not found, grep has exit status 1/
    /# We redirect STDOUT and STDERR to a null register since we do not care about them/
    if [[ $? -ne 0 ]]; then
        echo "File $file does not have any foobar, adding one"
        echo "# foobar" >> "$file"
    fi
done
#+END_SRC
**** {{youtube-timestamp 1098}}  filename expansion
***** ~*~, ~?~
***** {{youtube-timestamp 1203}}  ~{}~ and then ~tab~ will expand automatically
****** ~{a..j}~ will expand a to j
***** {{youtube-timestamp 1310}}  ~diff <(ls foo) <(ls bar)~
****** ~<(ls foo)~ and ~<(ls bar)~ will be replaced with tempory file,  which is  two argument of ~diff~
**** {{youtube-timestamp 1455}}  Give argument in shebang
***** ~#!/usr/bin/env python~
**** {{youtube-timestamp 1527}}  shellcheck
***** Check ~*.sh~ file
*** {{youtube-timestamp 1692}}  shell tools
**** {{youtube-timestamp 1792}}  ~tldr~
***** The usage example of command
**** {{youtube-timestamp 1879}} ~find~
***** ~find . -path '**/test/*.py' -type f~
***** ~find . -name "*.tmp" -exec rm {} \;~
**** {{youtube-timestamp 2129}}  ~locate~
***** Find a locate of a file
**** {{youtube-timestamp 2218}}  ~grep -R foobar .~
:PROPERTIES:
:id: 6389d128-fe6d-4d58-9be0-03e79a33bd9b
:END:
***** Recursive
**** {{youtube-timestamp 2254}}  =rg "import requests" -t py ~/scratch=
:PROPERTIES:
:id: 638a88ee-96f5-47f5-a917-f5c475e68cb2
:END:
***** {{youtube-timestamp 2276}} ~ripgrep~
***** {{youtube-timestamp 2309}}  =rg "import requests" -t py -C 5 ~/scratch=
****** get five lines  around the result
***** {{youtube-timestamp 2358}}  ~rg -u --files-without-match "^#!"~
****** Find all files (including hidden files) without a shebang line
***** {{youtube-timestamp 2428}}
****** Print statistics of matches (of matched lines and files )
******* ~rg --stats PATTERN~
**** {{youtube-timestamp 2452}}  ~ack, ag~
**** {{youtube-timestamp 2502}}  ~history~
**** {{youtube-timestamp 2546}}  ~Ctrl + R~ backward search
**** {{youtube-timestamp 2569}}  ~fzf~ fuzzy finder
**** {{youtube-timestamp 2741}}  ~tree~
**** {{youtube-timestamp 2761}}  ~broot~
**** {{youtube-timestamp 2799}}  ~nnn~
:PROPERTIES:
:id: 638a9808-4b46-4808-91ab-591543d9ebc0
:END:
***** TODO 结合 [[https://github.com/jarun/nnn][jarun/nnn: n³ The unorthodox terminal file manager]] 进一步学习 ~nnn~ 的使用
****
** ((6386994e-0e29-46d7-901b-b1af07f0b83b))
:PROPERTIES:
:heading: 2
:id: 638c8864-74f7-4c8d-b4fc-2299082ca9f0
:collapsed: true
:END:
*** ((638a99cf-2ee9-4776-a481-46d1d0fdf715))
**** ((638a9a7d-2235-4dda-aaed-4ca96cacdde7))
*** ((638a9ade-3c1b-46fd-86d8-6dac6ae2a8cc))
**** ((638a9aee-b8d5-4d1d-9591-a9b85a3563b7))
**** ((638a9b00-3449-4d7d-92e7-85f012d7f76c))
*** ((638a9c2e-8095-4269-a644-6b81c3b85c9e))
**** ((638a9c3e-a62f-41c1-83c1-25e6aef0f8f4))
**** #+BEGIN_SRC bash
foo=bar
echo "$foo"
/# prints bar/
echo '$foo'
/# prints $foo/
#+END_SRC
*** ((638a9d81-5e87-42cf-bf23-77d7d592fdf5))
**** #+BEGIN_SRC lisp
mcd () {
    mkdir -p "$1"
    cd "$1"
}
#+END_SRC
**** ~$0~
***** Name of the script
**** ~$1~  to  ~$9~
***** Arguments to the script.  ~$1~  is the first argument and so on.
**** ~$@~
***** All the arguments
**** ~$#~
***** Number of arguments
**** ~$?~
***** Return code of the previous command
**** ~$$~
***** Process identification number (PID) for the current script
**** ~!!~
***** Entire last command, including arguments.
***** A common pattern is to execute a command only for it to fail due to missing permissions; you can quickly re-execute the command with sudo by doing  ~sudo !!~
**** ~$_~
***** Last argument from the last command.
***** If you are in an interactive shell, you can also quickly get this value by typing  ~Esc~  followed by  ~.~  or  ~Alt+.~
*** ((638d2b70-1aef-462d-90a6-f0564eeb1a3c))
**** ((638d2bfa-c8a7-4eb5-8220-020d9aeb72f1))
*** ((638d2c91-cb4f-4f99-8fb0-9601ee1ea0c8))
**** ((638d2d98-d454-41d0-a23a-baa53642b131))
**** ```sh
false || echo "Oops, fail"
# Oops, fail

true || echo "Will not be printed"
#

true && echo "Things went well"
# Things went well

false && echo "Will not be printed"
#

true ; echo "This will always run"
# This will always run

false ; echo "This will always run"
# This will always run
```
*** ((638d2e28-b537-4dce-800d-3c6b9d494ed3))
**** ((638d2f94-4f6a-4a5c-930c-da6675cdd23c))
***** ((638d2fdc-d1a6-41dc-bb03-279649f39257))
****** ((638d30cc-0910-4758-ac19-630a09245726))
**** ((638d3108-fa6e-48f3-ae76-42341dfd2467))
***** ((638d3134-2dde-4a24-8ca8-be15c1c09cff))
****** ((638d3144-45a2-4cc1-a079-602d659bcbf3))
****** ((638d314b-bc3b-4ede-bb30-e029f19c2842))
*** ((638d32c3-d931-4a2e-855a-e380ea827291))
**** ((638d3295-8b12-4743-affd-2cb7549831b6))
***** [[https://www.man7.org/linux/man-pages/man1/test.1.html][test(1) - Linux manual page]]
**** ((638d3359-8b82-4420-94aa-700805c541ea))
***** [[http://mywiki.wooledge.org/BashFAQ/031][What is the difference between test,  [ and [[ ?]]
*** ((638d3562-5457-4563-9703-baae9765e7c1)), ((638d381a-f7f0-45ee-ae94-d0dd4f42f8b8))
**** ((638d388d-4d85-4bb7-9cd5-fbb88bce520d))
**** ((638d392c-8238-4ed2-933b-ea2bab0c241f))
**** ```sh
convert image.{png,jpg}
# Will expand to
convert image.png image.jpg

cp /path/to/project/{foo,bar,baz}.sh /newpath
# Will expand to
cp /path/to/project/foo.sh /path/to/project/bar.sh /path/to/project/baz.sh /newpath

# Globbing techniques can also be combined
mv *{.py,.sh} folder
# Will move all *.py and *.sh files


mkdir foo bar
# This creates files foo/a, foo/b, ... foo/h, bar/a, bar/b, ... bar/h
touch {foo,bar}/{a..h}
touch foo/x bar/y
# Show differences between files in foo and bar
diff <(ls foo) <(ls bar)
# Outputs
# < x
# ---
# > y
```
*** ((638d3a20-8c1a-44c2-b19b-c90d5781e41f))
*** ((638d3a9f-e029-4e59-b5ba-e6ff6730ff13))
**** ((638d3aac-c236-4d49-96c7-feff3b715b5a))
**** Replace ~#!/usr/local/bin/python~ with ~#!/usr/bin/env python ~
*** ((638d3ae3-3a08-47fb-bf7a-93e38c19cd31))
**** ((638d3b0c-e663-4f1a-908d-99c3ec942ca7))
***** ((638d3b10-8d1b-4d63-a5f7-ca96aee53175))
**** ((638d3b05-c77d-4c7f-9346-f860bf390698))
***** ((638d3b17-b8f6-490f-870a-803e987acdae))
**** ((638d3b1f-29a6-4a59-baf7-781645ef2498))
***** ((638d3b3c-43c5-4d53-8394-0bfeb3c9f7e0))
**** ((638d3b60-e6d8-49df-96ae-0067c063e8e7))
** ((638ed303-256b-4a2f-aa8b-f0c7ec37355a))
:PROPERTIES:
:heading: 2
:id: 638ee501-37e4-4c04-b4fa-2b30aea8433a
:END:
*** ((638ed31a-aafe-436a-96ac-b1d308d81209))
:PROPERTIES:
:heading: 3
:id: 638ed312-c370-47b7-86fe-7fbfcfe7ab25
:collapsed: true
:END:
**** ((638ed41f-2d8f-427a-89a3-32b87e402da1))
***** [[https://github.com/tldr-pages/tldr][tldr-pages/tldr: 📚 Collaborative cheatsheets for console commands]]
*** ((638ed6aa-c3a5-4421-b3be-0ca5fa4b4420))
:PROPERTIES:
:id: 638ed5b9-1a61-4cb4-b453-9e4c4a68f112
:heading: 3
:collapsed: true
:END:
**** ((638ed71b-1330-421b-9c7e-f7aa08e26826))
***** ```sh
# Find all directories named src
find . -name src -type d
# Find all python files that have a folder named test in their path
find . -path '*/test/*.py' -type f
# Find all files modified in the last day
find . -mtime -1
# Find all zip files with size in range 500k to 10M
find . -size +500k -size -10M -name '*.tar.gz'
```
**** ((638ed873-3633-42c0-9df5-a8f869c007df))
***** ```sh
# Delete all files with .tmp extension
find . -name '*.tmp' -exec rm {} \;
# Find all PNG files and convert them to JPG
find . -name '*.png' -exec convert {} {}.jpg \;
```
**** ((638edb41-4d46-496c-a5d2-2768c245e4d7))
***** [[https://github.com/sharkdp/fd][sharkdp/fd: A simple, fast and user-friendly alternative to 'find']]
**** ((638edd50-3c9c-47fd-b77e-345608d7802e))
***** [[https://www.man7.org/linux/man-pages/man1/locate.1.html][locate(1) - Linux manual page]]
***** ((638edd73-bb99-4e4e-b47b-e8eeb6f95a1c))
****** In manjaro, you can put the following script in the ~/etc/cron.hourly~, and set the execute bit to true
******* ```sh
#!/bin/sh
/usr/bin/updatedb
```
***** ((638edd8a-01e8-4c56-93d3-6fcb697ce472))
*** ((63902301-e196-41ff-8112-cabaf71a91eb))
:PROPERTIES:
:heading: 3
:id: 639022f8-16d6-43ba-9d5b-a77855c153f8
:collapsed: true
:END:
**** ((63902371-f252-4a85-bba9-b7c1dcfe3e9d))
**** ((639024c6-7805-41a9-880f-e89d0d28e41e))
***** ((639024d2-02c6-4dbb-970a-ff3bd653a718))
****** ((63902571-df60-4cf4-8f9e-c81c30b34653))
***** ((639024e3-dafd-4c82-bbb2-e7ddd59327c0))
****** ((63902537-c72d-4061-9e8a-1b57d5902c9a))
***** ((6390257f-03c7-4e75-b195-eeed2f1834b6))
**** ((639025ae-e380-45a4-ba3a-2d2a55a7bb58))
***** [[https://github.com/BurntSushi/ripgrep][BurntSushi/ripgrep: ripgrep recursively searches directories for a regex pattern while respecting your gitignore]]
***** ((639025ba-9534-4e2e-994e-485d11494568))
****** ```sh
# Find all python files where I used the requests library
rg -t py 'import requests'
# Find all files (including hidden files) without a shebang line
rg -u --files-without-match "^#!"
# Find all matches of foo and print the following 5 lines
rg foo -A 5
# Print statistics of matches (# of matched lines and files )
rg --stats PATTERN
```
*** ((639027c2-9a68-4d44-af97-05c052c65fac))
:PROPERTIES:
:heading: 3
:id: 639027bd-8454-43e3-b082-50bce8a8a313
:collapsed: true
:END:
**** ((639027ec-676e-4970-941d-72289bdae56e))
***** ((63902801-aafb-4326-9906-3612dc3dabf1))
**** ((6390280b-2b07-479f-aca6-dbac4c46a60b))
***** ((63902882-8f94-4aab-9eca-f127eb2299ac))
****** [[https://github.com/junegunn/fzf/wiki/Configuring-shell-key-bindings#ctrl-r][Configuring shell key bindings · junegunn/fzf Wiki]]
**** ((639028c0-f846-48be-a8f3-0fcdbf7f91f1))
*** ((639029d9-d550-4f8e-b378-8b9eec259e2f))
:PROPERTIES:
:id: 639029db-ab52-4151-a724-e4a1ed3b1628
:heading: 3
:collapsed: true
:END:
**** ((63902adb-3479-4188-ab6e-a14b4b65ad39))
***** ((63902b00-4cf3-480e-962a-26ff3c65c0bf))
***** ((63902af7-b34f-4f42-b0d2-f7f28160bb7d))
****** ((63902b07-0921-426f-88f0-ddc1fcb19cbc))
**** ((63902c08-a559-481e-8bd4-ea67f4e9ec46))
**** ((63902c10-35ca-4d34-ba9f-7688dc3b5030))
** ((639171ac-2b86-449c-8e93-1283fc208eab))
:PROPERTIES:
:heading: 2
:id: 639022f6-01e7-4528-881b-20c83e4b0c44
:collapsed: true
:END:
*** ((63917b87-811e-48be-9815-6081d942f4df))
**** ~ls -a -c -lht --color=auto~
*** ((63917b7f-4e89-41e2-bd1d-fc2ce517d936))
**** ```sh
#!/bin/bash
marco () {
    MACRO_PATH=$(pwd)
}

polo() {
    cd $MACRO_PATH
}

```
*** ((63917b82-0725-44ee-b187-8ac670e75823))
**** ```sh
#!/usr/bin/env bash

count=1
$1 > result.txt 2>&1
while [[ $? -eq 0 ]] ; do
    ((count+=1))
    $1 >> result.txt 2>&1
done

cat result.txt
echo "$count runs it took for the script to fail"

```
*** ((63917be7-5313-4e38-9038-2fdeffa476eb))
**** ~find . -name "*.html" | xargs -d "\n" tar cf html.tar~
*** ((63918440-fc0e-4cf7-b3c8-264a82817ae5))
**** ~find . -type f | xargs -d "\n" ls -lt --time-style=long-iso~
* Editors (Vim)
:PROPERTIES:
:id: 6392904d-b316-4f10-9714-80f0931c0204
:heading: 1
:collapsed: true
:END:
** [[https://missing.csail.mit.edu/2020/editors/][Editors (Vim)]]
** [[../assets/Editors_Vim_1670549691518_0.pdf][Editors Vim.pdf]]
** Video
:PROPERTIES:
:heading: 2
:id: 639fc2f8-ca6a-443e-8c4d-7ff6924edd62
:END:
*** {{video https://youtu.be/a6Q8Na575qc}}
:PROPERTIES:
:END:
**** {{youtube-timestamp 7}} Introduction
***** {{youtube-timestamp 218}} vim introduction
**** {{youtube-timestamp 264}}  Philosophy of Vim
***** The interface is a Program language, can combine the simple operation to sophisticated operations
***** {{youtube-timestamp 341}} different mode
****** normal
****** insert
****** replace
****** visual
******* line
******* block
****** command line mode
******* ~:~
**** {{youtube-timestamp 900}} help
**** {{youtube-timestamp 1057}} opened buffers
***** ~qa~ quit all
*****
** ((639fc2aa-4caa-4eef-8499-2e270eec987b))
:PROPERTIES:
:heading: 2
:id: 639fc296-8c3a-4797-9c37-8c8476684bf8
:END:
*** ((639fc357-3370-4ce1-9b75-93fbfe4f7102))
*** ((639fc3c3-f07e-49df-b25c-f8a9926c6a77))
:PROPERTIES:
:heading: 3
:END:
**** [[https://www.vim.org/][welcome home : vim online]]
*** ((639fc47a-2054-4e25-ac7f-156721fc9829))
:PROPERTIES:
:heading: 3
:END:
**** ((639fc4b4-9c0e-4e35-ba8d-bfdbf3aca75c))
*** ((639fc4e0-fdec-443d-a6a5-17e7f5cde599))
:PROPERTIES:
:heading: 3
:END:
**** ((639fc4f3-8c99-4764-8a0b-6e7a10548a0c))
**** ((639fc517-b4d4-436e-8a63-7a9cb3e2ea4a))
**** ((639fc614-1b74-42fe-be6c-799832ea4237))
***** ((639fc61c-6f6c-4e6f-a1a1-4c6e176b9e40))
**** ((639fc633-e3d0-4cc8-ad27-2df46ae1fc63))
***** ((639fc620-6367-442d-8d55-eb0951cbf793))
***** ((639fc624-4adf-4082-81fb-002fee4b6177))
*** ((639fca3c-5bf4-4fb5-9c30-2d5f13892082))
:PROPERTIES:
:heading: 3
:END:
**** ((639fca68-ab7e-40f9-a3cb-fbabb1d47816))
**** ((639fca7a-0dd9-4f77-8607-19ab87fca84c))
***** ((639fca83-d005-457c-aa3d-b0d67d161d3b))
***** ((639fca86-7299-4a92-bc0c-0c01c070ce80))
***** ((639fca88-5b1d-4107-9a0c-2ec5bfeb34f2))
***** ((639fca8c-9e6e-4df0-9175-b7e66bdba39c))
***** ((639fca8e-0687-453a-be5c-466863426ad6))
**** ((639fca9b-3154-4264-b333-1896c2574195))
**** ((639fcacc-7c98-41a1-b932-76870a879847))
**** ((639fcaec-4120-4577-8a21-38909d1dcc0f))
**** ((639fcb11-67fc-4c31-80f8-bc7db6d4d773))
****
** ((639fcca7-4f1c-462f-8e7f-1dcd753db86e))
:PROPERTIES:
:heading: 2
:id: 639fcc96-06bd-4dfa-9658-a2b72bcd05e5
:END:
*** ((639fcd04-0781-4298-a359-9ac274da11f1))
:PROPERTIES:
:heading: 3
:END:
*** ((639fcd0e-cf12-4262-bb27-c153e1e8c39b))
:PROPERTIES:
:heading: 3
:END:
**** ((63a13cdf-4171-452d-aaff-35ed34359162))
**** ((63a13d5f-8fe0-4202-aa27-3f3a9fc5215b))
**** ((63a13d67-bad6-424a-9c95-2ef8c6c0b1bd))
*** ((639fcd18-64a3-46a7-a669-3725347dd480))
:PROPERTIES:
:heading: 3
:END:
**** ~:q~ quit (close window)
~:w~ save (“write”)
~:wq~ save and quit
~:e {name of file}~ open file for editing
~:ls~ show open buffers
~:help {topic}~ open help
  ~:help :w~ opens help for the ~:w~ command
  ~:help w~ opens help for the w movement
** ((639fcd24-c620-4bae-b851-661969c8d025))
:PROPERTIES:
:heading: 2
:id: 63a140dc-36f1-49cc-af26-05cc93a3a158
:END:
*** ((63a13e86-94e1-43ca-abdf-da128c01268d))
:PROPERTIES:
:heading: 3
:END:
**** ((63a13ea9-a110-438f-ba56-3865d6e7f420))
***** Basic movement: ~hjkl~ (left, down, up, right)
***** Words: ~w~ (next word), ~b~ (beginning of word), ~e~ (end of word)
***** Lines: ~0~ (beginning of line), ~^~ (first non-blank character), ~$~ (end of line)
***** Screen: ~H~ (top of screen), ~M~ (middle of screen), ~L~ (bottom of screen)
***** Scroll: ~Ctrl-u~ (up), ~Ctrl-d~ (down)
***** File: ~gg~ (beginning of file), ~G~ (end of file)
***** Line numbers: ~:{number}<CR>~ or ~{number}G~ (line {number})
***** Misc: ~%~ ([[blue#]]^^corresponding item^^)
****** to find a matching ~)~, ~]~, or ~}~
***** Find: ~f{character}~, ~t{character}~, ~F{character}~, ~T{character}~
****** find/to forward/backward {character} on the current line
****** ~,~ / ~;~ for navigating matches
***** Search: ~/{regex}~, ~n~ / ~N~ for navigating matches
*** ((63a14122-5f68-4975-94fd-426cda4c2e96))
:PROPERTIES:
:heading: 3
:END:
**** Visual modes:
***** Visual: ~v~
***** Visual Line: ~V~
***** Visual Block: ~Ctrl-v~
**** Can use movement keys to make selection.
*** ((63a141ac-a2de-4a5e-b7ef-8468d1864721))
:PROPERTIES:
:heading: 3
:END:
**** ((63a141ce-6a55-4884-bfba-e974d9a2f02a))
**** ~i~ enter Insert mode
***** but for manipulating/deleting text, want to use something more than backspace
**** ~o~ / ~O~ insert line below / above
**** ~d{motion}~ delete {motion}
***** e.g. ~dw~ is delete word, ~d$~ is delete to end of line, ~d0~ is delete to beginning of line
**** ~c{motion}~ change {motion}
***** e.g. ~cw~ is change word
***** like ~d{motion}~ followed by ~i~
**** ~x~ delete character (equal do ~dl~)
**** ~s~ substitute character (equal to ~cl~)
**** Visual mode + manipulation
***** select text, ~d~ to delete it or ~c~ to change it
**** ~u~ to undo, ~<C-r>~ to redo
**** ~y~ to copy / "yank" (some other commands like ~d~ also copy)
**** ~p~ to paste
**** =~ = flips the case of a character
*** ((63a14373-d510-48ec-bd9c-8707bbaf173d))
:PROPERTIES:
:heading: 3
:END:
**** ((63a14371-ac1a-455d-a674-cdfd0b31e4ea))
**** ~3w~ move 3 words forward
**** ~5j~ move 5 lines down
**** ~7dw~ delete 7 words
*** ((63a143cb-f95e-4174-9586-ef85c6db0396))
:PROPERTIES:
:heading: 3
:END:
**** ((63a143ec-422d-480d-9fca-51f1e346e94e))
***** ((63a143ef-d9ae-4482-8830-fc957c9c2083))
**** ~ci(~ change the contents inside the current pair of parentheses
**** ~ci[~ change the contents inside the current pair of square brackets
**** ~da'~ delete a single-quoted string, including the surrounding single quotes
*** ((63a144b4-e58d-4283-8243-452021a9a9ec))
:PROPERTIES:
:heading: 3
:END:
** ((63a24f63-e60a-4021-853a-9559d0929b28))
:PROPERTIES:
:heading: 2
:id: 63a3aff6-cad8-4784-94b4-ef10f69655a1
:END:
*** ((63a24fff-f546-4350-a243-7bd65dc9f218))
**** [[https://missing.csail.mit.edu/2020/files/vimrc][Basic config file]]
*** ((63a25038-5ebd-4ab1-8860-bd84163782c0))
** ((63a25069-ad60-4203-8aec-41ed1b534fca))
:PROPERTIES:
:heading: 2
:id: 63a3aff6-26f6-425c-bfcb-8fa919aead4d
:END:
*** ((63a250b5-c1c9-4620-be8a-83cac3b2be4a))
**** ((63a250c7-5f41-4ee5-9a08-18187d11bad3))
*** Some useful plugins
**** [[https://github.com/ctrlpvim/ctrlp.vim][ctrlp.vim]]: fuzzy file finder
**** [[https://github.com/mileszs/ack.vim][ack.vim]]: code search
**** [[https://github.com/scrooloose/nerdtree][nerdtree]]: file explorer
**** [[https://github.com/easymotion/vim-easymotion][vim-easymotion]]: magic motions
*** [[https://github.com/anishathalye/dotfiles][可参考的 vim 配置]]
** ((63a256aa-6aef-4e3c-9fec-8ac3f5220d2e))
:PROPERTIES:
:heading: 2
:id: 63a78532-a92b-4d4b-9f3f-5ae4d0677a36
:END:
*** ((63a256ec-ea6d-49d7-a0c2-d02d2d90f321))
:PROPERTIES:
:heading: 3
:END:
**** If you're a Bash user, use ~set -o vi~. If you use Zsh, ~bindkey -v~. For Fish, ~fish_vi_key_bindings~.
**** Additionally, no matter what shell you use, you can ~export EDITOR=vim~.
***** This is the environment variable used to decide which editor is launched when a program wants to start an editor.
***** For example, ~git~ will use this editor for commit messages.
*** ((63a258b0-de1c-419c-9e34-35de429e3404))
:PROPERTIES:
:heading: 3
:END:
**** Many programs use the [[https://tiswww.case.edu/php/chet/readline/rltop.html][GNUReadline]] library for their command-line interface.
***** Readline supports (basic) Vim emulation too, which can be enabled by adding the following line to the  =~/.inputrc= file:
***** ```
set editing-mode vi
```
***** With this setting, for example, the Python REPL will support Vim bindings.
*** ((63a25949-e271-426e-a7d1-52ae615d3db4))
:PROPERTIES:
:heading: 3
:END:
**** There are even vim keybinding extensions for web
***** [[http://vim.wikia.com/wiki/Vim_key_bindings_for_web_browsers][browsers]]
***** some popular ones are
****** [[https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en][Vimium]] for Google Chrome
****** [[https://github.com/tridactyl/tridactyl][Tridactyl]] for Firefox.
**** You can even get Vim bindings in [[https://github.com/lambdalisue/jupyter-vim-binding][Jupyternotebooks]].
**** Here is a [[https://reversed.top/2016-08-13/big-list-of-vim-like-software][long list]] of software with vim-like keybindings.
** Advanced Vim
:PROPERTIES:
:heading: 2
:id: 63a93a47-a733-46bc-9e7f-b2653f289126
:END:
*** ((63a93a62-dc15-4166-86e0-1ba8110bd621))
*** ((63a93aed-e60c-4dcd-ae90-b2db4f4b899f))
:PROPERTIES:
:heading: 3
:END:
**** ~:s~ (substitute) command ([[http://vim.wikia.com/wiki/Search_and_replace][documentation]]).
***** ~%s/foo/bar/g~
****** replace foo with bar globally in file
***** ~%s/\[[\(.*\][.*\]])/\1/g~
****** replace named Markdown links with plain URLs
*** ((63a93b2c-d5fb-4948-9266-327f38194d30))
:PROPERTIES:
:heading: 3
:END:
**** ~:sp~ / ~:vsp~ to split windows
**** Can have multiple views of the same buffer.
*** ((63a93b44-1de3-4f12-bef4-260381cd4af5))
:PROPERTIES:
:heading: 3
:END:
**** ~q{character}~ to start recording a macro in register ~{character}~
**** ~q~ to stop recording
**** ~@{character}~ replays the macro
**** Macro execution stops on error
**** ~{number}@{character}~ executes a macro {number} times
**** Macros can be recursive
:PROPERTIES:
:heading: 4
:END:
***** first clear the macro with ~q{character}q~
***** record the macro, with ~@{character}~ to [[red#]]^^invoke the macro recursively^^  (will be a no-op until recording is complete)
***** [[https://vim.fandom.com/wiki/Record_a_recursive_macro][Record a recursive macro | Vim Tips Wiki | Fandom]]
**** [[red#]]^^Example: convert xml to json^^ ([[https://missing.csail.mit.edu/2020/files/example-data.xml][file]])
:PROPERTIES:
:heading: 4
:END:
***** Array of objects with keys "name" / "email"
***** Use a Python program?
***** Use sed / regexes
****** ~g/people/d~
****** ~%s/<person>/{/g~
****** ~%s/<name>\(.*\)<\/name>/"name": "\1",/g~
****** ...
***** [[red#]]^^Vim commands / macros^^
****** ~Gdd~, ~ggdd~ delete first and last lines
****** Macro to format a single element (register ~e~)
******* Go to line with ~<name>~
******* ~qe^r"f>s": "<ESC>f<C"<ESC>q~
****** Macro to format a person
******* Go to line with ~<person>~
******* ~qpS{<ESC>j@eA,<ESC>j@ejS},<ESC>q~
****** Macro to format a person and go to the next person
******* Go to line with ~<person>~
******* ~qq@pjq~
****** Execute macro until end of file
******* ~999@q~
****** Manually remove last ~,~ and add ~[~ and ~]~ delimiters
** ((63a940da-6cc5-49cb-b980-485ec623d982))
:PROPERTIES:
:heading: 2
:id: 63a93ad4-bef8-400c-b988-37e9b829c0c3
:END:
*** ~vimtutor~ is a tutorial that comes installed with Vim - if Vim is installed, you should be able to run ~vimtutor~ from your shell
*** [[https://vim-adventures.com/][Vim Adventures]] is a game to learn Vim
*** [[http://vim.wikia.com/wiki/Vim_Tips_Wiki][Vim Tips Wiki]]
*** [[https://vimways.org/2019/][Vim Advent Calendar]] has various Vim tips
*** [[http://www.vimgolf.com/][Vim Golf]] is [[https://en.wikipedia.org/wiki/Code_golf][code golf]], but where the programming language is Vim's UI
*** [[https://vi.stackexchange.com/][Vi/Vim Stack Exchange]]
*** [[http://vimcasts.org/][Vim Screencasts]]
*** [[https://pragprog.com/titles/dnvim2/][Practical Vim]] (book)
** ((63e3a912-249c-4a1a-b0d1-f1b540d38f43))
:PROPERTIES:
:heading: 2
:ID: bbb271a3-8422-470c-965b-b3b99f9dfcaf
:END:
*** DONE 1. Complete ~vimtutor~.
:PROPERTIES:
:END:
:LOGBOOK:
CLOCK: [2023-02-08 Wed 22:17:50]--[2023-02-08 Wed 22:23:29] =>  00:05:39
CLOCK: [2023-02-09 Thu 07:01:28]--[2023-02-09 Thu 07:37:12] =>  00:35:44
CLOCK: [2023-02-09 Thu 08:06:50]--[2023-02-09 Thu 08:29:03] =>  00:22:13
CLOCK: [2023-02-09 Thu 08:41:46]--[2023-02-09 Thu 08:43:09] =>  00:01:23
:END:
**** #+begin_src txt

			       Lesson 1 SUMMARY


  1. The cursor is moved using either the arrow keys or the hjkl keys.
	 h (left)	j (down)       k (up)	    l (right)

  2. To start Vim from the shell prompt type:  vim FILENAME <ENTER>

  3. To exit Vim type:	   <ESC>   :q!	 <ENTER>  to trash all changes.
	     OR type:	   <ESC>   :wq	 <ENTER>  to save the changes.

  4. To delete the character at the cursor type:  x

  5. To insert or append text type:
	 i   type inserted text   <ESC>		insert before the cursor
	 A   type appended text   <ESC>         append after the line

NOTE: Pressing <ESC> will place you in Normal mode or will cancel
      an unwanted and partially completed command.
#+end_src
**** #+begin_src txt

			       Lesson 2 SUMMARY

  1. To delete from the cursor up to the next word type:        dw
  2. To delete from the cursor up to the end of the word type:  de
  3. To delete from the cursor to the end of a line type:       d$
  4. To delete a whole line type:                               dd

  5. To repeat a motion prepend it with a number:   2w
  6. The format for a change command is:
               operator   [number]   motion
     where:
       operator - is what to do, such as  d  for delete
       [number] - is an optional count to repeat the motion
       motion   - moves over the text to operate on, such as  w (word),
		  e (end of word),  $ (end of the line), etc.

  7. To move to the start of the line use a zero:  0

  8. To undo previous actions, type:           u  (lowercase u)
     To undo all the changes on a line, type:  U  (capital U)
     To undo the undo's, type:                 CTRL-R

#+end_src
**** #+begin_src

			       Lesson 3 SUMMARY


  1. To put back text that has just been deleted, type   p .  This puts the
     deleted text AFTER the cursor (if a line was deleted it will go on the
     line below the cursor).

  2. To replace the character under the cursor, type   r   and then the
     character you want to have there.

  3. The change operator allows you to change from the cursor to where the
     motion takes you.  eg. Type  ce  to change from the cursor to the end of
     the word,  c$  to change to the end of a line.

  4. The format for change is:

	 c   [number]   motion
#+end_src
**** #+begin_src txt

			       Lesson 4 SUMMARY


  1. CTRL-G  displays your location in the file and the file status.
             G  moves to the end of the file.
     number  G  moves to that line number.
            gg  moves to the first line.

  2. Typing  /	followed by a phrase searches FORWARD for the phrase.
     Typing  ?	followed by a phrase searches BACKWARD for the phrase.
     After a search type  n  to find the next occurrence in the same direction
     or  N  to search in the opposite direction.
     CTRL-O takes you back to older positions, CTRL-I to newer positions.

  3. Typing  %	while the cursor is on a (,),[,],{, or } goes to its match.

  4. To substitute new for the first old in a line type    :s/old/new
     To substitute new for all 'old's on a line type	   :s/old/new/g
     To substitute phrases between two line #'s type	   :#,#s/old/new/g
     To substitute all occurrences in the file type	   :%s/old/new/g
     To ask for confirmation each time add 'c'		   :%s/old/new/gc
#+end_src
**** #+begin_src txt

			       Lesson 5 SUMMARY


  1.  :!command  executes an external command.

      Some useful examples are:
	 (Windows)	  (Unix)
	  :!dir		   :!ls		   -  shows a directory listing.
	  :!del FILENAME   :!rm FILENAME   -  removes file FILENAME.

  2.  :w FILENAME  writes the current Vim file to disk with name FILENAME.

  3.  v  motion  :w FILENAME  saves the Visually selected lines in file
      FILENAME.

  4.  :r FILENAME  retrieves disk file FILENAME and puts it below the
      cursor position.

  5.  :r !dir  reads the output of the dir command and puts it below the
      cursor position.

#+end_src
**** #+begin_src txt

			       Lesson 6 SUMMARY

  1. Type  o  to open a line BELOW the cursor and start Insert mode.
     Type  O  to open a line ABOVE the cursor.

  2. Type  a  to insert text AFTER the cursor.
     Type  A  to insert text after the end of the line.

  3. The  e  command moves to the end of a word.

  4. The  y  operator yanks (copies) text,  p  puts (pastes) it.

  5. Typing a capital  R  enters Replace mode until  <ESC>  is pressed.

  6. Typing ":set xxx" sets the option "xxx".  Some options are:
  	'ic' 'ignorecase'	ignore upper/lower case when searching
	'is' 'incsearch'	show partial matches for a search phrase
	'hls' 'hlsearch'	highlight all matching phrases
     You can either use the long or the short option name.

  7. Prepend "no" to switch an option off:   :set noic
#+end_src
**** #+begin_src txt

			       Lesson 7 SUMMARY


  1. Type  :help  or press <F1> or <HELP>  to open a help window.

  2. Type  :help cmd  to find help on  cmd .

  3. Type  CTRL-W CTRL-W  to jump to another window.

  4. Type  :q  to close the help window.

  5. Create a vimrc startup script to keep your preferred settings.

  6. When typing a  :  command, press CTRL-D to see possible completions.
     Press <TAB> to use one completion.
#+end_src
*** DONE 2. Download our basic vimrc and save it to =/.vimrc=. Read through the well-commented file (using Vim!), and observe how Vim looks and behaves slightly differently with the new config.
:LOGBOOK:
CLOCK: [2023-02-09 Thu 08:46:41]--[2023-02-09 Thu 08:52:44] =>  00:06:03
:END:
*** DONE 3. Install and configure a plugin:  [[https://github.com/ctrlpvim/ctrlp.vim][ctrlp.vim]].
**** 1. Create the plugins directory with =mkdir -p ~/.vim/pack/vendor/start=
2. Download the plugin: =cd ~/.vim/pack/vendor/start; git clone https://github.com/ctrlpvim/ctrlp.vim=
3. Read the [[https://github.com/ctrlpvim/ctrlp.vim/blob/master/readme.md][documentation]] for the plugin. Try using CtrlP to locate a file by navigating to a project directory, opening Vim, and using the Vim command-line to start ~:CtrlP~.
4. Customize CtrlP by adding [[https://github.com/ctrlpvim/ctrlp.vim/blob/master/readme.md#basic-options][configuration]] to your =~/.vimrc= to open CtrlP by pressing Ctrl-P.
* Data Wrangling
:PROPERTIES:
:id: 63e500fc-dc46-4fbc-8dc6-a16ab0a3186b
:heading: 1
:collapsed: true
:END:
** [[https://missing.csail.mit.edu/2020/data-wrangling/][Data Wrangling]]
** [[../assets/Data_Wrangling_1675908936862_0.pdf][Data Wrangling.pdf]]
** Video
:PROPERTIES:
:heading: 2
:ID: c13d4609-5842-4905-a098-6505ed287a29
:collapsed: true
:END:
*** {{video https://youtu.be/sz_dsktIjt4}}
**** {{youtube-timestamp 95}} System log =journalctl=
**** {{youtube-timestamp 422}} =sed=
**** {{youtube-timestamp 1373}} regular debug
**** {{youtube-timestamp 1754}} =sort=
**** {{youtube-timestamp 1769}} =uniq=
**** {{youtube-timestamp 2060}} =awk=
**** {{youtube-timestamp 2631}} =xargs=
** ((63e45f15-99f0-42c2-82db-210e0340362e))
:PROPERTIES:
:heading: 2
:ID: b3a39c3a-ee4b-4671-aeda-5311a6fd27d7
:collapsed: true
:END:
*** ((63e45f1e-8478-4186-a229-12e1284d5c57))
*** ((63e45f57-af54-4483-b689-9cee29184d9c))
*** ((63e46346-7671-4c53-a3a3-87a7f2590f77))
**** ((63e4635d-3a0c-4b71-97e5-2fc3a1285a8d))
**** ((63e655bc-8fe3-4856-9bfd-678756d3af76))
**** =ssh $myserver 'journalctl | grep sshd | grep "Disconnected from"' > ~/ssh.log=
*** ((63e463d4-9c10-4c48-a21f-3b938c318b18))
**** #+begin_src bash
cat ~/ssh.log |
sed 's/.*Disconnected from //'
#+end_src
**** ((63e46431-5562-4457-8909-d40700ed735d))
** ((63e46679-cbbe-43b3-8d97-12bb2208eb67))
:PROPERTIES:
:heading: 2
:ID: 2f01f98c-73d1-4064-b428-c9bcdd0d558e
:collapsed: true
:END:
*** ((63e466a4-7341-4fa7-bcd0-2a385cc68cdd))
*** ((63e46732-69ae-4c6d-91d9-b42535718b4d))
** ((63e46fa3-8da2-4b40-9144-9132a980421d))
:PROPERTIES:
:heading: 2
:ID: 307817d8-8e11-4655-857f-349b78054556
:collapsed: true
:END:
*** #+begin_src sh
cat ~/ssh.log |
sed -E 's/.*Disconnected from (invalid |authenticating )?user (.*) [^ ]+ port [0-9]+( \[preauth\])?$/\2/' |
sort |
uniq -c |
sort -nk1,1 |
tail -n10
#+end_src
*** ((63e47f94-68ca-4736-9e95-30944cb145b5))
*** ((63e48108-7991-475d-ad42-d7714ecd54c3))
**** ((63e480f8-54a9-4ba2-8d58-cf0400f125c9))
**** ((63e48115-47ec-4420-802d-2edabf3bb9bd))
***** ((63e4811e-d987-486c-9bad-0c8a3107eb0b))
****** This is very useful when use the =-u= opinion to collapse consecutive lines
****** 将文件c.txt中的内容按照第一列内容进行去重。
******* #+begin_example
ADD:USER="123";
MOD:USER="123";
ADD:USER="321";
LST:USER="123";
ADD:USER="321";
LST:USER="456";
MOD:USER="789";
#+end_example
****** 执行命令： =cat c.txt | sort -t':' -k1,1 -u=
******* #+begin_example
$ cat c.txt |sort -t':' -k1,1 -u
ADD:USER="123";
LST:USER="123";
MOD:USER="123";
#+end_example
****** 而如果执行命令 =cat c.txt|sort -t':' -k1,2 -u=
******* #+begin_example
$ cat c.txt |sort -t':' -k1,2 -u
ADD:USER="123";
ADD:USER="321";
LST:USER="123";
LST:USER="456";
MOD:USER="123";
MOD:USER="789";
#+end_example
**** ((63e48138-5b21-4459-a878-891948a04f5f))
**** [[https://www.cnblogs.com/linyfeng/p/6960867.html][Linux sort命令使用方法 - 锅边糊 - 博客园]]
** ((63e4832b-8c9f-490a-90c0-5e245baceb90))
:PROPERTIES:
:heading: 2
:ID: 3a418f61-5b3f-4589-8c24-942fbaa14bb7
:collapsed: true
:END:
*** ((63e48351-c38e-45be-b328-26d444a9f3b3))
*** #+begin_src sh
cat ~/ssh.log |
sed -E 's/.*Disconnected from (invalid |authenticating )?user (.*) [^ ]+ port [0-9]+( \[preauth\])?$/\2/' |
sort |
uniq -c |
sort -nk1,1 |
tail -n10 |
awk '{print $2}' |
paste -sd,
#+end_src
**** ((63e4815b-5c88-4149-b1d1-19fbf1548139))
*** ((63e48380-e59f-4cd3-8648-aa477ed3f8d7))
**** ((63e48386-517d-4ea3-9788-e551b7e9f9e6))
**** ((63e4839f-0004-4337-b605-faba3ef8e3c9))
***** ((63e483ab-851b-407d-b635-5b0da1e8e032))
***** ((63e483c1-c8d4-49cb-9b13-ed5fecda4f9e))
*** ((63e48427-56a7-4e52-81dc-a2cdcc39e07d))
**** #+begin_src sh
| awk '$1 == 1 && $2 ~ /^c[^ ]*e$/ { print $2 }' | wc -l
#+end_src
**** ((63e48466-b982-4657-9c52-76ad77237231))
***** ((63e4846a-ae0e-4949-bdcc-14374405d3af))
***** ((63e48470-79da-4459-b561-3b6107698e03))
**** ((63e48488-9692-4c0a-901c-47c3600ce92b))
**** ((63e4849f-5eef-4e7e-8215-618f72ebaeac))
***** #+begin_src sh
BEGIN { rows = 0 }
$1 == 1 && $2 ~ /^c[^ ]*e$/ { rows += $1 }
END { print rows }
#+end_src
***** ((63e484f5-72b8-4b42-8d9c-b633a83e527b))
** ((63e48ca3-1b6e-46d0-9b1b-a002c0b5aabe))
:PROPERTIES:
:heading: 2
:ID: 35bda7ca-3b41-4d50-aa89-9053ade901e2
:collapsed: true
:END:
*** ((63e48eec-9d3d-43bb-b476-77f6fe7f7b19))
**** ((63e48efe-77af-4476-920d-37f2a592b242))
*** ((63e48f2f-4282-4056-bbf5-0c1a88774828))
:PROPERTIES:
:END:
**** [[https://github.com/nferraz/st][st]] ((63e4a969-b2f5-4284-867f-f8edf252dac5))
#+begin_src sh
cat ~/ssh.log |
sed -E 's/.*Disconnected from (invalid |authenticating )?user (.*) [^ ]+ port [0-9]+( \[preauth\])?$/\2/' |
sort |
uniq -c |
awk '{print $1}' |
st --transpose-output
#+end_src
**** [[https://www.r-project.org/][R]] ((63e4a734-fa79-4e94-92d5-159bef423ff4))
#+begin_src sh
cat ~/ssh.log |
sed -E 's/.*Disconnected from (invalid |authenticating )?user (.*) [^ ]+ port [0-9]+( \[preauth\])?$/\2/' |
sort |
uniq -c |
awk '{print $1}' |
R --no-echo -e 'x <- scan(file="stdin", quiet=TRUE); summary(x)'
#+end_src
*** ((63e4a74c-8a50-41fd-a59b-9f770291cae6))
:PROPERTIES:
:END:
#+begin_src sh
cat ~/ssh.log |
sed -E 's/.*Disconnected from (invalid |authenticating )?user (.*) [^ ]+ port [0-9]+( \[preauth\])?$/\2/' |
sort | uniq -c |
sort -nk1,1 | tail -n10 |
gnuplot -p -e 'set boxwidth 0.5; plot "-" using 1:xtic(2) with boxes'
#+end_src
** ((63e4af8d-c033-4f9c-b97a-142871779cbc))
:PROPERTIES:
:heading: 2
:ID: 835ec21f-78dd-4f55-82f0-b84cf086c557
:collapsed: true
:END:
*** ((63e4afc3-fca1-42f9-87fd-b00dba660766))
*** =rustup toolchain list | grep nightly | grep -vE "nightly-x86" | sed 's/-x86.*//' | xargs rustup toolchain uninstall=
** ((63e4b03e-9b75-44c0-8563-3896ae41f9e6))
:PROPERTIES:
:heading: 2
:ID: 92b3e838-5869-4038-8a0d-e767f269c539
:collapsed: true
:END:
*** ((63e4b0c9-cb1b-493d-b6e6-dde6aebd971a))
**** ```bash
ffmpeg -loglevel panic -i /dev/video0 -frames 1 -f image2 -
 | convert - -colorspace gray -
 | gzip
 | ssh mymachine 'gzip -d | tee copy.jpg' | env DISPLAY=:0 feh -
```
** ((63e4c0ce-f3ad-44e5-b597-03ab8de47f8f))
:PROPERTIES:
:heading: 2
:ID:       519d930e-c4c1-4702-89dd-58b8b615fcbe
:END:
*** DONE 1. Take this [[https://regexone.com/][short interactive regex tutorial]]. [[regex]]
**** [[https://www.regular-expressions.info/wordboundaries.html][ \ b Word Boundaries]]
*** DONE 2. Find the number of words (in =/usr/share/dict/words=) that contain at least three =a=s and don't have a ='s= ending. What are the three most common last two letters of those words? =sed='s =y= command, or the =tr= program, may help you with case insensitivity. How many of those two-letter combinations are there? And for a challenge: which combinations do not occur?
:PROPERTIES:
:END:
:LOGBOOK:
CLOCK: [2023-02-10 Fri 11:40:00]--[2023-02-10 Fri 12:00:00] =>  00:20:00
CLOCK: [2023-02-10 Fri 15:37:32]--[2023-02-10 Fri 16:58:20] =>  01:20:48
:END:
**** =sudo pacman -S words= for arch Linux to install words
**** Find the number of words (in =/usr/share/dict/words=) that contain at least three =a=s and don't have a ='s= ending
#+begin_src bash
cat /usr/share/dict/words |
grep -Ei "(.*a.*){3,}" |
grep -Ev "'s$" |
wc -l
#+end_src
**** What are the three most common last two letters of those words?
#+begin_quote
[[https://thomas-cokelaer.info/blog/2011/05/awk-the-substr-command-to-select-a-substring/][AWK: the substr command to select a substring | Thomas Cokelaer's blog]]
#+end_quote

#+begin_src bash
cat /usr/share/dict/words |
grep -Ei "(.*a.*){3,}" |
grep -Ev "'s$" |
awk '{print substr($0, length($0)-1)}'|
tr "[:upper:]" "[:lower:]" |
sort |
uniq -c |
sort -nk1,1 -r |
awk '{print $2}' |
head -3
#+end_src
**** How many of those two-letter combinations are there?
#+begin_src bash
cat /usr/share/dict/words |
grep -Ei "(.*a.*){3,}" |
grep -Ev "'s$" |
awk '{print substr($0, length($0)-1)}'|
tr "[:upper:]" "[:lower:]" |
sort |
uniq |
wc -l
#+end_src
**** Which combinations do not occur?
#+begin_src bash
echo {a..z}{a..z} |
sed -E "s/$(cat /usr/share/dict/words |
grep -Ei "(.*a.*){3,}" |
grep -Ev "'s$" |
awk '{print substr($0, length($0)-1)}'|
tr "[:upper:]" "[:lower:]" |
grep -E ".*[a-z]{2}$" |
sort |
uniq |
paste -sd\| |
sed -E 's/^(.*)$/(\1)/') ?//g"
#+end_src
***** The last two words may have characters not in [a-z] which we should exclude.
***** As for all the words in the dict:
#+begin_src bash
echo {a..z}{a..z} |
sed -E "s/$(cat /usr/share/dict/words |
awk '{print substr($0, length($0)-1)}'|
tr "[:upper:]" "[:lower:]" |
grep -E ".*[a-z]{2}$" |
sort |
uniq |
paste -sd\| |
sed -E 's/^(.*)$/(\1)/') ?//g"
#+end_src
*** DONE 3. To do in-place substitution it is quite tempting to do something like =sed s/REGEX/SUBSTITUTION/ input.txt > input.txt=. However this is a bad idea, why? Is this particular to =sed=? Use =man sed= to find out how to accomplish this.
:PROPERTIES:
:END:
**** Read and write a single file at the same time may casue conflict, so it is a bad idea. It's the same for =awk= and =grep=
**** We can use the =-i= opinion in =sed= to do in-place substitution.
#+begin_src bash
-i[SUFFIX], --in-place[=SUFFIX]

      edit files in place (makes backup if SUFFIX supplied)
#+end_src
*** DONE 4. Find your average, median, and max system boot time over the last ten boots. Use =journalctl= on Linux and =log show= on macOS, and look for log timestamps near the beginning and end of each boot. On Linux, they may look something like: =Logs begin at ...= and =systemd[577]: Startup finished in ...=. On macOS, [[https://eclecticlight.co/2018/03/21/macos-unified-log-3-finding-your-way/][look for]]: ~=== system boot:~ and =Previous shutdown cause: 5=.
**** https://github.com/nferraz/st
**** Tips: There may be =min= in the boot time result.
#+begin_src bash
journalctl |
grep "systemd\[1\]: Startup finished" |
sed -E 's/.*= ((.*)min)?(.*)s\.$/\2\3/' |
awk 'NF==1; NF==2{print $1 * 60 + $2}' |
tail -10|
st --N --mean --median --max --transpose-output --delimiter=': '
#+end_src
*** DONE 5. Look for boot messages that are _not_ shared between your past three reboots (see =journalctl='s =-b= flag). Break this task down into multiple steps. First, find a way to get just the logs from the past three boots. There may be an applicable flag on the tool you use to extract the boot logs, or you can use =sed '0,/STRING/d'= to remove all lines previous to one that matches =STRING=. Next, remove any parts of the line that _always_ varies (like the timestamp). Then, de-duplicate the input lines and keep a count of each one (=uniq= is your friend). And finally, eliminate any line whose count is 3 (since it _was_ shared among all the boots).
:LOGBOOK:
CLOCK: [2023-02-12 Sun 06:55:01]--[2023-02-12 Sun 08:46:46] =>  01:51:45
:END:
**** Use =xargs= to get the past three boots.
#+begin_src bash
echo "2\n1\n0" |
xargs -I {} sh -c "journalctl -b -{} -r  | sed -E '0,/.*systemd\[1\]: Startup finished.*/d'" |
sed -E 's/.*[0-9]{2}:[0-9]{2}:[0-9]{2} (.*)/\1/' |
sort |
uniq -c |
awk '$1 != 3 {print $0}'
#+end_src
*** 6. Find an online data set like [[https://stats.wikimedia.org/EN/TablesWikipediaZZ.htm][this one]], [[https://ucr.fbi.gov/crime-in-the-u.s/2016/crime-in-the-u.s.-2016/topic-pages/tables/table-1][this one]], or maybe one [[https://www.springboard.com/blog/free-public-data-sets-data-science-project/][from here]]. Fetch it using =curl= and extract out just two columns of numerical data. If you're fetching HTML data, [[https://github.com/EricChiang/pup][~pup~]] might be helpful. For JSON data, try [[https://stedolan.github.io/jq/][~jq~]]. Find the min and max of one column in a single command, and the difference of the sum of each column in another.
**** Use [[https://ucr.fbi.gov/crime-in-the-u.s/2016/crime-in-the-u.s.-2016/topic-pages/tables/table-1][FBI — Table 1]] data to extract and analyze the "Robbery rate" and "Burglary rate" two columns.
#+begin_src bash
curl -s https://ucr.fbi.gov/crime-in-the-u.s/2016/crime-in-the-u.s.-2016/topic-pages/tables/table-1 |
pup "table tbody tr td:nth-of-type(11), table tbody tr td:nth-of-type(17) text{}" |
sed -E '/^$/d' |
pr --columns=2 --separator=" " --omit-header |
awk 'NR == 1{max1=$1; max2=$2; min1=$1; min2=$2; sum1=$1; sum2=$2};
     NR > 1 {
       min1 = (min1 < $1) ? min1 : $1;
       max1 = (max1 < $1) ? $1 : max1;
       sum1 += $1
       min2 = (min2 < $2) ? min2 : $2;
       max2 = (max2 < $2) ? $2 : max2;
       sum2 += $2
     }
     END{
     printf "The min and max of robbery rate are %.1f and %.1f.\n", min1, max1;
     printf "The min and max of burglary rate are %.1f and %.1f\n", min2, max2;
     printf "The difference between the sum of robbery rate and the sum of burglary rate is %.1f.", sum2 - sum1
     }'
#+end_src
**
* Command-line Environment
:PROPERTIES:
:heading: 1
:ID: d7458d6d-ee5f-4ed9-9b00-5b2bc3d79318
:collapsed: true
:END:
** [[../assets/Command-line_Environment_1676421320499_0.pdf][Command-line Environment.pdf]]
** Video
:PROPERTIES:
:heading: 2
:collapsed: true
:END:
*** {{video https://youtu.be/e8BO_dYxk5c}}
:PROPERTIES:
:END:
**** {{youtube-timestamp 107}} TOC
**** {{youtube-timestamp 162}} Job Control
***** {{youtube-timestamp 465}}  =C+\= will send =SIGQUIT=
***** {{youtube-timestamp 568}} =C+z= suspended
***** {{youtube-timestamp 662}} =jobs= =bg= =kill= =nohup=
**** {{youtube-timestamp 920}} Terminal Multiplxes
***** {{youtube-timestamp 973}} tmux
**** {{youtube-timestamp 1540}} Dotfiles
***** {{youtube-timestamp 1580}} alias
***** {{youtube-timestamp 1922}}  =PS1=
**** {{youtube-timestamp 2525}} Remote Machine
***** {{youtube-timestamp 2645}} =ssh= 
:PROPERTIES:
:id: 63f9b795-4b5a-4a95-bb31-12fa40c74f2c
:END:
***** {{youtube-timestamp 2941}} =ssh-copy-id=
***** {{youtube-timestamp 2949}}  =scp=
***** {{youtube-timestamp 3007}} =rsync=
***** {{youtube-timestamp 3064}} ssh config
*****
** ((63fd9455-f1d8-457b-88a7-dec4db10888f))
:PROPERTIES:
:heading: 2
:ID: bf78031d-b72c-4397-9700-2a58bb816c85
:collapsed: true
:END:
*** ((63fd9b85-8722-427f-9e16-57f100566dcb))
:PROPERTIES:
:heading: 3
:END:
**** ((63fd9bb0-f641-4c7f-bffb-6bd11bbe3db8))
**** When typing =Ctrl-C= this prompts the shell to deliver a =SIGINT= signal to the process.
**** The =SIGQUIT= signal will be delivered, by typing =Ctrl-\=
**** While =SIGINT= and =SIGQUIT= are both usually [[blue#]]^^associated with terminal related requests^^.
***** A more generic signal for [[hl-1#]]^^asking a process to exit gracefully^^ is the =SIGTERM= signal.
***** To send this signal we can use the [[https://www.man7.org/linux/man-pages/man1/kill.1.html][kill]] command, with the syntax =kill -TERM <PID>=.
*** ((63fd9e5f-d85b-4c09-ace3-974ca2eae296))
:PROPERTIES:
:heading: 3
:END:
**** =SIGSTOP= [[green#]]^^pauses a process^^.
**** In the terminal, typing =Ctrl-Z= will prompt the shell to send a =SIGTSTP= signal, short for [[red#]]^^Terminal Stop^^ (i.e. the terminal's version of =SIGSTOP=).
**** We can then [[hl-2#]]^^continue the paused job^^ [[hl-3#]]^^in the foreground^^ or [[hl-4#]]^^in the background^^ using [[https://www.man7.org/linux/man-pages/man1/fg.1p.html][fg]] or [[http://man7.org/linux/man-pages/man1/bg.1p.html][bg]], respectively.
**** The [[https://www.man7.org/linux/man-pages/man1/jobs.1p.html][jobs]] command [[hl-5#]]^^lists the unfinished jobs^^ [[blue#]]^^associated with the current terminal session^^.
***** To [[green#]]^^refer to the last backgrounded job^^ you can use the =$!= special parameter.
**** =&= [[red#]]^^suffix in a command^^ will [[blue#]]^^run the command in the background^^
**** If you [[hl-1#]]^^close the terminal^^, this will send yet another signal, =SIGHUP=
***** [[hl-2#]]^^To prevent that from happening^^ you can run the program with [[https://www.man7.org/linux/man-pages/man1/nohup.1.html][nohup]] (a wrapper to ignore =SIGHUP=), or use =disown= if the process has already been started
**** Below is a sample session to showcase some of these concepts.
#+begin_src sh
$ sleep 1000
^Z
[1]  + 18653 suspended  sleep 1000

$ nohup sleep 2000 &
[2] 18745
appending output to nohup.out

$ jobs
[1]  + suspended  sleep 1000
[2]  - running    nohup sleep 2000

$ bg %1
[1]  - 18653 continued  sleep 1000

$ jobs
[1]  - running    sleep 1000
[2]  + running    nohup sleep 2000

$ kill -STOP %1
[1]  + 18653 suspended (signal)  sleep 1000

$ jobs
[1]  + suspended (signal)  sleep 1000
[2]  - running    nohup sleep 2000

$ kill -SIGHUP %1
[1]  + 18653 hangup     sleep 1000

$ jobs
[2]  + running    nohup sleep 2000

$ kill -SIGHUP %2

$ jobs
[2]  + running    nohup sleep 2000

$ kill %2
[2]  + 18745 terminated  nohup sleep 2000

$ jobs
#+end_src

A special signal is =SIGKILL= since [[hl-1#]]^^it cannot be captured by the process^^ and [[hl-2#]]^^it will always terminate it immediately^^. However, it can have bad side effects such as leaving orphaned children processe
** ((63fda461-1fdd-4157-b96e-cffaf0e4b07f))
:PROPERTIES:
:heading: 2
:ID: b1db4d79-3a92-41d9-946e-96dae32f401c
:collapsed: true
:END:
*** The most popular terminal multiplexer these days is [[https://www.man7.org/linux/man-pages/man1/tmux.1.html][tmux]].
*** =tmux= has the following hierarchy of objects:
:PROPERTIES:
:END:
**** *Sessions* - a session is an independent workspace with one or more windows
***** =tmux= starts a new session.
***** =tmux new -s NAME= starts it with that name.
***** =tmux ls= lists the current sessions
***** Within =tmux= typing =<C-b> d= detaches the current session
***** =tmux a= attaches the last session. You can use =-t= flag to specify which
**** *Windows* - Equivalent to tabs in editors or browsers, they are visually separate parts of the same session
:PROPERTIES:
:END:
***** =<C-b> c= Creates a new window. To close it you can just terminate the shells doing =<C-d>=
***** =<C-b> N= Go to the /N/ th window. Note they are numbered. [[blue#]]^^/N/ is a number^^
***** =<C-b> p= Goes to the previous window
***** =<C-b> n= Goes to the next window
***** =<C-b> ,= Rename the current window
***** =<C-b> w= List current windows
**** *Panes* - Like vim splits, panes let you have multiple shells in the same visual display.
***** =<C-b> "= Split the current pane horizontally
***** =<C-b> %= Split the current pane vertically
***** =<C-b> <direction>= Move to the pane in the specified /direction/. Direction here means arrow keys.
***** =<C-b> z= Toggle zoom for the current pane
***** =<C-b> [= Start scrollback. You can then press =<space>= to start a selection and =<enter>= to copy that selection.
****** [[https://dev.to/iggredible/the-easy-way-to-copy-text-in-tmux-319g][The Easy Way to Copy Text in Tmux - DEV Community]]
***** =<C-b> <space>= Cycle through pane arrangements.
** ((63fdac08-a897-430c-8525-2f4a767a9da3))
:PROPERTIES:
:heading: 2
:ID: 8e9963e7-6065-47c1-8743-28d55290c47d
:collapsed: true
:END:
*** Most shells support /aliasing/. [[red#]]^^A shell alias^^ is [[blue#]]^^a short form for another command^^ that your [[green#]]^^shell will replace automatically for you^^. For instance.
**** An alias in bash has the following structure:
#+begin_src sh
alias alias_name="command_to_alias arg1 arg2"
#+end_src
**** Note that there is [[hl-1#]]^^no space around the equal sign^^ ~=~, because [[https://www.man7.org/linux/man-pages/man1/alias.1p.html][alias]] [[hl-2#]]^^is a shell command^^ that [[hl-3#]]^^takes a single argument^^.
*** Aliases have many convenient features:
#+begin_src sh
# Make shorthands for common flags
alias ll="ls -lh"

# Save a lot of typing for common commands
alias gs="git status"
alias gc="git commit"
alias v="vim"

# Save you from mistyping
alias sl=ls

# Overwrite existing commands for better defaults
alias mv="mv -i"           # -i prompts before overwrite
alias mkdir="mkdir -p"     # -p make parent dirs as needed
alias df="df -h"           # -h prints human readable format

# Alias can be composed
alias la="ls -A"
alias lla="la -l"

# To ignore an alias run it prepended with \
\ls
# Or disable an alias altogether with unalias
unalias la

# To get an alias definition just call it with alias
alias ll
# Will print ll='ls -lh'
#+end_src
** ((63fdae3e-7a11-4b30-a0a9-edf6845a9537))
:PROPERTIES:
:heading: 2
:ID: 85aafa42-c55a-417a-a756-7eaef6081158
:collapsed: true
:END:
*** [[hl-4#]]^^Many programs are configured^^ [[hl-3#]]^^using plain-text files^^ known as /dotfiles/ (because the file names begin with a =.=
*** Some examples of tools that can be configured through dotfiles are:
- =bash= - =~/.bashrc=, =~/.bash_profile=
- =git= - =~/.gitconfig=
- =vim= - =~/.vimrc= and the =~/.vim= folder
- =ssh= - =~/.ssh/config=
- =tmux= - =~/.tmux.conf=
*** [[red#]]^^The dotfiles^^ [[hl-2#]]^^should be in their own folder^^, [[hl-1#]]^^under version control^^, and *symlinked* [[green#]]^^into place using a script^^. [[red#]]^^This has the benefits of^^:
- *Easy installation*: if you log in to a new machine, applying your customizations will only take a minute.
- *Portability*: your tools will work the same way everywhere.
- *Synchronization*: you can update your dotfiles anywhere and keep them all in sync.
- *Change tracking*: you're probably going to be maintaining your dotfiles for your entire programming career, and version history is nice to have for long-lived projects.
*** DONE [[https://dotfiles.github.io/][Here]] is another good resource on the topic.
*** All of the class instructors have their dotfiles publicly accessible on GitHub: [[https://github.com/anishathalye/dotfiles][Anish]], [[https://github.com/jonhoo/configs][Jon]], [[https://github.com/jjgo/dotfiles][Jose]].
*** TODO [[https://blog.flowblok.id.au/2013-02/shell-startup-scripts.html][Shell startup scripts — flowblok’s blog]]
:PROPERTIES:
:id: 63ff4eb5-230a-40b8-a6f1-8444104dd58d
:END:
** ((63fdb279-fc3d-448d-a374-91239e023d48))
:PROPERTIES:
:heading: 2
:ID: da23a862-2330-40c0-a14b-5f53fec9facb
:collapsed: true
:END:
*** If the configuration file supports it, [[hl-1#]]^^use the equivalent of if-statements to^^ [[hl-2#]]^^apply machine specific customizations^^.
**** For example, your shell could have something like:
#+begin_src sh
if [[ "$(uname)" == "Linux" ]]; then {do_something}; fi

# Check before using shell-specific features
if [[ "$SHELL" == "zsh" ]]; then {do_something}; fi

# You can also make it machine-specific
if [[ "$(hostname)" == "myServer" ]]; then {do_something}; fi
#+end_src
*** If the configuration file supports it, [[hl-3#]]^^make use of includes^^.
**** For example, a =~/.gitconfig= can have a setting:
#+begin_src highlight
[include]
    path = ~/.gitconfig_local
#+end_src
**** And then on each machine, =~/.gitconfig_local= can [[hl-4#]]^^contain machine-specific settings^^.
**** You could even [[red#]]^^track these in a separate repository^^ [[green#]]^^for machine-specific settings^^.
*** 🌟 This idea is also useful if you want [[red#]]^^different programs to share some configurations^^.
**** For instance, if you want both =bash= and =zsh= to share the same set of aliases you can write them under =.aliases= and have the following block in both:
#+begin_src sh
# Test if ~/.aliases exists and source it
if [ -f ~/.aliases ]; then
    source ~/.aliases
fi
#+end_src
** ((63fdb5cc-8dbb-4b73-88aa-8136a1d6e1a8))
:PROPERTIES:
:heading: 2
:ID: 64028d44-89ca-49bd-9453-8000f11bc874
:collapsed: true
:END:
*** If you need to use remote servers in order to deploy backend software or you need a server with higher computational capabilities, you will end up using a [[red#]]^^Secure Shell (SSH)^^.
*** To =ssh= into a server you execute a command as follows
#+begin_src sh
ssh foo@bar.mit.edu
#+end_src
*** Here we are trying to ssh as [[red#]]^^user^^ =foo= in [[blue#]]^^server^^ =bar.mit.edu=. The server can be [[hl-1#]]^^specified with a URL^^ (like =bar.mit.edu=) or [[hl-2#]]^^an IP^^ (something like =foobar@192.168.1.42=).
*** ((63fdc604-05f9-413a-8f12-9218e9cb2dbd))
:PROPERTIES:
:heading: 3
:ID: cc87c8bc-d54a-4618-85fa-ebdf0bb60303
:END:
**** =ssh= has the ability to [[red#]]^^run commands directly^^.
**** =ssh foobar@server ls= will execute =ls= [[blue#]]^^in the home folder^^ [[green#]]^^of foobar^^.
***** [[hl-1#]]^^It works with pipes^^
****** =ssh foobar@server ls | grep PATTERN= will grep locally the remote output of =ls=
****** =ls | ssh foobar@server grep PATTERN= will grep remotely the local output of =ls=
*** ((63fdc7bb-db5a-4864-ac77-bbaae78b5a54))
:PROPERTIES:
:heading: 3
:ID: 82f29daa-7673-4e88-9b6c-278c23448319
:collapsed: true
:END:
**** ((63fdc818-3dec-4e2d-a533-f5bf7bca5f2d))
:PROPERTIES:
:heading: 4
:END:
***** To generate a pair you can run [[https://www.man7.org/linux/man-pages/man1/ssh-keygen.1.html][ssh-keygen]].
#+begin_src highlight
ssh-keygen -o -a 100 -t ed25519 -f ~/.ssh/id_ed25519
#+end_src
***** 🌟 You [[red#]]^^should choose a passphrase^^, to [[hl-5#]]^^avoid someone who gets hold of your private key to access authorized servers^^.
***** 🌟 Use [[https://www.man7.org/linux/man-pages/man1/ssh-agent.1.html][ssh-agent]] or [[https://linux.die.net/man/1/gpg-agent][gpg-agent]] so you do not have to type your passphrase every time.
***** To [[hl-4#]]^^check if you have a passphrase and validate it^^ you can run =ssh-keygen -y -f /path/to/key=.
**** ((63fdca86-194a-4ce3-9c0b-50b30b234970))
:PROPERTIES:
:heading: 4
:END:
***** =ssh= will look into =~/.ssh/authorized_keys= to [[hl-5#]]^^determine which clients it should let in^^.
***** [[red#]]^^To copy a public key^^ over you can use:
#+begin_src sh
cat .ssh/id_ed25519.pub | ssh foobar@remote 'cat >> ~/.ssh/authorized_keys'
#+end_src
***** [[blue#]]^^A simpler solution^^ can be achieved with =ssh-copy-id= where available:
#+begin_src sh
ssh-copy-id -i .ssh/id_ed25519 foobar@remote
#+end_src
*** ((63fdcc9e-2e38-46eb-9bd4-c97013945469))
:PROPERTIES:
:heading: 3
:ID: 89d3e4b2-0cc3-4a8d-8125-bf239d6a8020
:collapsed: true
:END:
**** There are many ways to copy files over ssh:
- =ssh+tee=, the simplest is to use =ssh= command execution and STDIN input by doing =cat localfile | ssh remote_server tee serverfile=. Recall that [[https://www.man7.org/linux/man-pages/man1/tee.1.html][tee]] [[hl-1#]]^^writes the output from STDIN into a file^^.
- [[https://www.man7.org/linux/man-pages/man1/scp.1.html][scp]] when [[hl-2#]]^^copying large amounts of files/directories^^, the secure copy =scp= command is more convenient since it [[hl-3#]]^^can easily recurse over paths^^. The syntax is =scp path/to/local_file remote_host:path/to/remote_file=
- [[https://www.man7.org/linux/man-pages/man1/rsync.1.html][rsync]] [[red#]]^^improves upon^^ =scp= by [[hl-4#]]^^detecting identical files in local and remote^^, and [[hl-5#]]^^preventing copying them again^^. It also provides [[blue#]]^^more fine grained control over symlinks, permissions and has extra features^^ like the =--partial= flag that can resume from a previously interrupted copy. =rsync= has a similar syntax to =scp=.
*** ((63fdce25-f5a3-4211-955e-5468a352167a))
:PROPERTIES:
:heading: 3
:ID: b448fd50-41e0-453c-9d1b-adcaaaa5548f
:collapsed: true
:END:
**** what do you do with [[hl-1#]]^^a remote server that^^ [[hl-2#]]^^does not have its ports directly available through the network/internet^^?.
**** This is called /port forwarding/ and it comes in [[hl-3#]]^^two flavors^^:
***** [[hl-4#]]^^Local Port Forwarding^^ and [[blue#]]^^Remote Port Forwarding^^ (see the pictures for more details, credit of the pictures from [[https://unix.stackexchange.com/questions/115897/whats-ssh-port-forwarding-and-whats-the-difference-between-ssh-local-and-remot][this StackOverflow post]]).
**** ((63fdd3f1-bd1c-44b2-b89b-6172dd17da22)) (/The remote host/ is the medium, /your host/ ask for service.)
:PROPERTIES:
:heading: 4
:END:
***** [[red#]]^^Please note that the colors in the diagram correspond to the colors of the parameters.^^
***** ((63fdd4c3-4d52-4090-86a4-07c802aefe12))
**** ((63fdd4cb-f16e-4227-b747-de22b20c63a1)) (/Your host/ is the medium, /the remote host/ ask for service.)
:PROPERTIES:
:heading: 4
:END:
***** ((63fdd4de-9916-4668-85a4-b298bd195919))
**** For example, if we execute =jupyter notebook= in the remote server that listens to the port =8888=.
***** Thus, to forward that to the local port =9999=
****** We would do =ssh -L 9999:localhost:8888 foobar@remote_server= in our local machine.
****** We can also do =ssh -R 9999:localhost:8888 foobar@local_server= in the remote sever.
***** And then navigate to =locahost:9999= in our local machine.
*** ((63fe93a9-e4e8-47f7-b04b-0a411ec05c5c))
:PROPERTIES:
:heading: 3
:ID: c49256d2-ec99-4de5-8c83-2bb0feaccdcf
:END:
**** [[red#]]^^Create aliases for ssh^^ using =~/.ssh/config=.
#+begin_src highlight
Host vm
    User foobar
    HostName 172.16.174.141
    Port 2222
    IdentityFile ~/.ssh/id_ed25519
    LocalForward 9999 localhost:8888

# Configs can also take wildcards
Host *.mit.edu
    User foobaz
#+end_src
**** An advantage of using the =~/.ssh/config= file over aliases is that other programs like =scp=, =rsync=, =mosh=, &c are able to read it as well and [[hl-5#]]^^convert the settings into the corresponding flags^^.
**** [[red#]]^^Be thoughtful about sharing your SSH configuration.^^
**** [[blue#]]^^Server side configuration^^ is usually specified in =/etc/ssh/sshd_config=.
***** Here you can make changes like [[hl-4#]]^^disabling password authentication^^, [[hl-3#]]^^changing ssh ports^^, [[hl-2#]]^^enabling X11 forwarding^^, &c.
** ((63fea572-0188-45e0-8d0b-3d6db21fe8b4))
:PROPERTIES:
:heading: 2
:ID: 8cfe6399-9d0a-43b6-9309-2a6981c35e34
:END:
*** There are many many terminal emulators out there (here is a [[https://anarc.at/blog/2018-04-12-terminal-emulators-1/][comparison]])
*** [[hl-5#]]^^Some of the aspects that you may want to modify^^ in your terminal include:
- Font choice
- Color Scheme
- Keyboard shortcuts
- Tab/Pane support
- Scrollback configuration
- Performance (some newer terminals like [[https://github.com/jwilm/alacritty][Alacritty]] or [[https://sw.kovidgoyal.net/kitty/][kitty]] offer GPU acceleration).
** ((63fea96c-52cc-472f-bdee-9e89500d641d))
:PROPERTIES:
:heading: 2
:ID: 6b6bccd6-43d1-4fa4-99bf-d33d63082aff
:collapsed: true
:END:
*** ((63fea96f-54d3-4e82-be36-d87f9d4e52da))
:PROPERTIES:
:heading: 3
:ID: 617cd3e5-8ce2-4ed3-9227-72a754147e17
:collapsed: true
:END:
**** From what we have seen, we can use some =ps aux | grep= commands to get our jobs' pids and then kill them, but there are better ways to do it. Start a =sleep 10000= job in a terminal, background it with =Ctrl-Z= and continue its execution with =bg=. Now use [[https://www.man7.org/linux/man-pages/man1/pgrep.1.html][pgrep]] [[red#]]^^to find its pid^^ and [[http://man7.org/linux/man-pages/man1/pgrep.1.html][pkill]] [[red#]]^^to kill it^^ [[blue#]]^^without ever typing the pid itself^^. (Hint: use the =-af= flags).
***** Result
#+begin_src sh
pgrep -af "sleep 10000"
pkill -f "sleep 10000"
#+end_src
**** Say you don't want to start a process until another completes. How would you go about it? In this exercise, our limiting process will always be =sleep 60 &=. One way to achieve this is to use the [[https://www.man7.org/linux/man-pages/man1/wait.1p.html][wait]] command. Try launching the sleep command and having an =ls= wait until the background process finishes.
:PROPERTIES:
:END:
However, this strategy will fail if we start in a different bash session, since =wait= [[hl-1#]]^^only works for child processes^^. One feature we did not discuss in the notes is that the =kill= [[hl-2#]]^^command's exit status will be zero on success and nonzero otherwise^^. =kill -0= [[hl-3#]]^^does not send a signal but will give a nonzero exit status if the process does not exist^^. Write a bash function called =pidwait= that takes a pid and waits until the given process completes. You should use =sleep= to avoid wasting CPU unnecessarily.
***** Result
#+begin_src sh
pidwait () {
    while : ; do
        kill -0 $1 > /dev/null 2&>1
        if [[ $? != 0 ]]; then
            break
        fi
        sleep 1
    done
}
#+end_src
*** ((63ff0ad3-19e8-4323-be51-5053d4330ecf))
:PROPERTIES:
:heading: 3
:ID: cae8d7a3-30ca-462e-a7c6-29a2ac0fa875
:collapsed: true
:END:
**** Follow this =tmux= [[https://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/][tutorial]] and then learn how to do some basic customizations following [[https://www.hamvocke.com/blog/a-guide-to-customizing-your-tmux-conf/][these steps]].
*** ((63ff262a-7343-4184-bc0e-f0ad0138a09f))
:PROPERTIES:
:heading: 3
:ID: 575da71d-b649-4242-b21d-6a6d0a937076
:collapsed: true
:END:
**** Create an alias =dc= that resolves to =cd= for when you type it wrongly.
**** Run ~history | awk '{$1="";print substr($0,2)}' | sort | uniq -c | sort -n | tail -n 10~ to [[red#]]^^get your top 10 most used commands^^ and consider writing shorter aliases for them. Note: this works for Bash; if you're using ZSH, use =history 1= instead of just =history=.
*** ((63ff26f6-475b-4a30-8e88-d799347d6409))
:PROPERTIES:
:heading: 3
:ID: 2c901730-6659-43c3-b652-020f8eaefa0d
:collapsed: true
:END:
**** Go to =~/.ssh/= and check if you have a pair of SSH keys there. If not, generate them with =ssh-keygen -o -a 100 -t ed25519=. [[red#]]^^It is recommended that you use a password^^ and use =ssh-agent= , more info [[https://www.ssh.com/ssh/agent][here]].
**** Edit =.ssh/config= to have an entry as follows
:PROPERTIES:
:END:
***** #+begin_src highlight
 Host vm
     User username_goes_here
     HostName ip_goes_here
     IdentityFile ~/.ssh/id_ed25519
     LocalForward 9999 localhost:8888
#+end_src
**** Use =ssh-copy-id vm= to copy your ssh key to the server.
**** Start a webserver in your VM by executing =python -m http.server 8888=. Access the VM webserver by navigating to =http://localhost:9999= in your machine.
**** Edit your SSH server config by doing =sudo vim /etc/ssh/sshd_config= and disable password authentication by editing the value of =PasswordAuthentication=. Disable root login by editing the value of =PermitRootLogin=. Restart the =ssh= service with =sudo service sshd restart=. Try sshing in again.
**** (Challenge) Install [[https://mosh.org/][mosh]] in the VM and establish a connection. Then disconnect the network adapter of the server/VM. Can mosh properly recover from it?
**** (Challenge) Look into what the =-N= and =-f= flags do in =ssh= and [[red#]]^^figure out a command to achieve background port forwarding^^.
***** =ssh -NfL 9999:localhost:8888 vm=
* Version Control (Git)
:PROPERTIES:
:heading: 1
:ID: 295db1ad-2665-4ce1-93fb-f4864c6e0d74
:collapsed: true
:END:
** [[../assets/Version_Control_Git_1677723913041_0.pdf][Version Control Git.pdf]]
** Video
:PROPERTIES:
:heading: 2
:ID: 8baafbd6-37c8-4afd-8bda-1c99b0f7b196
:collapsed: true
:END:
*** {{video https://youtu.be/2sjqTHE0zok}}
**** {{youtube-timestamp 634}} Basic of git
**** {{youtube-timestamp 912}} Data structure of git
***** object and reference
**** {{youtube-timestamp 1598}} Demo
**** {{youtube-timestamp 3743}}  git remote
***** Can add a local directory
***
** ((64000a1c-e5e3-449d-a1df-fdce007b4699))
:PROPERTIES:
:heading: 2
:ID: f90dd869-8cfa-4668-a912-945cc3c22374
:collapsed: true
:END:
*** ((64000a82-d43f-4479-bdf8-f1ffab4b3352))
:PROPERTIES:
:heading: 3
:END:
**** Git [[red#]]^^models the history^^ of a collection of files and folders within some [[hl-1#]]^^top-level directory^^ [[hl-2#]]^^as a series of snapshots^^.
**** In [[hl-3#]]^^Git terminology^^, [[hl-4#]]^^a file is called a “blob”^^. [[green#]]^^A directory is called a “tree”^^. [[blue#]]^^A snapshot is the top-level tree that is being tracked^^.
***** For example, we might have a tree as follows:
#+begin_src sh
<root> (tree)
|
+- foo (tree)
|  |
|  + bar.txt (blob, contents = "hello world")
|
+- baz.txt (blob, contents = "git is wonderful")
#+end_src
*** ((64000be0-41b3-4e73-9b9c-ceaa6ec9bcba))
:PROPERTIES:
:heading: 3
:END:
**** In Git, a history is a directed [[$green]]^^acyclic^^ graph (DAG) of snapshots.
:PROPERTIES:
:id: 64008be4-6bfb-40e9-8731-68675ce877f2
:END:
**** [[red#]]^^Git calls these snapshots “commit”s^^. Visualizing a commit history might look something like this:
#+begin_src highlight :pf_style_display block :pf_style_visibility visible
o <-- o <-- o <-- o
            ^
             \
              --- o <-- o
#+end_src
***** [[green#]]^^The arrows point to the parent of each commit^^ (it's a “comes before” relation, not “comes after”).
**** [[blue#]]^^Commits in Git are immutable^^.
***** “Edits” to the commit history are actually [[hl-1#]]^^creating entirely new commits^^, and [[hl-2#]]^^references (see below) are updated to point to the new ones^^.
*** ((64000e0c-55aa-442a-b416-36308c027b5c))
:PROPERTIES:
:heading: 3
:END:
**** #+begin_src python
// a file is a bunch of bytes
type blob = array<byte>

// a directory contains named files and directories
type tree = map<string, tree | blob>

// a commit has parents, metadata, and the top-level tree
type commit = struct {
    parents: array<commit>
    author: string
    message: string
    snapshot: tree
}
#+end_src
*** ((64004258-12d8-4a2f-bf78-4dad4624c757))
:PROPERTIES:
:heading: 3
:END:
**** [[hl-5#]]^^An “object” is a blob, tree, or commit^^:
#+begin_src highlight :pf_style_display block :pf_style_visibility visible
type object = blob | tree | commit
#+end_src
**** In Git data store, [[hl-4#]]^^all objects are content-addressed by their^^ [[https://en.wikipedia.org/wiki/SHA-1][SHA-1 hash]].

#+begin_src highlight :pf_style_display block :pf_style_visibility visible
objects = map<string, object>

def store(object):
    id = sha1(object)
    objects[id] = object

def load(id):
    return objects[id]
#+end_src
*** ((64004378-010d-40a6-84dd-62725ec425d1))
:PROPERTIES:
:heading: 3
:END:
**** [[hl-4#]]^^References are pointers to commits^^.
**** Unlike objects, which are immutable, [[hl-3#]]^^references are mutable^^ (can be updated to point to a new commit). 

#+begin_src python
references = map<string, string>

def update_reference(name, id):
    references[name] = id

def read_reference(name):
    return references[name]

def load_reference(name_or_id):
    if name_or_id in references:
        return load(references[name_or_id])
    else:
        return load(name_or_id)
#+end_src
**** With this, Git can use [[blue#]]^^human-readable names^^ like “master” to [[green#]]^^refer to a particular snapshot in the history^^, instead of a long hexadecimal string.
***** The =master= reference usually [[green#]]^^points to the latest commit^^ in the main branch of development.
***** In Git, that “[[blue#]]^^where we currently are^^” is a special reference called “[[green#]]^^HEAD^^”.
*** ((6400452d-0846-4078-aa1c-3106db80332a)) 
:PROPERTIES:
:heading: 3
:END:
**** Git /repository/ is the data =objects= and =references=.
**** On disk, [[red#]]^^all Git stores are objects and references^^: that's all there is to Git's data model.
**** All =git= commands [[blue#]]^^map to some manipulation of the commit DAG^^ [[hl-5#]]^^by adding objects and adding/updating references^^.
*** ((6400479e-9d18-49e4-8ae2-ff9bc9c659b1))
:PROPERTIES:
:heading: 3
:END:
**** Staging area is another concept that's [[$green]]^^orthogonal^^ to the data model, but it's a part of the interface to create commits.
:PROPERTIES:
:id: 64008be4-74e5-49c7-a142-7922895a7088
:END:
**** Git allows you to [[hl-1#]]^^specify which modifications should be included in the next snapshot^^ [[hl-2#]]^^through a mechanism called the “staging area”^^.
** ((640048a7-a415-4452-8004-b506cf7de062))
:PROPERTIES:
:heading: 2
:ID: 97d4c962-a9d2-4599-b73b-9e8fefa5921d
:END:
*** ((640048fa-2e8f-4e00-832b-100152abee05))
:PROPERTIES:
:heading: 3
:END:
**** =git help <command>=: get help for a git command
**** =git init=: creates a new git repo, with data stored in the =.git= directory
**** =git status=: tells you what's going on
**** =git add <filename>=: adds files to staging area
**** =git commit=: creates a new commit
***** Write [[https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html][good commit messages]]!
***** TODO Even more reasons to write [[https://chris.beams.io/posts/git-commit/][good commit messages]]!
:PROPERTIES:
:id: 64008be4-2dde-4073-bc30-406ef6eea4a5
:END:
**** =git log=: shows a flattened log of history
**** =git log --all --graph --decorate=: visualizes history as a DAG
**** =git diff <filename>=: show changes you made relative to the staging area
**** =git diff <revision> <filename>=: shows differences in a file between snapshots
**** =git checkout <revision>=: updates HEAD and current branch
*** ((64004903-b679-407d-824e-d7e1f3770498))
:PROPERTIES:
:heading: 3
:END:
**** =git branch=: shows branches
**** =git branch <name>=: creates a branch
**** =git checkout -b <name>=: creates a branch and switches to it
***** same as =git branch <name>; git checkout <name>=
**** =git merge <revision>=: merges into current branch
**** =git mergetool=: use a fancy tool to help resolve merge conflicts
**** =git rebase=: rebase set of patches onto a new base
*** ((64004906-13ea-4537-8ab9-94ac5d5d83c3))
:PROPERTIES:
:heading: 3
:END:
**** =git remote=: list remotes
**** =git remote add <name> <url>=: add a remote
**** =git push <remote> <local branch>:<remote branch>=: send objects to remote, and update remote reference
**** ~git branch --set-upstream-to=<remote>/<remote branch>~: set up correspondence between local and remote branch
**** =git fetch=: retrieve objects/references from a remote
**** =git pull=: same as =git fetch; git merge=
**** =git clone=: download repository from remote
*** ((64004908-cea3-4ed6-9095-aef3ac027351))
:PROPERTIES:
:heading: 3
:END:
**** =git commit --amend=: edit a commit's contents/message
**** =git reset HEAD <file>=: unstage a file
**** =git checkout -- <file>=: discard changes
*** ((6400490b-145f-45da-a1cc-0a8460d0bbde))
:PROPERTIES:
:heading: 3
:END:
**** =git config=: Git is [[https://git-scm.com/docs/git-config][highly customizable]]
**** ~git clone --depth=1~: shallow clone, without entire version history
**** =git add -p=: interactive staging
**** =git rebase -i=: interactive rebasing
**** =git blame=: show who last edited which line
**** =git stash=: temporarily remove modifications to working directory
**** =git bisect=: binary search history (e.g. for regressions)
**** =.gitignore=: [[https://git-scm.com/docs/gitignore][specify]] intentionally untracked files to ignore
** ((6400490e-c71e-4747-9268-63c85ef66301))
:PROPERTIES:
:heading: 2
:id: 641f8658-ecd8-4656-9735-fad4b3da9235
:collapsed: true
:END:
*** *GUIs*: there are many [[https://git-scm.com/downloads/guis][GUI clients]] out there for Git. [[red#]]^^We personally don't use them and use the command-line interface instead^^.
*** *Shell integration*: it's super handy to have a Git status as part of your shell prompt ([[https://github.com/olivierverdier/zsh-git-prompt][zsh]], [[https://github.com/magicmonty/bash-git-prompt][bash]]). Often included in frameworks like [[https://github.com/ohmyzsh/ohmyzsh][Oh My Zsh]].
*** *Editor integration*: similarly to the above, handy integrations with many features. [[https://github.com/tpope/vim-fugitive][fugitive.vim]] is the standard one for Vim.
*** TODO *Workflows*: we taught you the data model, plus some basic commands; we didn't tell you what practices to follow when working on big projects (and there are [[https://nvie.com/posts/a-successful-git-branching-model/][many]] [[https://www.endoflineblog.com/gitflow-considered-harmful][different]] [[https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow][approaches]]).
:PROPERTIES:
:id: 64008be4-ee85-4085-97ce-fc88eca78ba6
:END:
*** *GitHub*: Git is not GitHub. GitHub has a specific way of contributing code to other projects, called [[https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests][pull requests]].
*** *Other Git providers*: GitHub is not special: there are many Git repository hosts, like [[https://about.gitlab.com/][GitLab]] and [[https://bitbucket.org/][BitBucket]].
** ((64004917-1610-4285-90b9-7a49122ede0d))
:PROPERTIES:
:heading: 2
:id: 641f8658-2e59-465a-8bbb-07506e3f75d7
:collapsed: true
:END:
*** TODO [[https://git-scm.com/book/en/v2][Pro Git]] is *highly recommended reading*. [[red#]]^^Going through Chapters 1--5 should teach you most of what you need to use Git proficiently^^, now that you understand the data model. The later chapters have some interesting, advanced material.
*** TODO [[https://ohshitgit.com/][Oh Shit, Git!?!]] is a short guide on how to recover from some common Git mistakes.
*** TODO [[https://eagain.net/articles/git-for-computer-scientists/][Git for Computer Scientists]] is a short explanation of Git's data model, with less pseudocode and more fancy diagrams than these lecture notes.
*** TODO [[https://jwiegley.github.io/git-from-the-bottom-up/][Git from the Bottom Up]] is a detailed explanation of Git's implementation details beyond just the data model, for the curious.
*** TODO [[https://smusamashah.github.io/blog/2017/10/14/explain-git-in-simple-words][How to explain git in simple words]]
*** TODO [[https://learngitbranching.js.org/][Learn Git Branching]] is a browser-based game that teaches you Git.
** ((64005a3d-4130-4b64-875e-40bc98a1391e))
:PROPERTIES:
:heading: 2
:END:
*** If you don't have any past experience with Git, either try reading the first couple chapters of [[https://git-scm.com/book/en/v2][Pro Git]] or go through a tutorial like [[https://learngitbranching.js.org/][Learn Git Branching]]. As you're working through it, relate Git commands to the data model.
*** Clone the [[https://github.com/missing-semester/missing-semester][repository for the class website]].
**** Explore the version history by visualizing it as a graph.
**** Who was the last person to modify =README.md=? (Hint: use =git log= with an argument).
**** What was the commit message associated with the last modification to the =collections:= line of =_config.yml=? (Hint: use =git blame= and =git show=).
*** One common mistake when learning Git is to commit large files that should not be managed by Git or adding sensitive information. Try adding a file to a repository, making some commits and then deleting that file from history (you may want to look at [[https://help.github.com/articles/removing-sensitive-data-from-a-repository/][this]]).
*** Clone some repository from GitHub, and modify one of its existing files. What happens when you do =git stash=? What do you see when running =git log --all --oneline=? Run =git stash pop= to undo what you did with =git stash=. In what scenario might this be useful?
*** Like many command line tools, Git provides a configuration file (or dotfile) called =~/.gitconfig=. Create an alias in =~/.gitconfig= so that when you run =git graph=, you get the output of =git log --all --graph --decorate --oneline=. Information about git aliases can be found [[https://git-scm.com/docs/git-config#Documentation/git-config.txt-alias][here]].
*** You can define global ignore patterns in =~/.gitignore_global= after running =git config --global core.excludesfile ~/.gitignore_global=. Do this, and set up your global gitignore file to ignore OS-specific or editor-specific temporary files, like =.DS_Store=.
*** Fork the [[https://github.com/missing-semester/missing-semester][repository for the class website]], find a typo or some other improvement you can make, and submit a pull request on GitHub (you may want to look at [[https://github.com/firstcontributions/first-contributions][this]]).
* Debugging and [[$green]]^^Profiling^^
:PROPERTIES:
:heading: 1
:ID: 66227ac8-9f07-428e-aa39-a0892b41ccb6
:collapsed: true
:END:
** Video
:PROPERTIES:
:heading: 2
:ID: 6f74d25c-7b52-46ca-b27c-04c6985374bd
:collapsed: true
:END:
*** {{video https://youtu.be/l812pUnKxME}}
:PROPERTIES:
:END:
**** {{youtube-timestamp 268}} logger.py
**** {{youtube-timestamp 401}} color in terminal
**** {{youtube-timestamp 829}} Python debugger
**** {{youtube-timestamp 1244}} strace
**** {{youtube-timestamp 1382}} static analysis tools
**** {{youtube-timestamp 1687}} time
**** {{youtube-timestamp 2298}} memory
**** {{youtube-timestamp 2465}} perf
** Debugging
:PROPERTIES:
:heading: 2
:ID: 7fdda8e8-3900-4a08-95dc-25f8d7790e6d
:collapsed: true
:END:
*** Printf debugging and Logging
:PROPERTIES:
:heading: 3
:ID: e2c7367d-b32d-4a1f-8281-72144002eed9
:collapsed: true
:END:
**** “[[blue#]]^^The most effective debugging tool is still careful thought, coupled with judiciously placed print statements^^” --- Brian Kernighan, /Unix for Beginners/.
**** [[hl-1#]]^^A first approach to debug a program is to add print statements around where you have detected the problem^^, and [[hl-2#]]^^keep iterating until you have extracted enough information to understand what is responsible for the issue^^.
**** [[hl-3#]]^^A second approach is to use logging in your program^^, instead of ad hoc print statements.
**** [[hl-4#]]^^Logging is better than regular print statements^^ for several reasons:
***** [[hl-5#]]^^You can log to files, sockets or even remote servers^^ instead of standard output.
***** [[hl-1#]]^^Logging supports severity levels^^ (such as INFO, DEBUG, WARN, ERROR, &c), that allow you to filter the output accordingly.
***** For new issues, there's a fair chance that your logs will contain enough information to detect what is going wrong.
**** [[https://missing.csail.mit.edu/static/files/logger.py][Here]] is an example code that logs messages:
***** logger.py
****** <!-- src -->
#+begin_src python
import logging
import sys

class CustomFormatter(logging.Formatter):
    """Logging Formatter to add colors and count warning / errors"""

    grey = "\x1b[38;21m"
    yellow = "\x1b[33;21m"
    red = "\x1b[31;21m"
    bold_red = "\x1b[31;1m"
    reset = "\x1b[0m"
    format = "%(asctime)s - %(name)s - %(levelname)s - %(message)s (%(filename)s:%(lineno)d)"

    FORMATS = {
        logging.DEBUG: grey + format + reset,
        logging.INFO: grey + format + reset,
        logging.WARNING: yellow + format + reset,
        logging.ERROR: red + format + reset,
        logging.CRITICAL: bold_red + format + reset
    }

    def format(self, record):
        log_fmt = self.FORMATS.get(record.levelno)
        formatter = logging.Formatter(log_fmt)
        return formatter.format(record)

# create logger with 'spam_application'
logger = logging.getLogger("Sample")

# create console handler with a higher log level
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)

if len(sys.argv)> 1:
    if sys.argv[1] == 'log':
        ch.setFormatter(logging.Formatter('%(asctime)s : %(levelname)s : %(name)s : %(message)s'))
    elif sys.argv[1] == 'color':
        ch.setFormatter(CustomFormatter())

if len(sys.argv) > 2:
    logger.setLevel(logging.__getattribute__(sys.argv[2]))
else:
    logger.setLevel(logging.DEBUG)

logger.addHandler(ch)

# logger.debug("debug message")
# logger.info("info message")
# logger.warning("warning message")
# logger.error("error message")
# logger.critical("critical message")

import random
import time
for _ in range(100):
    i = random.randint(0, 10)
    if i <= 4:
        logger.info("Value is {} - Everything is fine".format(i))
    elif i <= 6:
        logger.warning("Value is {} - System is getting hot".format(i))
    elif i <= 8:
        logger.error("Value is {} - Dangerous region".format(i))
    else:
        logger.critical("Maximum value reached")
    time.sleep(0.3)
#+end_src
***** <!-- src -->
#+begin_src highlight
$ python logger.py
# Raw output as with just prints
$ python logger.py log
# Log formatted output
$ python logger.py log ERROR
# Print only ERROR levels and above
$ python logger.py color
# Color formatted output
#+end_src
**** One of my favorite tips for [[red#]]^^making logs more readable^^ is to [[blue#]]^^color code them^^.
***** By now you probably have realized that [[hl-5#]]^^your terminal uses colors to make things more readable^^. But how does it do it?
***** Programs like =ls= or =grep= are using [[https://en.wikipedia.org/wiki/ANSI_escape_code][ANSI escape codes]], [[hl-2#]]^^which are special sequences of characters to indicate your shell to change the color of the output^^.
****** For example, executing =echo -e "\e[38;2;255;0;0mThis is red\e[0m"= prints the message =This is red= in red on your terminal
***** As long as it supports [[https://github.com/termstandard/colors#truecolor-support-in-output-devices][true color]]. If your terminal doesn't support this (e.g. macOS's Terminal.app), you can use the more universally supported escape codes for 16 color choices, for example =echo -e "\e[31;1mThis is red\e[0m"=.
***** The following script shows [[blue#]]^^how to print many RGB colors into your terminal^^ (again, as long as it supports true color).
****** #+begin_src highlight
#!/usr/bin/env bash
for R in $(seq 0 20 255); do
    for G in $(seq 0 20 255); do
        for B in $(seq 0 20 255); do
            printf "\e[38;2;${R};${G};${B}m█\e[0m";
        done
    done
done
#+end_src
*** Third party logs
:PROPERTIES:
:heading: 3
:ID: 66468a5d-141f-4b6b-ad14-0b1819906953
:collapsed: true
:END:
**** As you start building [[red#]]^^larger software systems^^ you will most probably run into dependencies that run as separate programs. Web servers, databases or message brokers are common examples of this kind of dependencies. [[hl-2#]]^^When interacting with these systems^^ [[hl-3#]]^^it is often necessary to read their logs^^, since client side error messages might not suffice.
**** Luckily, [[blue#]]^^most programs write their own logs somewhere in your system^^.
**** In UNIX systems, [[hl-4#]]^^it is commonplace for programs to write their logs under^^ =/var/log=.
***** For instance, the [[https://www.nginx.com/][NGINX]] webserver places its logs under =/var/log/nginx=.
**** More recently, systems have started using a *system log*, which is increasingly where all of your log messages go.
**** Most (but not all) Linux systems use =systemd=, [[hl-5#]]^^a system daemon that controls many things in your system such as which services are enabled and running^^.
***** =systemd= [[green#]]^^places the logs under^^ =/var/log/journal= [[green#]]^^in a specialized format^^ and you can use the [[https://www.man7.org/linux/man-pages/man1/journalctl.1.html][journalctl]] command to display the messages.
***** Similarly, on macOS there is still =/var/log/system.log= but an increasing number of tools use the system log, that can be displayed with [[https://www.manpagez.com/man/1/log/][log show]].
***** On most UNIX systems you can also use the [[https://www.man7.org/linux/man-pages/man1/dmesg.1.html][dmesg]] command to [[hl-1#]]^^access the kernel log^^.
**** For logging under the system logs you can use the [[https://www.man7.org/linux/man-pages/man1/logger.1.html][logger]] [[blue#]]^^shell program^^.
***** Here's an example of using =logger= and how to check that the entry made it to the system logs.
***** Moreover, [[red#]]^^most programming languages have bindings logging to the system log^^.
***** #+begin_src highlight
logger "Hello Logs"
# On macOS
log show --last 1m | grep Hello
# On Linux
journalctl --since "1m ago" | grep Hello
#+end_src
**** As we saw in the data wrangling lecture, [[hl-2#]]^^logs can be quite verbose^^ [[hl-3#]]^^and they require some level of processing and filtering to get the information you want^^.
***** If you find yourself heavily filtering through =journalctl= and =log show= you can consider using their flags, which can perform a first pass of filtering of their output.
***** There are also some tools like [[http://lnav.org/][lnav]], that provide an improved presentation and navigation for log files.
*** Debuggers
:PROPERTIES:
:heading: 3
:ID: b7982203-db2b-4748-9190-ea307a7ba6ed
:END:
**** [[blue#]]^^When printf debugging is not enough you should use a debugger^^.
**** Debuggers are programs that let you interact with the execution of a program, allowing the following:
***** Halt execution of the program when it reaches a certain line.
***** Step through the program one instruction at a time.
***** Inspect values of variables after the program crashed.
***** Conditionally halt the execution when a given condition is met.
***** And many more advanced features
**** [[green#]]^^Many programming languages come with some form of debugger^^. In Python this is the Python Debugger [[https://docs.python.org/3/library/pdb.html][pdb]].
***** Here is a brief description of some of the commands =pdb= supports:
****** *l*(ist) - Displays 11 lines around the current line or continue the previous listing.
****** *s*(tep) - Execute the current line, stop at the first possible occasion.
****** *n*(ext) - Continue execution until the next line in the current function is reached or it returns.
****** *b*(reak) - Set a breakpoint (depending on the argument provided).
****** *p*(rint) - Evaluate the expression in the current context and print its value. There's also *pp* to display using [[https://docs.python.org/3/library/pprint.html][pprint]] instead.
****** *r*(eturn) - Continue execution until the current function returns.
****** *q*(uit) - Quit the debugger.
**** Note that since Python is an interpreted language we can use the =pdb= shell to execute commands and to execute instructions.
**** [[https://pypi.org/project/ipdb/][ipdb]] is an improved =pdb= that uses the [[https://ipython.org/][IPython]] REPL enabling tab completion, syntax highlighting, better tracebacks, and better introspection while retaining the same interface as the =pdb= module.
**** Let's go through an example of using =pdb= to fix the following buggy python code. (See the lecture video).
***** <!-- src -->
#+begin_src python
def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(n):
            if arr[j] > arr[j+1]:
                arr[j] = arr[j+1]
                arr[j+1] = arr[j]
    return arr

print(bubble_sort([4, 2, 1, 8, 7, 6]))
#+end_src
***** =python -m ipdb bubble.py=
**** For more low level programming you will probably want to look into [[https://www.gnu.org/software/gdb/][gdb]] (and its quality of life modification [[https://github.com/pwndbg/pwndbg][pwndbg]]) and [[https://lldb.llvm.org/][lldb]].
***** They are optimized for [[hl-4#]]^^C-like language debugging^^ but will let you probe pretty much any process and get its current machine state: registers, stack, program counter, &c.
*** Specialized Tools
:PROPERTIES:
:heading: 3
:ID:       c6f6b748-b532-40bb-894b-0edfef837326
:end:
**** Even if what you are trying to debug is [[red#]]^^a black box binary^^ there are tools that can help you with that.
**** Whenever programs need to perform actions that only the kernel can, they use [[https://en.wikipedia.org/wiki/System_call][System Calls]]. There are commands that let you [[blue#]]^^trace the syscalls your program makes^^.
***** In Linux there's [[https://www.man7.org/linux/man-pages/man1/strace.1.html][strace]] and macOS and BSD have [[http://dtrace.org/blogs/about/][dtrace]]. =dtrace= can be tricky to use because it uses its own =D= language, but there is a wrapper called [[https://www.manpagez.com/man/1/dtruss/][dtruss]] that provides an interface more similar to =strace= (more details [[https://8thlight.com/blog/colin-jones/2015/11/06/dtrace-even-better-than-strace-for-osx.html][here]]).
**** Below are some examples of using =strace= or =dtruss= to show [[https://www.man7.org/linux/man-pages/man2/stat.2.html][stat]] syscall traces for an execution of =ls=. For a deeper dive into =strace=, [[https://blogs.oracle.com/linux/strace-the-sysadmins-microscope-v2][this article]] and [[https://jvns.ca/strace-zine-unfolded.pdf][this zine]] are good reads.
***** <!-- src -->
#+begin_src highlight
# On Linux
sudo strace -e read ls -l > /dev/null
4
# On macOS
sudo dtruss -t lstat64_extended ls -l > /dev/null
#+end_src
**** Under some circumstances, you may need to look at the network packets to figure out the issue in your program. Tools like [[https://www.man7.org/linux/man-pages/man1/tcpdump.1.html][tcpdump]] and [[https://www.wireshark.org/][Wireshark]] are [[red#]]^^network packet analyzers^^ [[blue#]]^^that let you read the contents of network packets and filter them based on different criteria^^.
**** For [[hl-1#]]^^web development^^, [[hl-2#]]^^the Chrome/Firefox developer tools^^ are quite handy. They feature a large number of tools, including:
***** Source code - Inspect the HTML/CSS/JS source code of any website.
***** Live HTML, CSS, JS modification - Change the website content, styles and behavior to test (you can see for yourself that website screenshots are not valid proofs).
***** Javascript shell - Execute commands in the JS REPL.
***** Network - Analyze the requests timeline.
***** Storage - Look into the Cookies and local application storage.
*** Static Analysis
:PROPERTIES:
:heading: 3
:ID:       7be21324-5966-475e-8dc7-3864ff8157b0
:end:
**** For some issues you do not need to run any code. For example, just by carefully looking at a piece of code you could realize that your loop variable is shadowing an already existing variable or function name; or that a program reads a variable before defining it.
**** Here is where [[https://en.wikipedia.org/wiki/Static_program_analysis][static analysis]] tools come into play. [[red#]]^^Static analysis programs take source code as input and analyze it using coding rules to reason about its correctness^^.
**** In the following Python snippet there are several mistakes. First, our loop variable =foo= shadows the previous definition of the function =foo=. We also wrote =baz= instead of =bar= in the last line, so the program will crash after completing the =sleep= call (which will take one minute).
***** <!-- src -->
#+begin_src highlight
import time

def foo():
    return 42

for foo in range(5):
    print(foo)
bar = 1
bar *= 0.2
time.sleep(60)
print(baz)
#+end_src
***** Static analysis tools can identify this kind of issues. When we run [[https://pypi.org/project/pyflakes][pyflakes]] on the code we get the errors related to both bugs. [[http://mypy-lang.org/][mypy]] is another tool that can detect type checking issues. Here, =mypy= will warn us that =bar= is initially an =int= and is then casted to a =float=. Again, note that [[blue#]]^^all these issues were detected without having to run the code^^.

#+begin_src highlight :hint_scrollable true
$ pyflakes foobar.py
foobar.py:6: redefinition of unused 'foo' from line 3
foobar.py:11: undefined name 'baz'

$ mypy foobar.py
foobar.py:6: error: Incompatible types in assignment (expression has type "int", variable has type "Callable[[], Any]")
foobar.py:9: error: Incompatible types in assignment (expression has type "float", variable has type "int")
foobar.py:11: error: Name 'baz' is not defined
Found 3 errors in 1 file (checked 1 source file)
#+end_src
**** In the shell tools lecture we covered [[https://www.shellcheck.net/][shellcheck]], which is a similar tool for shell scripts.
**** Most editors and IDEs support displaying the output of these tools within the editor itself, [[hl-1#]]^^highlighting the locations of warnings and errors^^. This is often called *code linting* and it [[hl-4#]]^^can also be used to display other types of issues such as stylistic violations or insecure constructs^^.
**** In vim, the plugins [[https://vimawesome.com/plugin/ale][ale]] or [[https://vimawesome.com/plugin/syntastic][syntastic]] will let you do that. For Python, [[https://github.com/PyCQA/pylint][pylint]] and [[https://pypi.org/project/pep8/][pep8]] are examples of [[blue#]]^^stylistic linters^^ and [[https://pypi.org/project/bandit/][bandit]] [[green#]]^^is a tool designed to find common security issues^^. For other languages people have compiled comprehensive lists of useful static analysis tools, such as [[https://github.com/mre/awesome-static-analysis][Awesome Static Analysis]] (you may want to take a look at the /Writing/ section) and for linters there is [[https://github.com/caramelomartins/awesome-linters][Awesome Linters]].
**** A complementary tool to stylistic linting are code formatters such as [[https://github.com/psf/black][black]] for Python, =gofmt= for Go, =rustfmt= for Rust or [[https://prettier.io/][prettier]] for JavaScript, HTML and CSS. These tools [[hl-2#]]^^autoformat your code so that it's consistent with common stylistic patterns for the given programming language^^. Although you might be unwilling to give stylistic control about your code, standardizing code format will help other people read your code and will make you better at reading other people's ([[hl-3#]]^^stylistically standardized^^) code.
** Profiling
:PROPERTIES:
:heading: 2
:ID: dc040b7b-5702-43ad-8a15-3d83b051f3a0
:END:
*** Even if your code functionally behaves as you would expect, that might not be good enough if it takes all your CPU or memory in the process.
:PROPERTIES:
:END:
**** Algorithms classes often teach big /O/ notation but not [[red#]]^^how to find hot spots in your programs^^. Since [[http://wiki.c2.com/?PrematureOptimization][premature optimization is the root of all evil]], you should learn about profilers and monitoring tools. They will help you understand [[hl-1#]]^^which parts of your program are taking most of the time and/or resources^^ so you can focus on optimizing those parts.
*** Timing
:PROPERTIES:
:heading: 3
:ID: ff880161-4f61-4dc1-80a1-b99b594fca30
:collapsed: true
:END:
**** Similarly to the debugging case, in many scenarios it can be enough to just print the time it took your code between two points. Here is an example in Python using the [[https://docs.python.org/3/library/time.html][time]] module.
***** <!-- src -->
#+begin_src python
import time, random
n = random.randint(1, 10) * 100

# Get current time
start = time.time()

# Do some work
print("Sleeping for {} ms".format(n))
time.sleep(n/1000)

# Compute time between start and now
print(time.time() - start)

# Output
# Sleeping for 500 ms
# 0.5713930130004883
#+end_src
**** However, [[red#]]^^wall clock time can be misleading^^ since your computer might be running other processes at the same time or waiting for events to happen.
***** It is common for tools to make a distinction between /Real/, /User/ and /Sys/ time.
****** /Real/
******* Wall clock elapsed time from start to finish of the program, [[blue#]]^^including the time taken by other processes and time taken while blocked^^ (e.g. waiting for I/O or network)
****** /User/
******* Amount of time spent in the CPU running user code
****** /Sys/
******* Amount of time spent in the CPU running kernel code
***** In general, /User/ + /Sys/ tells you [[red#]]^^how much time your process actually spent in the CPU^^ (more detailed explanation [[https://stackoverflow.com/questions/556405/what-do-real-user-and-sys-mean-in-the-output-of-time1][here]]).
**** For example, try running a command that performs an HTTP request and prefixing it with [[https://www.man7.org/linux/man-pages/man1/time.1.html][time]]. Under a slow connection you might get an output like the one below. Here it took over 2 seconds for the request to complete but the process only took 15ms of CPU user time and 12ms of kernel CPU time.

#+begin_src highlight
$ time curl https://missing.csail.mit.edu &> /dev/null
real    0m2.561s
user    0m0.015s
sys     0m0.012s
#+end_src
*** CPU
:PROPERTIES:
:heading: 3
:ID: 7bc872eb-aabb-41ad-a50b-5caee56fe1c0
:END:
**** Most of the time when people refer to /[[red#]]^^profilers^^/ they actually mean /[[blue#]]^^CPU profilers^^/, which are the most common.
**** There are [[hl-1#]]^^two main types of CPU profilers^^: /[[hl-2#]]^^tracing^^/ and /[[hl-3#]]^^sampling^^/ profilers.
***** [[green#]]^^Tracing profilers keep a record of every function call your program makes^^ whereas sampling [[blue#]]^^profilers probe your program periodically (commonly every millisecond) and record the program's stack^^.
***** They use these records to present aggregate statistics of what your program spent the most time doing. [[https://jvns.ca/blog/2017/12/17/how-do-ruby---python-profilers-work-][Here]] is a good intro article if you want more detail on this topic.
**** Most programming languages have some sort of command line profiler that you can use to analyze your code. They often integrate with full fledged IDEs but for this lecture we are going to focus on the command line tools themselves.
***** In Python we can use the =cProfile= module to [[blue#]]^^profile time per function call^^. Here is a simple example that implements a rudimentary grep in Python:
***** #+begin_src python
#!/usr/bin/env python

import sys, re

def grep(pattern, file):
    with open(file, 'r') as f:
        print(file)
        for i, line in enumerate(f.readlines()):
            pattern = re.compile(pattern)
            match = pattern.search(line)
            if match is not None:
                print("{}: {}".format(i, line), end="")

if __name__ == '__main__':
    times = int(sys.argv[1])
    pattern = sys.argv[2]
    for i in range(times):
        for file in sys.argv[3:]:
            grep(pattern, file)
#+end_src
***** We can profile this code using the following command. Analyzing the output we can see that [[blue#]]^^IO is taking most of the time and that compiling the regex takes a fair amount of time as well^^. [[green#]]^^Since the regex only needs to be compiled once, we can factor it out of the for^^.
***** #+begin_src python
$ python -m cProfile -s tottime grep.py 1000 '^(import|\s*def)[^,]*$' *.py

[omitted program output]

 ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     8000    0.266    0.000    0.292    0.000 {built-in method io.open}
     8000    0.153    0.000    0.894    0.000 grep.py:5(grep)
    17000    0.101    0.000    0.101    0.000 {built-in method builtins.print}
     8000    0.100    0.000    0.129    0.000 {method 'readlines' of '_io._IOBase' objects}
    93000    0.097    0.000    0.111    0.000 re.py:286(_compile)
    93000    0.069    0.000    0.069    0.000 {method 'search' of '_sre.SRE_Pattern' objects}
    93000    0.030    0.000    0.141    0.000 re.py:231(compile)
    17000    0.019    0.000    0.029    0.000 codecs.py:318(decode)
        1    0.017    0.017    0.911    0.911 grep.py:3(<module>)

[omitted lines]
#+end_src
**** A caveat of Python's =cProfile= profiler (and many profilers for that matter) is that they display time per function call. That can become unintuitive really fast, especially if you are using third party libraries in your code since internal function calls are also accounted for. [[red#]]^^A more intuitive way of displaying profiling information is to include the time taken per line of code^^, [[blue#]]^^which is what /line profilers/ do^^.
***** For instance, the following piece of Python code performs a request to the class website and parses the response to get all URLs in the page:
***** #+begin_src python
#!/usr/bin/env python
import requests
from bs4 import BeautifulSoup

# This is a decorator that tells line_profiler
# that we want to analyze this function
@profile
def get_urls():
    response = requests.get('https://missing.csail.mit.edu')
    s = BeautifulSoup(response.content, 'lxml')
    urls = []
    for url in s.find_all('a'):
        urls.append(url['href'])

if __name__ == '__main__':
    get_urls()
#+end_src
***** If we used Python's =cProfile= profiler we'd get over 2500 lines of output, and even with sorting it'd be hard to understand where the time is being spent. A quick run with [[https://github.com/pyutils/line_profiler][line profiler]] shows the time taken per line:

#+begin_src highlight :hint_scrollable true
$ kernprof -l -v a.py
Wrote profile results to urls.py.lprof
Timer unit: 1e-06 s

Total time: 0.636188 s
File: a.py
Function: get_urls at line 5

Line #  Hits         Time  Per Hit   % Time  Line Contents
==============================================================
 5                                           @profile
 6                                           def get_urls():
 7         1     613909.0 613909.0     96.5      response = requests.get('https://missing.csail.mit.edu')
 8         1      21559.0  21559.0      3.4      s = BeautifulSoup(response.content, 'lxml')
 9         1          2.0      2.0      0.0      urls = []
10        25        685.0     27.4      0.1      for url in s.find_all('a'):
11        24         33.0      1.4      0.0          urls.append(url['href'])
#+end_src
*** Memory
:PROPERTIES:
:heading: 3
:ID: f58e6d2a-f046-440e-b759-da2118881071
:collapsed: true
:END:
**** In languages like C or C++ [[hl-1#]]^^memory leaks^^ can cause your program to never release memory that it doesn't need anymore. To help in the process of memory debugging you can use tools like [[https://valgrind.org/][Valgrind]] [[red#]]^^that will help you identify memory leaks^^.
**** In garbage collected languages like Python it is still useful to use a memory profiler because [[blue#]]^^as long as you have pointers to objects in memory they won't be garbage collected^^.
***** Here's an example program and its associated output when running it with [[https://pypi.org/project/memory-profiler/][memory-profiler]] (note the decorator like in =line-profiler=).
****** <!-- src -->
#+begin_src highlight
@profile
def my_func():
    a = [1] * (10 ** 6)
    b = [2] * (2 * 10 ** 7)
    del b
    return a

if __name__ == '__main__':
    my_func()
#+end_src
****** <!-- src -->
#+begin_src highlight
$ python -m memory_profiler example.py
Line #    Mem usage  Increment   Line Contents
==============================================
     3                           @profile
     4      5.97 MB    0.00 MB   def my_func():
     5     13.61 MB    7.64 MB       a = [1] * (10 ** 6)
     6    166.20 MB  152.59 MB       b = [2] * (2 * 10 ** 7)
     7     13.61 MB -152.59 MB       del b
     8     13.61 MB    0.00 MB       return a
#+end_src
*** Event Profiling
:PROPERTIES:
:heading: 3
:ID: 778ea178-ebe8-486e-9186-26713fd104e9
:collapsed: true
:END:
**** As it was the case for =strace= for debugging, you might want to ignore the specifics of the code that you are running and treat it like a black box when profiling. The [[https://www.man7.org/linux/man-pages/man1/perf.1.html][perf]] command [[hl-1#]]^^abstracts CPU differences away and does not report time or memory^^, but instead [[blue#]]^^it reports system events related to your programs^^. For example, =perf= [[green#]]^^can easily report poor cache locality, high amounts of page faults or livelocks^^. Here is an overview of the command:

- =perf list= - List the events that can be traced with perf
- =perf stat COMMAND ARG1 ARG2= - Gets counts of different events related to a process or command
- =perf record COMMAND ARG1 ARG2= - Records the run of a command and saves the statistical data into a file called =perf.data=
- =perf report= - Formats and prints the data collected in =perf.data=
*** Visualization
:PROPERTIES:
:heading: 3
:ID: becd0a90-1a9a-4e1f-935a-ebd902b31526
:collapsed: true
:END:
**** Profiler output for real world programs will contain large amounts of information because of the inherent complexity of software projects. Humans are visual creatures and are quite terrible at reading large amounts of numbers and making sense of them. Thus there are many tools for displaying profiler's output in an easier to parse way.
**** One common way to display CPU profiling information for sampling profilers is to use a [[http://www.brendangregg.com/flamegraphs.html][Flame Graph]], which will [[blue#]]^^display a hierarchy of function calls across the Y axis and time taken proportional to the X axis^^. They are also [[red#]]^^interactive^^, letting you zoom into specific parts of the program and get their stack traces (try clicking in the image below).
***** [[http://www.brendangregg.com/FlameGraphs/cpu-bash-flamegraph.svg][[[http://www.brendangregg.com/FlameGraphs/cpu-bash-flamegraph.svg]]]]
**** [[hl-1#]]^^Call graphs or control flow graphs^^ [[hl-2#]]^^display the relationships between subroutines within a program^^ [[hl-3#]]^^by including functions as nodes and functions calls between them as directed edges^^. When coupled with profiling information such as the number of calls and time taken, call graphs can be quite useful for interpreting the flow of a program. In Python you can use the [[https://pycallgraph.readthedocs.io/][pycallgraph]] library to generate them.
***** [[https://upload.wikimedia.org/wikipedia/commons/2/2f/A_Call_Graph_generated_by_pycallgraph.png]]
*** Resource Monitoring
:PROPERTIES:
:heading: 3
:ID: d65a5073-1d02-4b1f-8dd9-8d233a5f942a
:collapsed: true
:END:
**** Sometimes, the first step towards analyzing the performance of your program is to [[red#]]^^understand what its actual resource consumption is^^. Programs often run slowly when they are resource constrained, e.g. without enough memory or on a slow network connection. There are a myriad of command line tools for probing and displaying different system resources like [[hl-3#]]^^CPU usage, memory usage, network, disk usage^^ and so on.
- *General Monitoring* - Probably the most popular is [[https://htop.dev/][htop]], which is an improved version of [[https://www.man7.org/linux/man-pages/man1/top.1.html][top]]. =htop= presents various statistics for the currently running processes on the system. =htop= has a myriad of options and keybinds, some useful ones are: =<F6>= to sort processes, =t= to show tree hierarchy and =h= to toggle threads. See also [[https://nicolargo.github.io/glances/][glances]] for similar implementation with a great UI. For getting aggregate measures across all processes, [[http://dag.wiee.rs/home-made/dstat/][dstat]] is another nifty tool that computes real-time resource metrics for lots of different subsystems like I/O, networking, CPU utilization, context switches, &c.
- *I/O operations* - [[https://www.man7.org/linux/man-pages/man8/iotop.8.html][iotop]] displays live I/O usage information and is handy to [[green#]]^^check if a process is doing heavy I/O disk operations^^
- *Disk Usage* - [[https://www.man7.org/linux/man-pages/man1/df.1.html][df]] displays metrics per partitions and [[http://man7.org/linux/man-pages/man1/du.1.html][du]] displays *d*isk *u*sage per file for the current directory. In these tools the =-h= flag tells the program to print with *h*uman readable format. A more interactive version of =du= is [[https://dev.yorhel.nl/ncdu][ncdu]] which lets you navigate folders and delete files and folders as you navigate.
- *Memory Usage* - [[https://www.man7.org/linux/man-pages/man1/free.1.html][free]] displays the total amount of free and used memory in the system. Memory is also displayed in tools like =htop=.
- *Open Files* - [[https://www.man7.org/linux/man-pages/man8/lsof.8.html][lsof]] lists file information about files opened by processes. It can be quite useful for checking which process has opened a specific file.
- *Network Connections and Config* - [[https://www.man7.org/linux/man-pages/man8/ss.8.html][ss]] lets you monitor incoming and outgoing network packets statistics as well as interface statistics. A common use case of =ss= is figuring out what process is using a given port in a machine. For displaying routing, network devices and interfaces you can use [[http://man7.org/linux/man-pages/man8/ip.8.html][ip]]. [[red#]]^^Note that^^ =netstat= [[red#]]^^and^^ =ifconfig= [[red#]]^^have been deprecated in favor of the former tools respectively^^.
- *Network Usage* - [[https://github.com/raboof/nethogs][nethogs]] and [[http://www.ex-parrot.com/pdw/iftop/][iftop]] are good interactive CLI tools for monitoring network usage.
**** If you want to test these tools you can also artificially impose loads on the machine using the [[https://linux.die.net/man/1/stress][stress]] command.
*** Specialized tools
:PROPERTIES:
:heading: 3
:ID: fde57b6c-7dde-4637-8415-c43181d09bc6
:collapsed: true
:END:
**** Sometimes, black box benchmarking is all you need to determine what software to use. Tools like [[https://github.com/sharkdp/hyperfine][hyperfine]] let you [[blue#]]^^quickly benchmark command line programs^^. For instance, in the shell tools and scripting lecture we recommended =fd= over =find=. We can use =hyperfine= to compare them in tasks we run often. E.g. in the example below =fd= was 20x faster than =find= in my machine.
***** <!-- src -->
#+begin_src highlight :hint_scrollable true
$ hyperfine --warmup 3 'fd -e jpg' 'find . -iname "*.jpg"'
Benchmark #1: fd -e jpg
  Time (mean ± σ):      51.4 ms ±   2.9 ms    [User: 121.0 ms, System: 160.5 ms]
  Range (min … max):    44.2 ms …  60.1 ms    56 runs

Benchmark #2: find . -iname "*.jpg"
  Time (mean ± σ):      1.126 s ±  0.101 s    [User: 141.1 ms, System: 956.1 ms]
  Range (min … max):    0.975 s …  1.287 s    10 runs

Summary
  'fd -e jpg' ran
   21.89 ± 2.33 times faster than 'find . -iname "*.jpg"'
#+end_src
**** As it was the case for debugging, browsers also come with a fantastic set of tools for profiling webpage loading, letting you figure out where time is being spent (loading, rendering, scripting, &c). More info for [[https://profiler.firefox.com/docs/][Firefox]] and [[https://developers.google.com/web/tools/chrome-devtools/rendering-tools][Chrome]].
** Exercises
:PROPERTIES:
:heading: 2
:ID:       c819b3ce-ec45-4c98-b382-3ff916c914d2
:END:
*** Debugging
:PROPERTIES:
:heading: 3
:ID: 6b39edc0-38ab-4d6e-9c84-2e3a22ce289f
:collapsed: true
:END:
**** 1. Use =journalctl= on Linux or =log show= on macOS to get the super user accesses and commands in the last day. If there aren't any you can execute some harmless commands such as =sudo ls= and check again.
***** =sudo journalctl --since "1 day ago" | grep -E 'sudo'=
**** 2. Do [[https://github.com/spiside/pdb-tutorial][this]] hands on =pdb= tutorial to familiarize yourself with the commands. For a more in depth tutorial read [[https://realpython.com/python-debugging-pdb][this]].
:PROPERTIES:
:ID:       dea9e2e5-329c-4b64-9737-9d098afc2c20
:END:
***** [[https://realpython.com/python-debugging-pdb/][Python Debugging With Pdb – Real Python]]
****** By default, =breakpoint()= will [[https://realpython.com/absolute-vs-relative-python-imports/][import]] =pdb= and call =pdb.set_trace()=, as shown above. However, [[red#]]^^using^^ =breakpoint()= [[red#]]^^is more flexible and allows you to control debugging behavior via its API and use of the environment variable^^ =PYTHONBREAKPOINT=. For example, setting ~PYTHONBREAKPOINT=0~ in your environment will completely disable =breakpoint()=, thus disabling debugging. If you're using Python 3.7 or later, I encourage you to use =breakpoint()= instead of =pdb.set_trace()=.
****** You can also break into the debugger, without modifying the source and using =pdb.set_trace()= or =breakpoint()=, by running Python directly from the command-line and passing the option =-m pdb=. If your application accepts [[https://realpython.com/python-command-line-arguments/][command-line arguments]], pass them as you normally would after the filename. For example:
******* <!-- src -->
#+begin_example
$ python3 -m pdb app.py arg1 arg2
#+end_example
****** <!-- src -->
| Command | Syntax           | Description                                                                                                                                                                                                                                                           |
|---------+------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =unt=   | unt(il) [lineno] | Without =lineno=, [[blue#]]^^continue execution until the line with a number greater than the current one is reached^^. With =lineno=, [[hl-1#]]^^continue execution until a line with a number greater or equal to that is reached^^. In both cases, also [[hl-2#]]^^stop when the current frame returns^^. |
******* The difference between =n= and =unt= is that =unt= stops [[green#]]^^only when a line with a number greater than the current one is reached^^. =n= will [[blue#]]^^stop at the next logically executed line^^.
******* <!-- src -->
#+begin_note
The primary behavior to note with =unt= is that it will stop when a line number *greater or equal* to the current or specified line is reached.
#+end_note
****** <!-- src -->
| Command     | Syntax                 | Description                                                                                                                                                                |
|-------------+------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =display=   | display [expression]   | Display the value of =expression= if it changed, each time execution stops in the current frame. Without =expression=, list all display expressions for the current frame. |
| =undisplay= | undisplay [expression] | Do not display =expression= any more in the current frame. Without =expression=, clear all display expressions for the current frame.                                      |
****** <!-- src -->
#+begin_example
(Pdb) h w
w(here)
        Print a stack trace, with the most recent frame at the bottom.
        An arrow indicates the "current frame", which determines the
        context of most commands. 'bt' is an alias for this command.
#+end_example
****** <!-- src -->
| Command | Syntax         | Description                                                                                     |
|---------+----------------+-------------------------------------------------------------------------------------------------|
| =u=     | u(p) [count]   | Move the current frame =count= (default one) levels up in the stack trace (to an older frame).  |
| =d=     | d(own) [count] | Move the current frame =count= (default one) levels down in the stack trace (to a newer frame). |
**** 3. Install [[https://www.shellcheck.net/][shellcheck]] and try checking the following script. What is wrong with the code? Fix it. Install a linter plugin in your editor so you can get your warnings automatically.
***** <!-- src -->
  #+begin_src shell
  #!/bin/sh
  ## Example: a typical script with several problems
  for f in $(ls *.m3u)
  do
    grep -qi hq.*mp3 $f \
      && echo -e 'Playlist $f contains a HQ file in mp3 format'
  done
  #+end_src
***** After Modified according to the shellcheck
****** <!-- src -->
#+begin_src shell
#!/bin/sh
## Example: a typical script with several problems
for f in *.m3u
do
grep -qi 'hq.*mp3' "$f" \
    && echo "Playlist $f contains a HQ file in mp3 format"
done
#+end_src
**** 4. (Advanced) Read about [[https://undo.io/resources/reverse-debugging-whitepaper/][reversible debugging]] and get a simple example working using [[https://rr-project.org/][rr]] or [[https://morepypy.blogspot.com/2016/07/reverse-debugging-for-python.html][RevPDB]].
***** [[https://undo.io/resources/reverse-debugging-whitepaper/][What is Reverse Debugging and Why Do We Need It ¦ Undo]]
****** <!-- src -->
#+begin_important
[[red#]]^^Reason back from the state of the crashed program to determine what could have caused this^^. Debugging involves backwards reasoning, like solving murder mysteries. [[blue#]]^^Something impossible occurred, and the only solid information is that it really did occur^^. [[green#]]^^So we must think backwards from the result to discover the reasons^^.
#+end_important
****** Therefore, to be really useful, a debugger needs to help the programmer walk through the program's execution backwards. Consequently, developers need a different approach, and this is where reversible debugging comes in.
****** [[hl-1#]]^^Time travel debuggers^^ enable developers to record all program activities (every memory access, every computation, and every call to the operating system) and then rewind and replay to inspect the program state.
****** Essentially *they enable developers to solve the murder mystery by letting them rewind their code to walk backward, as well as forward, through the program*.
***** [[https://developers.redhat.com/blog/2021/05/03/instant-replay-debugging-c-and-c-programs-with-rr#][Debug C and C++ programs with rr | Red Hat Developer]]
****** TODO The example not working as the article in my computer, need to confirm why.
***** CANCELED [[https://morepypy.blogspot.com/2016/07/reverse-debugging-for-python.html][RevPDB]] working on pypy and python2, too old
*** Profiling
:PROPERTIES:
:heading: 3
:ID:       24fb0b47-e9a4-4c42-a87d-daf0fa301ae0
:END:
**** 5. [[https://missing.csail.mit.edu/static/files/sorts.py][Here]] are some sorting algorithm implementations. Use [[https://docs.python.org/3/library/profile.html][cProfile]] and [[https://github.com/pyutils/line_profiler][line profiler]] to compare the runtime of insertion sort and quicksort. What is the bottleneck of each algorithm? Use then =memory_profiler= to check the memory consumption, why is insertion sort better? Check now the inplace version of quicksort. Challenge: Use =perf= to look at the cycle counts and cache hits and misses of each algorithm.
***** <!-- src -->
#+begin_src shell
❯ python -m cProfile -s tottime sorts.py | grep -E "insertionsort|quicksort|tottime"
   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     1000    0.036    0.000    0.036    0.000 sorts.py:12(insertionsort)
34720/1000    0.035    0.000    0.038    0.000 sorts.py:35(quicksort_inplace)
33606/1000    0.030    0.000    0.049    0.000 sorts.py:25(quicksort)

#+end_src
***** 需要在 =insertionsort=, =quicksort=, =quicksort_inplace= 前加上 =@profile=
#+begin_src shell
❯ kernprof -l -v sorts.py
Wrote profile results to sorts.py.lprof
Timer unit: 1e-06 s

Total time: 0.118782 s
File: sorts.py
Function: insertionsort at line 11

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    11                                           @profile
    12                                           def insertionsort(array):
    13
    14     24584       3021.8      0.1      2.5      for i in range(len(array)):
    15     24584       3530.5      0.1      3.0          j = i-1
    16     24584       3581.1      0.1      3.0          v = array[i]
    17    196577      42026.5      0.2     35.4          while j >= 0 and v < array[j]:
    18    196577      35386.8      0.2     29.8              array[j+1] = array[j]
    19    196577      26155.0      0.1     22.0              j -= 1
    20     24584       4967.4      0.2      4.2          array[j+1] = v
    21      1000        113.1      0.1      0.1      return array

Total time: 0.0592331 s
File: sorts.py
Function: quicksort at line 24

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    24                                           @profile
    25                                           def quicksort(array):
    26     17680       3148.2      0.2      5.3      if len(array) <= 1:
    27     17680       2105.6      0.1      3.6          return array
    28     16680       2462.6      0.1      4.2      pivot = array[0]
    29     16680      18979.3      1.1     32.0      left = [i for i in array[1:] if i < pivot]
    30     16680      20832.9      1.2     35.2      right = [i for i in array[1:] if i >= pivot]
    31     16680      11704.5      0.7     19.8      return quicksort(left) + [pivot] + quicksort(right)

Total time: 0.100205 s
File: sorts.py
Function: quicksort_inplace at line 34

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    34                                           @profile
    35                                           def quicksort_inplace(array, low=0, high=None):
    36     34706       6361.4      0.2      6.3      if len(array) <= 1:
    37        30          3.3      0.1      0.0          return array
    38     33736       4927.8      0.1      4.9      if high is None:
    39       970        195.5      0.2      0.2          high = len(array)-1
    40     17838       2780.1      0.2      2.8      if low >= high:
    41     17838       2065.9      0.1      2.1          return array
    42
    43     16868       2361.9      0.1      2.4      pivot = array[high]
    44     16868       2414.1      0.1      2.4      j = low-1
    45    111778      17130.5      0.2     17.1      for i in range(low, high):
    46     58159       9194.4      0.2      9.2          if array[i] <= pivot:
    47     58159       7749.2      0.1      7.7              j += 1
    48     58159      14497.7      0.2     14.5              array[i], array[j] = array[j], array[i]
    49     16868       5130.4      0.3      5.1      array[high], array[j+1] = array[j+1], array[high]
    50     16868      11889.2      0.7     11.9      quicksort_inplace(array, low, j)
    51     16868      11715.9      0.7     11.7      quicksort_inplace(array, j+2, high)
    52     16868       1787.4      0.1      1.8      return array

#+end_src
***** According to the line profiler results, the insertion sort bottleneck is caused by the number of comparisons and swaps required to insert each element into the sorted subarray. On the other hand, the partitioning step is the bottleneck for quicksort.
***** Use =mprof run sorts.py= and =mprof plot= to get the memory usage of the insertionsort, quicksort, and quicksort inplace. Set the array size to 100000. The results are shown in the following figures.
****** [[../assets/image_1683192017644_0.png]]
****** [[../assets/image_1683192068925_0.png]]
****** [[../assets/image_1683191897378_0.png]]
****** Insertionsort swap the item inplace in the array, so the memeroy usage of it is better.
****** quicksort inplace also swap item inplace in the array, so the memory usage of it is the same with the Insertionsort.
***** Use =perf stat -e cpu-cycles,cache-references,cache-misses python sorts.py= to get the cycle counts and cache hits and misses of each algorithm
****** insertion sort
#+begin_example
 Performance counter stats for 'python sorts.py':

       219,914,967      cpu-cycles
         5,564,501      cache-references
           246,177      cache-misses                     #    4.424 % of all cache refs

       0.069294206 seconds time elapsed

       0.068954000 seconds user
       0.000000000 seconds sys
#+end_example
****** quick sort
#+begin_example
 Performance counter stats for 'python sorts.py':

       217,264,978      cpu-cycles
         5,500,501      cache-references
           312,400      cache-misses                     #    5.679 % of all cache refs

       0.068476041 seconds time elapsed

       0.068369000 seconds user
       0.000000000 seconds sys
#+end_example
****** quicksort inplace
#+begin_example
 Performance counter stats for 'python sorts.py':

       198,381,536      cpu-cycles
         5,520,567      cache-references
           266,064      cache-misses                     #    4.820 % of all cache refs

       0.062566022 seconds time elapsed

       0.062477000 seconds user
       0.000000000 seconds sys
#+end_example
**** 6. Here's some (arguably convoluted) Python code for computing Fibonacci numbers using a function for each number.

#+begin_src highlight
#!/usr/bin/env python
def fib0(): return 0

def fib1(): return 1

s = """def fib{}(): return fib{}() + fib{}()"""

if __name__ == '__main__':

    for n in range(2, 10):
        exec(s.format(n, n-1, n-2))
    # from functools import lru_cache
    # for n in range(10):
    #     exec("fib{} = lru_cache(1)(fib{})".format(n, n))
    print(eval("fib9()"))
#+end_src

   Put the code into a file and make it executable. Install prerequisites: [[https://pycallgraph.readthedocs.io/][pycallgraph]] and [[http://graphviz.org/][graphviz]]. (If you can run =dot=, you already have GraphViz.) Run the code as is with =pycallgraph graphviz -- ./fib.py= and check the =pycallgraph.png= file. How many times is =fib0= called?. We can do better than that by memoizing the functions. Uncomment the commented lines and regenerate the images. How many times are we calling each =fibN= function now?
***** Use =pip install pycallgraph2= to install pycallgraph, =pycallgraph= is the version of python2
***** Before memorize, the call times of =fib0= is 21 times.
****** [[../assets/pycallgraph_1683231681851_0.png]]
***** After we use memoizing, the call times of =fib0= is only 1.
****** [[../assets/pycallgraph_1683231816158_0.png]]
**** 7. A common issue is that a port you want to listen on is already taken by another process. Let's learn how to discover that process pid. First execute =python -m http.server 4444= to start a minimal web server listening on port =4444=. On a separate terminal run =lsof | grep LISTEN= to print all listening processes and ports. Find that process pid and terminate it by running =kill <PID>=.
***** Use =lsof -i :4444= to find all the processes that are currently using port 4444
**** 8. Limiting a process's resources can be another handy tool in your toolbox. Try running =stress -c 3= and visualize the CPU consumption with =htop=. Now, execute =taskset --cpu-list 0,2 stress -c 3= and visualize it. Is =stress= taking three CPUs? Why not? Read [[https://www.man7.org/linux/man-pages/man1/taskset.1.html][man taskset]]. Challenge: achieve the same using [[https://www.man7.org/linux/man-pages/man7/cgroups.7.html][cgroups]]. Try limiting the memory consumption of =stress -m=.
***** No, =taskset --cpu-list 0,2 stress -c 3= doesn't take three CPUs, because taskset limits tasks in CPU0 and CPU1.
***** To use cgroups, need to install =libcgroup=, in archlinux, We can install =libcgroup-git= instead.
****** Use =sudo cgcreate -g cpuset:/cpulimited= to create a new cgroup
****** Use =echo "0,2" | sudo tee /sys/fs/cgroup/cpulimited/cpuset.cpus= to limit the cpu to 0 and 2
****** Use =sudo cgexec -g cpuset:/cpulimited stress -c 3= to start the task.
***** To limiting the memory consumption of =stress -m=, We can also use cgroups.
****** Use =sudo cgcreate -g memory:/memorylimited= to create a new cgroup
****** Use =echo "128M" | sudo tee /sys/fs/cgroup/memorylimited/memory.max= to limit the memroy consumption to 128M
****** Use =sudo cgexec -g memory:/memorylimited stress -m 1= to run the test.
**** 9. (Advanced) The command =curl ipinfo.io= performs a HTTP request and fetches information about your public IP. Open [[https://www.wireshark.org/][Wireshark]] and try to sniff the request and reply packets that =curl= sent and received. (Hint: Use the =http= filter to just watch HTTP packets).
***** Wireshark need to [[red#]]^^run with root privilege^^
***** Choose =enop1= (maybe different in your system) to start record.
***** Run =curl ipinfo.io= in the terminal and stop the record in the wireshark.
***** Use =http= to filter the result, can get the following result.
****** [[../assets/image_1683240463399_0.png]]
* Metaprogramming
:PROPERTIES:
:heading: 1
:ID: fad9530e-2483-4f62-b903-500d2d8a651a
:collapsed: true
:END:
** Video
:PROPERTIES:
:heading: 2
:collapsed: true
:ID: 84187c0d-08e3-4a28-b872-4988ede74a81
:END:
*** {{video https://youtu.be/_Ms1Z4xfqv4}}
**** {{youtube-timestamp 210}} make
**** {{youtube-timestamp 1095}} version
**** {{youtube-timestamp 1193}} semantic versioning
**** {{youtube-timestamp 1712}} continuous integration
**** {{youtube-timestamp 2157}} testing
**** {{youtube-timestamp 2293}} mocking
** Preface
:PROPERTIES:
:heading: 2
:ID:       1da03e41-6e87-4d62-92c3-66b70242eeea
:END:
*** What do we mean by “metaprogramming”? Well, it was the best collective term we could come up with for the set of things that are [[red#]]^^more about /process/^^ than they are about writing code or working more efficiently. In this lecture, we will look at [[blue#]]^^systems for building and testing your code, and for managing dependencies^^. These may seem like they are of limited importance in your day-to-day as a student, but the moment you interact with a larger code base through an internship or once you enter the “real world”, you will see this everywhere. We should note that [[green#]]^^“metaprogramming” can also mean “[[https://en.wikipedia.org/wiki/Metaprogramming][programs that operate on programs]]”^^, whereas [[hl-1#]]^^that is not quite the definition we are using for the purposes of this lecture^^.
** Build systems
:PROPERTIES:
:heading: 2
:ID:       d11a67b0-a8d1-4745-9ac7-04973fccc489
:tags: Make
:END:
*** If you write a paper in LaTeX, what are the commands you need to run to produce your paper? What about the ones used to run your benchmarks, plot them, and then insert that plot into your paper? Or to compile the code provided in the class you're taking and then running the tests?
*** For most projects, whether they contain code or not, there is a [[hl-1#]]^^“build process”^^. [[hl-2#]]^^Some sequence of operations you need to do to go from your inputs to your outputs^^. Often, that process might have many steps, and many branches. Run this to generate this plot, that to generate those results, and something else to produce the final paper. As with so many of the things we have seen in this class, you are not the first to encounter this annoyance, and luckily there exist many tools to help you!
*** These are usually called “build systems”, and there are /many/ of them. Which one you use depends on the task at hand, your language of preference, and the size of the project. At their core, they are all very similar though. You [[blue#]]^^define a number of /dependencies/, a number of /targets/, and /rules/ for going from one to the other^^. [[hl-1#]]^^You tell the build system that you want a particular target^^, and [[hl-2#]]^^its job is to find all the transitive dependencies of that target^^, [[hl-3#]]^^and then apply the rules to produce intermediate targets all the way^^ [[hl-4#]]^^until the final target has been produced^^. Ideally, the build system does this [[hl-5#]]^^without unnecessarily executing rules for targets whose dependencies haven't changed and where the result is available from a previous build^^.
*** =make= [[red#]]^^is one of the most common build systems^^ out there, and you will usually find it installed on pretty much any UNIX-based computer. It has its warts, but [[blue#]]^^works quite well for simple-to-moderate projects^^. When you run =make=, it consults a file called =Makefile= in the current directory. All the targets, their dependencies, and the rules are defined in that file. Let's take a look at one:
**** <!-- src --> 
#+begin_src makefile
paper.pdf: paper.tex plot-data.png
	pdflatex paper.tex

plot-%.png: %.dat plot.py
	./plot.py -i $*.dat -o $@
#+end_src
**** Each directive in this file is a rule for how to produce the left-hand side using the right-hand side. Or, phrased differently, the things named on the [[hl-1#]]^^right-hand side are dependencies^^, and the [[hl-2#]]^^left-hand side is the target^^. [[hl-3#]]^^The indented block is a sequence of programs to produce the target from those dependencies^^. In =make=, [[hl-4#]]^^the first directive also defines the default goal^^. If you run =make= with no arguments, this is the target it will build. Alternatively, you can run something like =make plot-data.png=, and it will build that target instead.
**** The =%= in a rule is a [[blue#]]^^“pattern”, and will match the same string on the left and on the right^^. For example, if the target =plot-foo.png= is requested, =make= will look for the dependencies =foo.dat= and =plot.py=.
*** Now let's look at what happens if we run =make= with an empty source directory.
**** <!-- src --> 
#+begin_src highlight
$ make
make: *** No rule to make target 'paper.tex', needed by 'paper.pdf'.  Stop.
#+end_src
*** =make= is helpfully telling us that in order to build =paper.pdf=, it needs =paper.tex=, and it has no rule telling it how to make that file. Let's try making it!
**** <!-- src --> 
#+begin_src highlight
$ touch paper.tex
$ make
make: *** No rule to make target 'plot-data.png', needed by 'paper.pdf'.  Stop.
#+end_src
*** Hmm, interesting, there /is/ a rule to make =plot-data.png=, but it is a pattern rule. Since the source files do not exist (=data.dat=), =make= simply states that it cannot make that file. Let's try creating all the files:
**** <!-- src --> 
#+begin_src highlight
$ cat paper.tex
\documentclass{article}
\usepackage{graphicx}
\begin{document}
\includegraphics[scale=0.65]{plot-data.png}
\end{document}
$ cat plot.py
#!/usr/bin/env python
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('-i', type=argparse.FileType('r'))
parser.add_argument('-o')
args = parser.parse_args()

data = np.loadtxt(args.i)
plt.plot(data[:, 0], data[:, 1])
plt.savefig(args.o)
$ cat data.dat
1 1
2 2
3 3
4 4
5 8
#+end_src
*** Now what happens if we run =make=?
**** <!-- src --> 
#+begin_src highlight
$ make
./plot.py -i data.dat -o plot-data.png
pdflatex paper.tex
... lots of output ...
#+end_src
*** And look, it made a PDF for us! What if we run =make= again?
**** <!-- src --> 
#+begin_src highlight
$ make
make: 'paper.pdf' is up to date.
#+end_src
**** It didn't do anything! Why not? Well, because it didn't need to. [[green#]]^^It checked that all of the previously-built targets were still up to date with respect to their listed dependencies^^.
*** We can test this by modifying =paper.tex= and then re-running =make=:
**** <!-- src --> 
#+begin_src highlight
$ vim paper.tex
$ make
pdflatex paper.tex
...
#+end_src
**** Notice that =make= did /not/ re-run =plot.py= because that was not necessary; none of =plot-data.png='s dependencies changed!
** Dependency management
:PROPERTIES:
:heading: 2
:ID:       148ef55a-638f-4a02-ab43-6a8601c52678
:END:
*** At a more macro level, [[blue#]]^^your software projects are likely to have dependencies that are themselves projects^^. You might depend on installed programs (like =python=), system packages (like =openssl=), or libraries within your programming language (like =matplotlib=). These days, [[green#]]^^most dependencies will be available through a /repository/ that hosts a large number of such dependencies in a single place^^, and provides a convenient mechanism for installing them. Some examples include the Ubuntu package repositories for Ubuntu system packages, which you access through the =apt= tool, RubyGems for Ruby libraries, PyPi for Python libraries, or the Arch User Repository for Arch Linux user-contributed packages.
*** Since the exact mechanisms for interacting with these repositories vary a lot from repository to repository and from tool to tool, we won't go too much into the details of any specific one in this lecture. What we /will/ cover is some of the [[red#]]^^common terminology^^ they all use. The first among these is [[red#]]^^/versioning/^^. Most projects that other projects depend on issue a [[hl-2#]]^^/version number/^^ with every release. Usually something like 8.1.3 or 64.1.20192004. They are often, but not always, numerical. Version numbers serve many purposes, and one of the most important of them is to [[hl-5#]]^^ensure that software keeps working^^. Imagine, for example, that I release a new version of my library where I have renamed a particular function. If someone tried to build some software that depends on my library after I release that update, the build might fail because it calls a function that no longer exists! Versioning attempts to solve this problem by letting a project say that it depends on a particular version, or range of versions, of some other project. That way, even if the underlying library changes, dependent software continues building by using an older version of my library.
*** That also isn't ideal though! What if I issue a security update which does /not/ change the public interface of my library (its “API”), and which any project that depended on the old version should immediately start using? This is where the [[hl-4#]]^^different groups of numbers in a version come in^^. The exact meaning of each one varies between projects, but one relatively common standard is [[https://semver.org/][/semantic versioning/]]. With [[red#]]^^semantic versioning^^, every version number is of the form: [[blue#]]^^major.minor.patch.^^ The rules are:
- If a new release [[hl-1#]]^^does not change the API^^, increase the patch version.
- If you [[hl-2#]]^^/add/ to your API in a backwards-compatible way^^, increase the minor version.
- If you [[hl-3#]]^^change the API in a non-backwards-compatible way^^, increase the major version.
*** This already provides some major advantages. Now, if my project depends on your project, it /should/ be safe to use the latest release with the same major version as the one I built against when I developed it, as long as its minor version is at least what it was back then. In other words, if I depend on your library at version =1.3.7=, then it /should/ be fine to build it with =1.3.8=, =1.6.1=, or even =1.3.0=. Version =2.2.4= would probably not be okay, because the major version was increased. We can see an example of semantic versioning in Python's version numbers. Many of you are probably aware that Python 2 and Python 3 code do not mix very well, which is why that was a /major/ version bump. Similarly, code written for Python 3.5 might run fine on Python 3.7, but possibly not on 3.4.
*** When working with dependency management systems, you may also come across the notion of [[red#]]^^/lock files/^^. [[hl-1#]]^^A lock file is simply a file that lists the exact version you are /currently/ depending on of each dependency^^. Usually, you need to explicitly run an update program to upgrade to newer versions of your dependencies. There are many reasons for this, such as avoiding unnecessary recompiles, having reproducible builds, or not automatically updating to the latest version (which may be broken). An extreme version of this kind of dependency locking is [[hl-2#]]^^/vendoring/^^, which is where you copy all the code of your dependencies into your own project. That gives you total control over any changes to it, and lets you introduce your own changes to it, but also means you have to explicitly pull in any updates from the upstream maintainers over time.
** Continuous integration systems
:PROPERTIES:
:heading: 2
:ID:       82ce7e40-118b-4878-a519-daf60855ba59
:END:
*** As you work on larger and larger projects, you'll find that there are often additional tasks you have to do whenever you make a change to it. You might have to upload a new version of the documentation, upload a compiled version somewhere, release the code to pypi, run your test suite, and all sort of other things. Maybe every time someone sends you a pull request on GitHub, you want their code to be style checked and you want some benchmarks to run? When these kinds of needs arise, it's time to take a look at continuous integration.
*** [[red#]]^^Continuous integration, or CI, is an umbrella term for “stuff that runs whenever your code changes”^^, and there are many companies out there that provide various types of CI, often for free for open-source projects. Some of the big ones are [[hl-5#]]^^Travis CI, Azure Pipelines, and GitHub Actions^^. They all work in roughly the same way: you [[blue#]]^^add a file to your repository that describes what should happen when various things happen to that repository^^. By far the most common one is a rule like “when someone pushes code, run the test suite”. When the event triggers, the CI provider spins up a virtual machines (or more), runs the commands in your “recipe”, and then usually notes down the results somewhere. You might set it up so that you are notified if the test suite stops passing, or so that a little badge appears on your repository as long as the tests pass.
*** As an example of a CI system, the class website is set up using GitHub Pages. Pages is a CI action that runs the Jekyll blog software on every push to =master= and makes the built site available on a particular GitHub domain. This makes it trivial for us to update the website! [[blue#]]^^We just make our changes locally, commit them with git, and then push. CI takes care of the rest.^^
** A brief aside on testing
:PROPERTIES:
:heading: 2
:ID:       1d81c21d-254b-427f-9b43-2c945384f087
:END:
*** Most large software projects come with a “test suite”. You may already be familiar with the general concept of testing, but we thought we'd quickly mention some approaches to testing and [[red#]]^^testing terminology^^ that you may encounter in the wild:

- [[hl-1#]]^^Test suite^^: a collective term for all the tests
- [[hl-2#]]^^Unit test^^: a “micro-test” that tests a specific feature in isolation
- [[hl-3#]]^^Integration test^^: a “macro-test” that runs a larger part of the system to check that different feature or components work /together/.
- [[hl-4#]]^^Regression test^^: a test that implements a particular pattern that /previously/ caused a bug to ensure that the bug does not resurface.
- [[hl-5#]]^^Mocking^^: to replace a function, module, or type with a fake implementation to avoid testing unrelated functionality. For example, you might “[[green#]]^^mock the network^^” or “[[blue#]]^^mock the disk^^”.
** Exercises
:PROPERTIES:
:heading: 2
:ID:       a17b8e05-9e47-48bc-9775-9f1e2af9d1f8
:END:
*** :PROPERTIES:
:END:
1. Most makefiles provide a target called =clean=. This isn't intended to produce a file called =clean=, but instead to clean up any files that can be re-built by make. Think of it as a way to “undo” all of the build steps. Implement a =clean= target for the =paper.pdf= =Makefile= above. You will have to make the target [[https://www.gnu.org/software/make/manual/html_node/Phony-Targets.html][phony]]. You may find the [[https://git-scm.com/docs/git-ls-files][git ls-files]] subcommand useful. A number of other very common make targets are listed [[https://www.gnu.org/software/make/manual/html_node/Standard-Targets.html#Standard-Targets][here]].
:PROPERTIES:
:ID:       779b39d8-d430-42cb-9567-1d69ae89da48
:tags: Make
:END:
**** ((f60c5237-4cb8-4346-ba30-8e0692407f1b))
**** We can use =git ls-files= to delete the files which are not tracked by git.
***** <!-- src -->
#+begin_note
Use =$$= to escape the =$= character, which has a special meaning in Make.
#+end_note
**** So, all we need to do is add the following code to the Makefile
***** <!-- src -->
#+begin_src makefile
.PHONY: clean
clean:
	ls | grep -v "$$(git ls-files)" | xargs rm -rfv
#+end_src makefile
*** :PROPERTIES:
:END:
2. Take a look at the various ways to specify version requirements for dependencies in [[https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html][Rust's build system]]. Most package repositories support similar syntax. For each one (caret, tilde, wildcard, comparison, and multiple), try to come up with a use-case in which that particular kind of requirement makes sense.
:PROPERTIES:
:ID:       8947143a-98bc-4018-9786-cb25a1e6e085
:END:
**** caret
***** =^1.2.3= is exactly equivalent to =1.2.3=.
**** tilde
***** <!-- src -->
#+begin_example
~1.2.3  := >=1.2.3, <1.3.0
~1.2    := >=1.2.0, <1.3.0
~1      := >=1.0.0, <2.0.0
#+end_example
**** wildcard
***** <!-- src -->
#+begin_example
 *     := >=0.0.0
 1.*   := >=1.0.0, <2.0.0
 1.2.* := >=1.2.0, <1.3.0
#+end_example
**** comparsion
***** <!-- src -->
#+begin_example
>= 1.2.0
> 1
< 2
= 1.2.3
#+end_example
**** multiple
***** Multiple version requirements can be separated with a comma, e.g., ~>= 1.2, < 1.5~.
*** :PROPERTIES:
:END:
3. Git can act as a simple CI system all by itself. In =.git/hooks= inside any git repository, you will find (currently inactive) files that are run as scripts when a particular action happens. Write a [[https://git-scm.com/docs/githooks#_pre_commit][pre-commit]] hook that runs =make paper.pdf= and refuses the commit if the =make= command fails. This should prevent any commit from having an unbuildable version of the paper.
:PROPERTIES:
:ID:       e6159fb9-3075-45c9-a6a0-c7fc248d2850
:END:
**** Navigate to the hooks directory of the repository. You can use =git rev-parse --git-path hooks= to get the effective hooks path.
***** [[blue#]]^^Watch out the hook path of the submodules are different^^.
**** Create a new file named =pre-commit= (without any file extension) and make it executable.
**** Open the =pre-commit= file in an editor and paste the following content:
**** <!-- src -->
#+begin_src bash
 #!/bin/bash
 make paper.pdf
 if [ $? -ne 0 ]; then
     echo "Error: make failed. Aborting commit." >&2
     exit 1
 fi
#+end_src
**** This script runs the =make paper.pdf= command and checks the exit status of the command using =$?=. If the exit status is not zero, it prints an error message to the standard error stream ( =>&2= ) and exits with a non-zero status code (1), which will abort the commit.
**** Save and close the file.
**** Now, every time you run =git commit=, the =make paper.pdf= command will be executed, and the commit will be refused if the command fails.
*** 4. Set up a simple auto-published page using [[https://pages.github.com/][GitHub Pages]]. Add a [[https://github.com/features/actions][GitHub Action]] to the repository to run =shellcheck= on any shell files in that repository (here is [[https://github.com/marketplace/actions/shellcheck][one way to do it]]). Check that it works!
:PROPERTIES:
:ID:       9b50c1c7-217e-47f5-8beb-0a0c1d85c386
:END:
**** [[red#]]^^Watch out the branch name in the github action yaml file.^^
***** <!-- src -->
#+begin_src yaml
on:
  push:
    branches:
      - main

name: "Trigger: Push action"
permissions: {}

jobs:
  shellcheck:
    name: Shellcheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master
#+end_src yaml
*** 5. [[https://help.github.com/en/actions/automating-your-workflow-with-github-actions/building-actions][Build your own]] GitHub action to run [[http://proselint.com/][proselint]] or [[https://github.com/btford/write-good][write-good]] on all the =.md= files in the repository. Enable it in your repository, and check that it works by filing a pull request with a typo in it.
:PROPERTIES:
:ID:       df319b2a-a8ad-4eb7-953e-0467910b6f40
:END:
**** Refer to [[https://github.com/marketplace/actions/lint-markdown][Lint Markdown · Actions · GitHub Marketplace]] for relevant settings.
* Security and Cryptography
:PROPERTIES:
:heading: 1
:ID: 30f4a7ff-c0e5-4471-b811-d16013f72988
:collapsed: true
:END:
** Video
:PROPERTIES:
:heading: 2
:collapsed: true
:ID: 78a813c6-9f86-41c9-9777-a4f22523c369
:END:
*** {{video https://youtu.be/tjwobAmnKTo}}
** Preface
:PROPERTIES:
:heading: 2
:collapsed: true
:ID: 35e815e4-a8ef-480f-84e9-ca1e218dca5b
:END:
*** Last year's security and privacy lecture focused on how you can be more secure as a computer /user/. This year, we will [[red#]]^^focus on security and cryptography concepts^^ that are relevant in understanding tools covered earlier in this class, such as the use of hash functions in Git or key derivation functions and symmetric/asymmetric cryptosystems in SSH.
:PROPERTIES:
:ID:       c9398611-c7ae-4475-b69a-c76135cbe576
:END:
*** This lecture is not a substitute for a more rigorous and complete course on computer systems security ([[https://css.csail.mit.edu/6.858/][6.858]]) or cryptography ([[https://courses.csail.mit.edu/6.857/][6.857]] and 6.875). Don't do security work without formal training in security. Unless you're an expert, don't [[https://www.schneier.com/blog/archives/2015/05/amateurs_produc.html][roll your own crypto]]. The same principle applies to systems security.
*** This lecture has a very informal (but we think practical) treatment of basic cryptography concepts. This lecture won't be enough to teach you how to /design/ secure systems or cryptographic protocols, but we hope [[blue#]]^^it will be enough to give you a general understanding of the programs and protocols you already use^^.
** Entropy
:PROPERTIES:
:heading: 2
:collapsed: true
:ID: 77eed4ca-5f93-4309-a074-1d6728e87466
:END:
*** [[https://en.wikipedia.org/wiki/Entropy_(information_theory)][Entropy]] is a measure of randomness. This is useful, for example, when determining the strength of a password.
:PROPERTIES:
:ID:       1b0482b1-de42-4bdb-bafa-78a7a02df46f
:END:
*** <!-- src -->
#+begin_center
[[https://imgs.xkcd.com/comics/password_strength.png]]
#+end_center
*** As the above [[https://xkcd.com/936/][XKCD comic]] illustrates, a password like “correcthorsebatterystaple” is more secure than one like “Tr0ub4dor&3”. But how do you quantify something like this?
*** [[blue#]]^^Entropy is measured in /bits/^^, and when selecting uniformly at random from a set of possible outcomes, the entropy is equal to =log_2(# of possibilities)=. [[green#]]^^A fair coin flip gives 1 bit of entropy^^. A dice roll (of a 6-sided die) has ~2.58 bits of entropy.
*** [[hl-1#]]^^You should consider that the attacker knows the /model/ of the password, but not the randomness^^ (e.g. from [[https://en.wikipedia.org/wiki/Diceware][dice rolls]]) used to select a particular password.
*** How many bits of entropy is enough? It depends on your threat model. For online guessing, as the XKCD comic points out, ~40 bits of entropy is pretty good. [[hl-5#]]^^To be resistant to offline guessing, a stronger password would be necessary (e.g. 80 bits, or more)^^.
** Hash functions
:PROPERTIES:
:heading: 2
:collapsed: true
:ID: 38ef63d1-c675-49cb-b1e1-3a8e6e369397
:END:
*** A [[https://en.wikipedia.org/wiki/Cryptographic_hash_function][cryptographic hash function]] [[blue#]]^^maps data of arbitrary size to a fixed size^^, [[green#]]^^and has some special properties^^. A rough specification of a hash function is as follows:
**** <!-- src -->
#+begin_src highlight
hash(value: array<byte>) -> vector<byte, N>  (for some fixed N)
#+end_src
*** [[hl-5#]]^^An example of a hash function is^^ [[https://en.wikipedia.org/wiki/SHA-1][SHA1]], which is used in Git. It maps arbitrary-sized inputs to 160-bit outputs (which can be represented as 40 hexadecimal characters). We can try out the SHA1 hash on an input using the =sha1sum= command:
**** <!-- src --> 
#+begin_src highlight
$ printf 'hello' | sha1sum
aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d
$ printf 'hello' | sha1sum
aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d
$ printf 'Hello' | sha1sum 
f7ff9e8b7bb2e09b70935a5d785e0cc5d9d0abf0
#+end_src
*** At a high level, a hash function can be thought of as a [[red#]]^^hard-to-invert random-looking (but deterministic) function^^ (and this is the [[https://en.wikipedia.org/wiki/Random_oracle][ideal model of a hash function]]). [[blue#]]^^A hash function has the following properties^^:
- [[hl-1#]]^^Deterministic^^: the same input always generates the same output.
- [[hl-2#]]^^Non-invertible^^: it is hard to find an input =m= such that ~hash(m) = h~ for some desired output =h=.
- [[hl-3#]]^^Target collision resistant^^: given an input =m_1=, it's hard to find a different input =m_2= such that ~hash(m_1) = hash(m_2)~.
- [[hl-4#]]^^Collision resistant^^: it's hard to find two inputs =m_1= and =m_2= such that ~hash(m_1) = hash(m_2)~ (note that this is a strictly stronger property than target collision resistance).
*** <!-- src -->
#+begin_note
while it may work for certain purposes, [[red#]]^^SHA-1 is^^ [[https://shattered.io/][no longer]] [[red#]]^^considered a strong cryptographic hash function^^. You might find this table of [[https://valerieaurora.org/hash.html][lifetimes of cryptographic hash functions]] interesting. However, note that recommending specific hash functions is beyond the scope of this lecture. If you are doing work where this matters, you need formal training in security/cryptography.
#+end_note
*** Applications
:PROPERTIES:
:heading: 3
:END:
**** [[hl-1#]]^^Git^^, for content-addressed storage. The idea of a [[https://en.wikipedia.org/wiki/Hash_function][hash function]] is a more general concept (there are non-cryptographic hash functions). Why does Git use a cryptographic hash function?
**** [[hl-2#]]^^A short summary of the contents of a file^^. Software can often be downloaded from (potentially less trustworthy) mirrors, e.g. Linux ISOs, and it would be nice to not have to trust them. The official sites usually post hashes alongside the download links (that point to third-party mirrors), so that the hash can be checked after downloading a file.
**** [[https://en.wikipedia.org/wiki/Commitment_scheme][Commitment schemes]]. [[hl-3#]]^^Suppose you want to commit to a particular value, but reveal the value itself later^^. For example, I want to do a fair coin toss “in my head”, without a trusted shared coin that two parties can see. I could choose a value ~r = random()~, and then share ~h = sha256(r)~. Then, you could call heads or tails (we'll agree that even =r= means heads, and odd =r= means tails). After you call, I can reveal my value =r=, and you can confirm that I haven't cheated by checking =sha256(r)= matches the hash I shared earlier.
** Key derivation functions
:PROPERTIES:
:heading: 2
:ID: 15f2415e-3aaf-4a3b-a0f1-b36fc91778db
:collapsed: true
:END:
*** A related concept to cryptographic hashes, [[https://en.wikipedia.org/wiki/Key_derivation_function][key derivation functions]] (KDFs) are used for a number of applications, including [[blue#]]^^producing fixed-length output for use as keys in other cryptographic algorithms^^. Usually, [[red#]]^^KDFs are deliberately slow, in order to slow down offline brute-force attacks^^.
*** Applications
:PROPERTIES:
:heading: 3
:END:
**** [[hl-1#]]^^Producing keys from passphrases for use in other cryptographic algorithms^^ (e.g. symmetric cryptography, see below).
**** [[hl-2#]]^^Storing login credentials^^. Storing plaintext passwords is bad; [[hl-3#]]^^the right approach is to generate and store a random^^ [[https://en.wikipedia.org/wiki/Salt_(cryptography)][salt]] ~salt = random()~ [[hl-3#]]^^for each user^^, [[hl-4#]]^^store^^ =KDF(password + salt)=, and [[hl-5#]]^^verify login attempts by re-computing the KDF given the entered password and the stored salt^^.
** Symmetric cryptography
:PROPERTIES:
:heading: 2
:ID: 610fd805-2adb-43f1-8b92-189792577a78
:collapsed: true
:END:
*** [[red#]]^^Hiding message contents^^ is probably the first concept you think about when you think about cryptography. [[blue#]]^^Symmetric cryptography accomplishes this with the following set of functionality^^:
**** <!-- src -->
#+begin_src highlight
keygen() -> key  (this function is randomized)

encrypt(plaintext: array<byte>, key) -> array<byte>  (the ciphertext)
decrypt(ciphertext: array<byte>, key) -> array<byte>  (the plaintext)
#+end_src
**** The encrypt function has the property that given the output (ciphertext), [[hl-1#]]^^it's hard to determine the input (plaintext) without the key^^. The decrypt function has the obvious correctness property, that ~decrypt(encrypt(m, k), k) = m~.
*** [[hl-5#]]^^An example of a symmetric cryptosystem in wide use today is^^ [[https://en.wikipedia.org/wiki/Advanced_Encryption_Standard][AES]].
*** Applications
:PROPERTIES:
:heading: 3
:END:
**** [[hl-2#]]^^Encrypting files for storage in an untrusted cloud service^^. This can be combined with KDFs, so you can encrypt a file with a passphrase. Generate ~key = KDF(passphrase)~, and then store =encrypt(file, key)=.
** Asymmetric cryptography
:PROPERTIES:
:heading: 2
:ID: 864199bd-0019-4ea2-9ea1-5752c533ea79
:collapsed: true
:END:
*** [[red#]]^^The term “asymmetric” refers to there being two keys, with two different roles^^. [[blue#]]^^A private key^^, as its name implies, is meant to be kept private, while [[green#]]^^the public key^^ can be publicly shared and it won't affect security (unlike sharing the key in a symmetric cryptosystem). [[hl-1#]]^^Asymmetric cryptosystems provide the following set of functionality, to encrypt/decrypt and to sign/verify^^:
**** <!-- src --> 
#+begin_src highlight
keygen() -> (public key, private key)  (this function is randomized)

encrypt(plaintext: array<byte>, public key) -> array<byte>  (the ciphertext)
decrypt(ciphertext: array<byte>, private key) -> array<byte>  (the plaintext)

sign(message: array<byte>, private key) -> array<byte>  (the signature)
verify(message: array<byte>, signature: array<byte>, public key) -> bool  (whether or not the signature is valid)
#+end_src
*** The encrypt/decrypt functions have properties similar to their analogs from symmetric cryptosystems. A message can be encrypted using the /public/ key. Given the output (ciphertext), it's hard to determine the input (plaintext) without the /private/ key. The decrypt function has the obvious correctness property, that ~decrypt(encrypt(m, public key), private key) = m~.
*** Symmetric and asymmetric encryption can be compared to physical locks. [[hl-1#]]^^A symmetric cryptosystem is like a door lock: anyone with the key can lock and unlock it.^^ [[hl-2#]]^^Asymmetric encryption is like a padlock with a key^^. [[hl-3#]]^^You could give the unlocked lock to someone (the public key), they could put a message in a box and then put the lock on^^, [[hl-4#]]^^and after that, only you could open the lock because you kept the key (the private key)^^.
*** The sign/verify functions have the same properties that you would hope physical signatures would have, in that [[red#]]^^it's hard to forge a signature^^. [[hl-1#]]^^No matter the message^^, [[hl-2#]]^^without the /private/ key^^, [[hl-3#]]^^it's hard to produce a signature such that^^ =verify(message, signature, public key)= [[hl-4#]]^^returns true^^. And of course, the verify function has the obvious correctness property that ~verify(message, sign(message, private key), public key) = true~.
*** Applications
:PROPERTIES:
:heading: 3
:END:
**** [[https://en.wikipedia.org/wiki/Pretty_Good_Privacy][PGP email encryption]]. People can have their public keys posted online (e.g. in a PGP keyserver, or on [[https://keybase.io/][Keybase]]). Anyone can send them encrypted email.
**** [[hl-2#]]^^Private messaging^^. Apps like [[https://signal.org/][Signal]] and [[https://keybase.io/][Keybase]] use asymmetric keys to establish private communication channels.
**** [[hl-3#]]^^Signing software^^. Git can have GPG-signed commits and tags. With a posted public key, anyone can verify the authenticity of downloaded software.
*** Key distribution
:PROPERTIES:
:heading: 3
:END:
**** Asymmetric-key cryptography is wonderful, but it has a [[blue#]]^^big challenge of distributing public keys / mapping public keys to real-world identities^^.
**** There are many solutions to this problem.
***** Signal has one simple solution: [[hl-1#]]^^trust on first use^^, and support [[hl-2#]]^^out-of-band public key exchange^^ (you verify your friends' “safety numbers” in person).
***** PGP has a different solution, which is [[https://en.wikipedia.org/wiki/Web_of_trust][web of trust]].
***** Keybase has yet another solution of [[https://keybase.io/blog/chat-apps-softer-than-tofu][social proof]] (along with other neat ideas).
**** Each model has its merits; we (the instructors) like Keybase's model.
** Case studies
:PROPERTIES:
:heading: 2
:collapsed: true
:ID: 3bb4a463-e2c7-46c0-abc0-f7dd91651276
:END:
*** Password managers
:PROPERTIES:
:heading: 3
:END:
**** This is an essential tool that everyone should try to use (e.g. [[https://keepassxc.org/][KeePassXC]], [[https://www.passwordstore.org/][pass]], and [[https://1password.com][1Password]]). [[red#]]^^Password managers^^ make it convenient to use unique, randomly generated high-entropy passwords for all your logins, and they save all your passwords in one place, encrypted with a symmetric cipher with a key produced from a passphrase using a KDF.
**** Using a password manager lets you avoid password reuse (so you're less impacted when websites get compromised), use high-entropy passwords (so you're less likely to get compromised), and only need to remember a single high-entropy password.
*** Two-factor authentication
:PROPERTIES:
:heading: 3
:END:
**** [[https://en.wikipedia.org/wiki/Multi-factor_authentication][Two-factor authentication]] (2FA) requires you to use a passphrase (“something you know”) along with a 2FA authenticator (like a [[https://www.yubico.com/][YubiKey]], “something you have”) in order to protect against stolen passwords and [[https://en.wikipedia.org/wiki/Phishing][phishing]] attacks.
*** Full disk encryption
:PROPERTIES:
:heading: 3
:END:
**** Keeping your laptop's entire disk encrypted is an easy way to protect your data in the case that your laptop is stolen. You can use [[https://wiki.archlinux.org/index.php/Dm-crypt/Encrypting_a_non-root_file_system][cryptsetup + LUKS]] on Linux, [[https://fossbytes.com/enable-full-disk-encryption-windows-10/][BitLocker]] on Windows, or [[https://support.apple.com/en-us/HT204837][FileVault]] on macOS. This encrypts the entire disk with a symmetric cipher, with a key protected by a passphrase.
*** Private messaging
:PROPERTIES:
:heading: 3
:END:
**** Use [[https://signal.org/][Signal]] or [[https://keybase.io/][Keybase]]. [[blue#]]^^End-to-end security is bootstrapped from asymmetric-key encryption^^. Obtaining your contacts' public keys is the critical step here. If you want good security, you need to authenticate public keys out-of-band (with Signal or Keybase), or trust social proofs (with Keybase).
*** SSH
:PROPERTIES:
:heading: 3
:END:
**** We've covered the use of SSH and SSH keys in an earlier lecture. Let's look at the cryptography aspects of this.
**** When you run =ssh-keygen=, it generates an asymmetric keypair, =public_key, private_key=. This is generated randomly, using entropy provided by the operating system (collected from hardware events, etc.). The public key is stored as-is (it's public, so keeping it a secret is not important), but at rest, the private key should be encrypted on disk. The =ssh-keygen= program prompts the user for a passphrase, and this is fed through a key derivation function to produce a key, which is then used to encrypt the private key with a symmetric cipher.
**** In use, once the server knows the client's public key (stored in the =.ssh/authorized_keys= file), a connecting client can prove its identity using asymmetric signatures. This is done through [[https://en.wikipedia.org/wiki/Challenge%E2%80%93response_authentication][challenge-response]]. At a high level, the server picks a random number and sends it to the client. The client then signs this message and sends the signature back to the server, which checks the signature against the public key on record. This effectively proves that the client is in possession of the private key corresponding to the public key that's in the server's =.ssh/authorized_keys= file, so the server can allow the client to log in.
** Resources
:PROPERTIES:
:heading: 2
:collapsed: true
:END:
*** [[/2019/security/][Last year's notes]]: from when this lecture was more focused on security and privacy as a computer user
*** [[https://latacora.micro.blog/2018/04/03/cryptographic-right-answers.html][Cryptographic Right Answers]]: answers “what crypto should I use for X?” for many common X.
** Exercises
:PROPERTIES:
:heading: 2
:ID: b586b82b-7980-4c2c-80aa-5dd7d819107e
:collapsed: true
:END:
*** *Entropy.*
:PROPERTIES:
:heading: 3
:END:
**** 1. Suppose a password is chosen as a concatenation of four lower-case dictionary words, where each word is selected uniformly at random from a dictionary of size 100,000. An example of such a password is =correcthorsebatterystaple=. How many bits of entropy does this have?
***** $\log_2(100000^4)=20\log_2(10)\approx 66$
**** 2. Consider an alternative scheme where a password is chosen as a sequence of 8 random alphanumeric characters (including both lower-case and upper-case letters). An example is =rg8Ql34g=. How many bits of entropy does this have?
***** $\log_2(62^8) \approx 48$
**** 3. Which is the stronger password?
***** The first one is a stronger password.
**** 4. Suppose an attacker can try guessing 10,000 passwords per second. On average, how long will it take to break each of the passwords?
***** The first one:
****** $2^{66} / (10000 \times 365 \times 24 \times 60 \times 60) = 2.34 \times 10^8\text{ year}$
***** The second one:
****** $2^{48} / (10000 \times 365 \times 24 \times 60 \times 60) = 893 \text{ year}$
*** *Cryptographic hash functions.* 
:PROPERTIES:
:heading: 3
:END:
**** Download a Debian image from a [[https://www.debian.org/CD/http-ftp/][mirror]] (e.g. [[http://debian.xfree.com.ar/debian-cd/current/amd64/iso-cd/][from this Argentinean mirror]]). Cross-check the hash (e.g. using the =sha256sum= command) with the hash retrieved from the official Debian site (e.g. [[https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/SHA256SUMS][this file]] hosted at =debian.org=, if you've downloaded the linked file from the Argentinean mirror).
***** Download the files
****** =wget http://debian.xfree.com.ar/debian-cd/current/amd64/iso-cd/debian-11.7.0-amd64-netinst.iso=
****** =wget https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/SHA256SUMS=
***** After download the given file, we can use the following command to confirm.
****** =diff <(sha256sum debian-11.7.0-amd64-netinst.iso) <(head -n 1 SHA256SUMS)=
*** *Symmetric cryptography.* 
:PROPERTIES:
:heading: 3
:END:
**** Encrypt a file with AES encryption, using [[https://www.openssl.org/][OpenSSL]]: =openssl aes-256-cbc -salt -in {input filename} -out {output filename}=. Look at the contents using =cat= or =hexdump=. Decrypt it with =openssl aes-256-cbc -d -in {input filename} -out {output filename}= and confirm that the contents match the original using =cmp=.
*** *Asymmetric cryptography.*
:PROPERTIES:
:heading: 3
:END:
**** 1. Set up [[https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys--2][SSH keys]] on a computer you have access to (not Athena, because Kerberos interacts weirdly with SSH keys). Make sure your private key is encrypted with a passphrase, so it is protected at rest.
**** 2. [[https://www.digitalocean.com/community/tutorials/how-to-use-gpg-to-encrypt-and-sign-messages][Set up GPG]]
***** [[https://www.digitalocean.com/community/tutorials/how-to-use-gpg-to-encrypt-and-sign-messages][How To Use GPG to Encrypt and Sign Messages | DigitalOcean]]
****** GPG, or [[red#]]^^GNU Privacy Guard^^, is a [[blue#]]^^public key cryptography implementation^^.
****** This allows for the [[green#]]^^secure transmission of information^^ between parties and can be used to verify that the origin of a message is genuine.
***** Use =gpg --full-generate-key --expert= to choose different kind of keys.
**** 3. Send Anish an encrypted email ([[https://keybase.io/anish][public key]]).
***** The method for setting up sending emails from command line: ((5dc35f9c-5cdc-44a1-993c-ddf4a7037fdc))
***** Get the public key: =curl https://keybase.io/anish/pgp_keys.asc | gpg --import=
***** Sign the public key: =gpg --sign-key "Anish Athalye"=
***** Send encrypted email: ~echo "Hi" | gpg -ea -r "Anish Athalye" | mail -s "MIT-Missing-Semester Exercise" --account=gmail anish.athalye@gmail.com~
**** 4. Sign a Git commit with =git commit -S= or create a signed Git tag with =git tag -s=. Verify the signature on the commit with =git show --show-signature= or on the tag with =git tag -v=.
***** Set the =user.signingkey= first
****** =git config --global user.signingkey "can use gpg --fingerprint to get"=
* Potpourri
:PROPERTIES:
:heading: 1
:ID: fea6b61a-a72e-47bb-8dc0-2fe4213b635e
:collapsed: true
:END:
** Video
:PROPERTIES:
:heading: 2
:ID: 7287ea30-94ab-41f5-b573-ea6c653c46e8
:collapsed: true
:END:
*** {{video https://youtu.be/JZDt-PRq0uo}}
**** {{youtube-timestamp 62}} Keyboard Remap
**** {{youtube-timestamp 380}} Daemons
**** {{youtube-timestamp 845}} FUSE
**** {{youtube-timestamp 1153}} Backups
**** {{youtube-timestamp 1306}} APIs
**** {{youtube-timestamp 1564}} Command-line arguments
***** =--=
**** {{youtube-timestamp 1954}} Window managers
**** {{youtube-timestamp 2069}} VPN
**** {{youtube-timestamp 2336}} Markdown
**** {{youtube-timestamp 2520}} Hammerspoon
**** {{youtube-timestamp 2753}} Booting + Live USBs
**** {{youtube-timestamp 2865}} Virtual Machine, Vagrant,  Docker, VM
**** {{youtube-timestamp 3124}} notebook programming
**** {{youtube-timestamp 3263}} Github
** Keyboard remapping
:PROPERTIES:
:heading: 2
:ID: ff63df16-bb3b-4883-9c0e-99450397ba25
:collapsed: true
:END:
*** As a programmer, your keyboard is your main input method. As with pretty much anything in your computer, it is configurable (and worth configuring).
*** The most basic change is to [[red#]]^^remap keys^^. This usually involves some software that is listening and, whenever a certain key is pressed, it intercepts that event and replaces it with another event corresponding to a different key. Some examples:
**** [[hl-1#]]^^Remap Caps Lock to Ctrl or Escape^^. We (the instructors) highly encourage this setting since Caps Lock has a very convenient location but is rarely used.
**** Remapping PrtSc to Play/Pause music. Most OSes have a play/pause key.
**** [[hl-2#]]^^Swapping Ctrl and the Meta (Windows or Command) key^^.
*** You can also map keys to arbitrary commands of your choosing. This is useful for common tasks that you perform. Here, some software [[hl-3#]]^^listens for a specific key combination and executes some script^^ whenever that event is detected.
**** Open a new terminal or browser window.
**** Inserting some specific text, e.g. your long email address or your MIT ID number.
**** Sleeping the computer or the displays.
*** There are even more complex modifications you can configure:
**** Remapping sequences of keys, e.g. [[hl-4#]]^^pressing shift five times toggles Caps Lock^^.
**** Remapping on tap vs on hold, e.g. [[blue#]]^^Caps Lock key is remapped to Esc if you quickly tap it, but is remapped to Ctrl if you hold it and use it as a modifier^^.
***** [[https://gist.github.com/tanyuan/55bca522bf50363ae4573d4bdcf06e2e][Smart Caps Lock: Remap Caps Lock to Control AND Escape]]
***** Use [[https://github.com/rvaiya/keyd][rvaiya/keyd: A key remapping daemon for linux.]] 
:PROPERTIES:
:ID:       75e30841-bc36-4442-9d45-ffab875045ff
:END:
**** Having remaps being keyboard or software specific.
*** Some software resources to get started on the topic:
**** macOS
***** [[https://karabiner****elements.pqrs.org/][karabiner elements]], [[https://github.com/koekeishiya/skhd][skhd]] or [[https://folivora.ai/][BetterTouchTool]]
**** Linux
***** [[https://wiki.archlinux.org/index.php/Xmodmap][xmodmap]] or [[https://github.com/autokey/autokey][Autokey]]
**** Windows
***** Builtin in Control Panel, [[https://www.autohotkey.com/][AutoHotkey]] or [[https://www.randyrants.com/category/sharpkeys/][SharpKeys]]
**** QMK
***** If your keyboard supports custom firmware you can use [[https://docs.qmk.fm/][QMK]] to configure the hardware device itself so the remaps works for any machine you use the keyboard with.
** Daemons
:PROPERTIES:
:heading: 2
:collapsed: true
:ID: a5f967fd-f403-48eb-8337-e6b31dc9969d
:END:
*** You are probably already familiar with the notion of daemons, even if the word seems new. Most computers have a series of processes that are always running in the background rather than waiting for a user to launch them and interact with them. These processes are called daemons and [[red#]]^^the programs that run as daemons often end with a^^ =d= [[red#]]^^to indicate so^^. For example =sshd=, the SSH daemon, is the program responsible for listening to incoming SSH requests and checking that the remote user has the necessary credentials to log in.
*** In Linux, =systemd= [[blue#]]^^(the system daemon) is the most common solution for running and setting up daemon processes^^. You can run =systemctl status= to list the current running daemons. Most of them might sound unfamiliar but are responsible for core parts of the system such as managing the network, solving DNS queries or displaying the graphical interface for the system. Systemd can be interacted with the =systemctl= command in order to =enable=, =disable=, =start=, =stop=, =restart= or check the =status= of services (those are the =systemctl= commands).
*** More interestingly, =systemd= has a fairly accessible interface for configuring and enabling new daemons (or services). Below is an example of a daemon for running a simple Python app. We won't go in the details but as you can see most of the fields are pretty self explanatory.
**** <!-- src --> 
#+begin_src highlight
# /etc/systemd/system/myapp.service
[Unit]
Description=My Custom App
After=network.target

[Service]
User=foo
Group=foo
WorkingDirectory=/home/foo/projects/mydaemon
ExecStart=/usr/bin/local/python3.7 app.py
Restart=on-failure

[Install]
WantedBy=multi-user.target
#+end_src
*** Also, if you just want to run some program with a given frequency there is no need to build a custom daemon, you can use [[https://www.man7.org/linux/man-pages/man8/cron.8.html][cron]], [[red#]]^^a daemon your system already runs to perform scheduled tasks^^.
** FUSE
:PROPERTIES:
:heading: 2
:collapsed: true
:ID: 919e8090-5891-4343-a95a-494b045d23c7
:END:
*** Modern software systems are usually composed of smaller building blocks that are composed together. Your operating system supports using different filesystem backends because there is a common language of what operations a filesystem supports. For instance, when you run =touch= to create a file, =touch= performs a system call to the kernel to create the file and the kernel performs the appropriate filesystem call to create the given file. [[green#]]^^A caveat is that UNIX filesystems are traditionally implemented as kernel modules and only the kernel is allowed to perform filesystem calls^^.
*** [[https://en.wikipedia.org/wiki/Filesystem_in_Userspace][FUSE]] [[blue#]]^^(Filesystem in User Space) allows filesystems to be implemented by a user program^^. FUSE lets users run user space code for filesystem calls and then bridges the necessary calls to the kernel interfaces. In practice, this means that users can implement arbitrary functionality for filesystem calls.
**** For example, FUSE can be used so whenever you perform an operation in a virtual filesystem, that operation is forwarded through SSH to a remote machine, performed there, and the output is returned back to you. This way, local programs can see the file as if it was in your computer while in reality it's in a remote server. This is effectively what =sshfs= does.
*** Some interesting examples of FUSE filesystems are:
**** [[https://github.com/libfuse/sshfs][sshfs]] - Open locally remote files/folder through an SSH connection.
**** [[https://rclone.org/commands/rclone_mount/][rclone]] - [[red#]]^^Mount cloud storage services like Dropbox, GDrive, Amazon S3 or Google Cloud Storage and open data locally^^.
***** [[https://rclone.org/onedrive/][Microsoft OneDrive]]
***** You can use command =rclone --vfs-cache-mode writes mount "Microsoft OneDrive": ~/Microsoft\ Onedrive &= to mount the onedrive
***** You can also sync between local and the remote (single direction).
****** =rclone sync -l --progress --transfers 12 ~/Documents "Microsoft OneDrive":Documents/homepc=
***** It also [[blue#]]^^support encryption and decryption^^
**** [[https://nuetzlich.net/gocryptfs/][gocryptfs]] - Encrypted overlay system. Files are stored encrypted but once the FS is mounted they appear as plaintext in the mountpoint.
**** [[https://keybase.io/docs/kbfs][kbfs]] - Distributed filesystem with end-to-end encryption. You can have private, shared and public folders.
**** [[https://borgbackup.readthedocs.io/en/stable/usage/mount.html][borgbackup]] - Mount your deduplicated, compressed and encrypted backups for ease of browsing.
** Backups
:PROPERTIES:
:heading: 2
:collapsed: true
:ID: 23ad42c8-ec15-4453-9103-2d4ed356a3c8
:END:
*** Any data that you haven't backed up is data that could be gone at any moment, forever. It's easy to copy data around, it's hard to reliably backup data.
*** Here are some good backup basics and the pitfalls of some approaches.
**** First, [[hl-1#]]^^a copy of the data in the same disk is not a backup^^, because the disk is the single point of failure for all the data. Similarly, [[hl-2#]]^^an external drive in your home is also a weak backup solution^^ since it could be lost in a fire/robbery/&c. Instead, [[red#]]^^having an off-site backup is a recommended practice^^.
**** [[hl-3#]]^^Synchronization solutions are not backups^^. For instance, Dropbox/GDrive are convenient solutions, but when data is erased or corrupted they propagate the change. For the same reason, disk mirroring solutions like RAID are not backups. [[hl-5#]]^^They don't help if data gets deleted, corrupted or encrypted by ransomware^^.
*** Some [[red#]]^^core features^^ of good backups solutions are [[green#]]^^versioning, deduplication and security^^.
**** Versioning backups ensure that you can access your history of changes and efficiently recover files.
**** Efficient backup solutions use data deduplication to only store incremental changes and [[hl-2#]]^^reduce the storage overhead^^.
**** Regarding security, you should ask yourself what someone would need to know/have in order to read your data and, more importantly, to delete all your data and associated backups.
**** Lastly, [[blue#]]^^blindly trusting backups is a terrible idea and you should verify regularly that you can use them to recover data^^.
**** Backups go beyond local files in your computer.
***** Given the significant growth of web applications, large amounts of your data are only stored in the cloud. For instance, your webmail, social media photos, music playlists in streaming services or online docs are gone if you lose access to the corresponding accounts. Having an offline copy of this information is the way to go, and you can find online tools that people have built to fetch the data and save it.
*** For a more detailed explanation, see 2019's lecture notes on [[https://missing.csail.mit.edu/2019/backups/][Backups]].
** APIs
:PROPERTIES:
:heading: 2
:collapsed: true
:ID: 4d6cc2e2-530d-4545-ab13-c5af14fd500f
:END:
*** We've talked a lot in this class about using your computer more efficiently to accomplish /local/ tasks, but you will find that many of these lessons also extend to the wider internet. Most services online will have “APIs” that let you programmatically access their data.
**** For example, the US government has an API that lets you get weather forecasts, which you could use to easily get a weather forecast in your shell.
*** Most of these APIs have a similar format. They are structured URLs, often rooted at =api.service.com=, where [[blue#]]^^the path and query parameters indicate what data you want to read or what action you want to perform^^.
**** For the US weather data for example, to get the forecast for a particular location, you issue GET request (with =curl= for example) to https://api.weather.gov/points/42.3604,-71.094. The response itself contains a bunch of other URLs that let you get specific forecasts for that region. Usually, the responses are formatted as JSON, which you can then pipe through a tool like [[https://stedolan.github.io/jq/][jq]] to massage into what you care about.
*** Some APIs require [[red#]]^^authentication^^, and this usually takes the form of [[hl-2#]]^^some sort of secret /token/ that you need to include with the request^^. You should read the documentation for the API to see what the particular service you are looking for uses, but “[[https://www.oauth.com/][OAuth]]” is a protocol you will often see used. At its heart, OAuth is a way to give you tokens that can “act as you” on a given service, and can only be used for particular purposes.
**** [[red#]]^^Keep in mind that these tokens are /secret/, and anyone who gains access to your token can do whatever the token allows under /your/ account!^^
*** [[https://ifttt.com/][IFTTT]] is a website and service centered around the idea of APIs --- it provides integrations with tons of services, and lets you chain events from them in nearly arbitrary ways. Give it a look!
** Common command-line flags/patterns
:PROPERTIES:
:heading: 2
:collapsed: true
:ID: 9beb5564-7e44-4145-8f9d-da870b10ae44
:END:
*** Command-line tools vary a lot, and you will often want to check out their =man= pages before using them.
*** They often share some common features though that can be good to be aware of:
**** Most tools support some kind of =--help= flag to [[blue#]]^^display brief usage instructions for the tool^^.
**** Many tools that can cause irrevocable change support [[hl-1#]]^^the notion of a “dry run”^^ in which they only print what they /would have done/, but do not actually perform the change. Similarly, they often have [[hl-2#]]^^an “interactive” flag that^^ will [[hl-5#]]^^prompt you for each destructive action^^.
**** You can usually use =--version= or =-V= to have the program print its own [[hl-3#]]^^version^^ (handy for reporting bugs!).
**** Almost all tools have a =--verbose= or =-v= flag to [[hl-4#]]^^produce more verbose output^^.
***** You can usually [[hl-4#]]^^include the flag multiple times^^ ( =-vvv= ) to get /more/ verbose output, which can be handy for debugging.
***** Similarly, many tools have a =--quiet= flag for making it [[hl-1#]]^^only print something on error^^.
**** In many tools, =-= in place of a file name means [[hl-2#]]^^“standard input” or “standard output”^^, depending on the argument.
**** Possibly destructive tools are generally not recursive by default, but [[hl-3#]]^^support a “recursive” flag^^ (often =-r=) to make them recurse.
**** Sometimes, you want to [[blue#]]^^pass something that /looks/ like a flag as a normal argument^^.
***** For example, imagine you wanted to remove a file called =-r=. Or you want to run one program “through” another, like =ssh machine foo=, and you want to pass a flag to the “inner” program ( =foo= ).
***** The special argument =--= [[hl-1#]]^^makes a program /stop/ processing flags and options^^ (things starting with =-= ) in what follows, letting you pass things that look like flags without them being interpreted as such: =rm -- -r= or =ssh machine --for-ssh -- foo --for-foo=.
** Window managers
:PROPERTIES:
:heading: 2
:collapsed: true
:ID: dd3ea380-6a14-4624-852f-c42caa49e6de
:END:
*** Most of you are used to using a “drag and drop” window manager, like what comes with Windows, macOS, and Ubuntu by default.
**** There are windows that just sort of hang there on screen, and you can drag them around, resize them, and have them overlap one another.
*** But these are only one /type/ of window manager, often referred to as a “[[red#]]^^floating” window manager^^.
*** There are many others, especially on Linux. A particularly common alternative is a [[blue#]]^^“tiling” window manager^^.
**** In a tiling window manager, windows never overlap, and are instead arranged as tiles on your screen, sort of like panes in tmux.
**** With a tiling window manager, the screen is always filled by whatever windows are open, arranged according to some /layout/.
***** If you have just one window, it takes up the full screen. If you then open another, the original window shrinks to make room for it (often something like 2/3 and 1/3).
***** If you open a third, the other windows will again shrink to accommodate the new window. Just like with tmux panes, you can navigate around these tiled windows with your keyboard, and you can resize them and move them around, all without touching the mouse. They are worth looking into!
** VPNs
:PROPERTIES:
:heading: 2
:collapsed: true
:ID: ab629b28-4f8a-47c6-97bf-64e907809584
:END:
*** VPNs are all the rage these days, but it's not clear that's for [[https://gist.github.com/joepie91/5a9909939e6ce7d09e29][any good reason]]. You should [[hl-5#]]^^be aware of what a VPN does and does not get you^^.
*** A VPN, in the best case, is /really/ just a way for you to [[blue#]]^^change your internet service provider as far as the internet is concerned^^. All your traffic will look like it's coming from the VPN provider instead of your “real” location, and [[hl-2#]]^^the network you are connected to will only see encrypted traffic^^.
*** While that may seem attractive, keep in mind that when you use a VPN, [[hl-1#]]^^all you are really doing is shifting your trust from you current ISP to the VPN hosting company^^.
**** Whatever your ISP /could/ see, the VPN provider now sees /instead/.
**** If you trust them /more/ than your ISP, that is a win, but otherwise, it is not clear that you have gained much.
**** If you are sitting on some dodgy unencrypted public Wi-Fi at an airport, then maybe you don't trust the connection much, but at home, the trade-off is not quite as clear.
*** You should also know that these days, much of your traffic, at least of a sensitive nature, is /already/ encrypted through [[hl-3#]]^^HTTPS or TLS^^ more generally. In that case, it usually matters little whether you are on a “bad” network or not -- [[green#]]^^the network operator will only learn what servers you talk to, but not anything about the data that is exchanged^^.
*** Notice that I said “in the best case” above. It is not unheard of for VPN providers to accidentally misconfigure their software such that the encryption is either weak or entirely disabled. Some VPN providers are malicious (or at the very least opportunist), and will log all your traffic, and possibly sell information about it to third parties. [[red#]]^^Choosing a bad VPN provider is often worse than not using one in the first place^^.
*** In a pinch, MIT [[https://ist.mit.edu/vpn][runs a VPN]] for its students, so that may be worth taking a look at. Also, if you're going to roll your own, give [[https://www.wireguard.com/][WireGuard]] a look.
** Markdown
:PROPERTIES:
:heading: 2
:collapsed: true
:ID: 92ca1579-1678-49c3-91c3-153dccd6219f
:END:
*** There is a high chance that you will write some text over the course of your career. And often, you will want to mark up that text in simple ways. You want some text to be bold or italic, or you want to add headers, links, and code fragments. Instead of pulling out a heavy tool like Word or LaTeX, you may want to consider using the [[blue#]]^^lightweight markup language^^ [[https://commonmark.org/help/][Markdown]].
*** You have probably seen Markdown already, or at least some variant of it.
**** Subsets of it are used and supported almost everywhere, even if it's not under the name Markdown.
*** At its core, Markdown is an attempt to codify the way that people already often mark up text when they are writing plain text documents.
**** Emphasis (/italics/) is added by surrounding a word with =*=.
**** Strong emphasis (*bold*) is added using =**=.
**** Lines starting with =#= are headings (and the number of =#=s is the subheading level).
**** Any line starting with =-= is a bullet list item, and any line starting with a number + =.= is a numbered list item.
**** Backtick is used to show words in =code font=, and a code block can be entered by indenting a line with four spaces or surrounding it with triple-backticks:
***** <!-- src --> 
#+begin_src highlight
```
code goes here
```
#+end_src
**** To add a link, place the /text/ for the link in square brackets, and the URL immediately following that in parentheses: =[name](url)=.
*** Markdown is easy to get started with, and you can use it nearly everywhere. In fact, the lecture notes for this lecture, and all the others, are written in Markdown, and you can see the raw Markdown [[https://raw.githubusercontent.com/missing-semester/missing-semester/master/_2020/potpourri.md][here]].
** Hammerspoon (desktop automation on macOS)
:PROPERTIES:
:heading: 2
:collapsed: true
:ID: 87b3d74f-f515-44de-85eb-608e12061de1
:END:
*** [[https://www.hammerspoon.org/][Hammerspoon]] is a desktop automation framework for macOS. It lets you write Lua scripts that hook into operating system functionality, allowing you to interact with the keyboard/mouse, windows, displays, filesystem, and much more.
*** Some examples of things you can do with Hammerspoon:
**** Bind hotkeys to move windows to specific locations
**** Create a menu bar button that automatically lays out windows in a specific layout
**** Mute your speaker when you arrive in lab (by detecting the WiFi network)
**** Show you a warning if you've accidentally taken your friend's power supply
*** At a high level, Hammerspoon lets you run arbitrary Lua code, bound to menu buttons, key presses, or events, and Hammerspoon provides an extensive library for interacting with the system, so there's basically no limit to what you can do with it. Many people have made their Hammerspoon configurations public, so you can generally find what you need by searching the internet, but you can always write your own code from scratch.
*** Resources
**** [[https://www.hammerspoon.org/go/][Getting Started with Hammerspoon]]
**** [[https://github.com/Hammerspoon/hammerspoon/wiki/Sample****Configurations][Sample configurations]]
**** [[https://github.com/anishathalye/dotfiles****local/tree/mac/hammerspoon][Anish's Hammerspoon config]]
** Booting + Live USBs
:PROPERTIES:
:heading: 2
:collapsed: true
:ID: e6eab3c8-3bda-442d-9a1a-26aeaddc6d1c
:END:
*** When your machine boots up, before the operating system is loaded, the [[https://en.wikipedia.org/wiki/BIOS][BIOS ]][[https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface][UEFI]] [[hl-1#]]^^initializes the system^^. During this process, you can press a specific key combination to configure this layer of software. For example, your computer may say something like “Press F9 to configure BIOS. Press F12 to enter boot menu.” during the boot process. You can configure all sorts of hardware-related settings in the BIOS menu. You can also enter the boot menu to boot from an alternate device instead of your hard drive.
*** [[https://en.wikipedia.org/wiki/Live_USB][Live USBs]] are [[hl-2#]]^^USB flash drives containing an operating system^^. You can create one of these by downloading an operating system (e.g. a Linux distribution) and burning it to the flash drive. This process is a little bit more complicated than simply copying a =.iso= file to the disk. There are tools like [[https://unetbootin.github.io/][UNetbootin]] [[hl-3#]]^^to help you create live USBs^^.
*** Live USBs are useful for all sorts of purposes. Among other things, if you break your existing operating system installation so that it no longer boots, you can use a live USB to recover data or fix the operating system.
** Docker, Vagrant, VMs, Cloud, OpenStack
:PROPERTIES:
:heading: 2
:collapsed: true
:ID: 6bb3c21e-0b4c-41b0-93c7-6c75bc97600f
:END:
*** [[https://en.wikipedia.org/wiki/Virtual_machine][Virtual machines]] and similar tools like containers let you [[hl-1#]]^^emulate a whole computer system^^, including the operating system. This can be useful for creating an isolated environment for testing, development, or exploration (e.g. running potentially malicious code).
*** [[https://www.vagrantup.com/][Vagrant]] is a tool that lets you [[hl-2#]]^^describe machine configurations^^ (operating system, services, packages, etc.) in code, [[hl-3#]]^^and then instantiate VMs^^ with a simple =vagrant up=.
*** [[https://www.docker.com/][Docker]] is conceptually similar but it [[hl-2#]]^^uses containers^^ instead.
*** You can also rent [[blue#]]^^virtual machines on the cloud^^, and it's a nice way to get instant access to:
**** A cheap always****on machine that has a public IP address, used to host services
**** A machine with a lot of CPU, disk, RAM, and/or GPU
**** Many more machines than you physically have access to (billing is often by the second, so if you want a lot of computing for a short amount of time, it's feasible to rent 1000 computers for a couple of minutes)
*** Popular services include [[https://aws.amazon.com/][Amazon AWS]], [[https://cloud.google.com/][Google Cloud]], [[https://azure.microsoft.com/][Microsoft Azure]], [[https://www.digitalocean.com/][DigitalOcean]].
*** If you're a member of MIT CSAIL, you can get free VMs for research purposes through the [[https://tig.csail.mit.edu/shared-computing/open-stack/][CSAIL OpenStack instance]].
** Notebook programming
:PROPERTIES:
:heading: 2
:collapsed: true
:ID: 00bba3b3-2078-4b6b-836e-8cec44f3f865
:END:
*** [[https://en.wikipedia.org/wiki/Notebook_interface][Notebook programming environments]] can be really handy for doing certain types of interactive or exploratory development.
*** Perhaps the most popular notebook programming environment today is [[https://jupyter.org/][Jupyter]], for Python (and several other languages).
*** [[https://www.wolfram.com/mathematica/][Wolfram Mathematica]] is another notebook programming environment that's great for doing math-oriented programming.
** GitHub
:PROPERTIES:
:heading: 2
:collapsed: false
:ID:       9c402ea6-61d2-49ad-845b-be89cce4d98e
:END:
*** [[https://github.com/][GitHub]] is one of the most popular platforms for open-source software development.
*** Many of the tools we've talked about in this class, from [[https://github.com/vim/vim][vim]] to [[https://github.com/Hammerspoon/hammerspoon][Hammerspoon]], are hosted on GitHub. It's easy to get started contributing to open-source to help improve the tools that you use every day.
*** There are two primary ways in which people contribute to projects on GitHub:
**** Creating an [[https://help.github.com/en/github/managing-your-work-on-github/creating-an-issue][issue]].
***** This can be used to report bugs or request a new feature. Neither of these involves reading or writing code, so it can be pretty lightweight to do. High-quality bug reports can be extremely valuable to developers. Commenting on existing discussions can be helpful too.
**** Contribute code through a [[https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests][pull request]].
***** This is generally more involved than creating an issue. You can [[https://help.github.com/en/github/getting-started-with-github/fork-a-repo][fork]] a repository on GitHub, clone your fork, create a new branch, make some changes (e.g. fix a bug or implement a feature), push the branch, and then [[https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request][create a pull request]]. After this, there will generally be some back-and-forth with the project maintainers, who will give you feedback on your patch. Finally, if all goes well, your patch will be merged into the upstream repository. Often times, larger projects will have a contributing guide, tag beginner-friendly issues, and some even have mentorship programs to help first-time contributors become familiar with the project
* Q&A
:PROPERTIES:
:heading: 1
:id: 9d7b5be0-546f-450a-96a8-f6cd8a9ad56a
:collapsed: true
:END:
** Video
:PROPERTIES:
:heading: 2
:ID: c46aee94-c430-4426-a2d7-1f6be904494e
:collapsed: true
:END:
*** {{video https://youtu.be/Wz50FvGG6xU}}
**** {{youtube-timestamp 132}} Operationg System
**** {{youtube-timestamp 223}} Tools prioritize
**** {{youtube-timestamp 376}} Python Versus Bash script
**** {{youtube-timestamp 545}} =source script.sh= and =./script.sh=
**** {{youtube-timestamp 750}} directory like =/bin /lib /tmp=
**** {{youtube-timestamp 910}} =apt-get= and =pip=
**** {{youtube-timestamp 1137}} profiling
**** {{youtube-timestamp 1398}} Browser plugins
**** {{youtube-timestamp 1762}} data wrangling tool
**** {{youtube-timestamp 2061}} Docker and virtual machine
**** {{youtube-timestamp 2236}} Linux distribution
**** {{youtube-timestamp 2479}} vim vs emacs
**** {{youtube-timestamp 2537}} Machine Learning
**** {{youtube-timestamp 2636}} Vim tips
**** {{youtube-timestamp 3104}} web browsers
** Any recommendations on learning Operating Systems related topics like processes, virtual memory, interrupts, memory management, etc
:PROPERTIES:
:heading: 4
:collapsed: true
:END:
*** First, it is unclear whether you actually need to be very familiar with all of these topics since they are very low level topics. They will matter as you start writing more low level code like implementing or modifying a kernel. Otherwise, most topics will not be relevant, with the exception of processes and signals that were briefly covered in other lectures.
*** Some good resources to learn about this topic:
**** [[https://pdos.csail.mit.edu/6.828/][MIT's 6.828 class]] - Graduate level [[blue#]]^^class on Operating System Engineering^^. Class materials are publicly available.
**** Modern Operating Systems (4th ed) - by Andrew S. Tanenbaum is a good overview of many of the mentioned concepts.
**** The Design and Implementation of the FreeBSD Operating System - A good resource about the FreeBSD OS (note that this is not Linux).
**** Other guides like [[https://os.phil-opp.com/][Writing an OS in Rust]] where people implement a kernel step by step in various languages, mostly for teaching purposes.
** What are some of the tools you'd prioritize learning first?
:PROPERTIES:
:heading: 4
:collapsed: true
:END:
*** Some topics worth prioritizing:
**** [[red#]]^^Learning how to use your keyboard more and your mouse less^^. This can be through keyboard shortcuts, changing interfaces, &c.
**** [[blue#]]^^Learning your editor well^^. As a programmer most of your time is spent editing files so it really pays off to learn this skill well.
**** [[hl-1#]]^^Learning how to automate and/or simplify repetitive tasks in your workflow^^ because the time savings will be enormous...
**** [[hl-2#]]^^Learning about version control tools like Git^^ and how to use it in conjunction with GitHub to collaborate in modern software projects.
** When do I use Python versus a Bash scripts versus some other language?
:PROPERTIES:
:heading: 4
:collapsed: true
:END:
*** In general, [[hl-1#]]^^bash scripts are useful for short and simple one-off scripts when you just want to run a specific series of commands^^. bash has a set of oddities that make it hard to work with for larger programs or scripts:
:PROPERTIES:
:collapsed: false
:END:
**** bash is easy to get right for a simple use case but it can be really [[blue#]]^^hard to get right for all possible inputs^^.
***** For example, spaces in script arguments have led to countless bugs in bash scripts.
**** bash is [[hl-1#]]^^not amenable to code reuse^^ so it can be hard to reuse components of previous programs you have written. More generally, [[red#]]^^there is no concept of software libraries in bash^^.
**** bash [[hl-1#]]^^relies on many magic strings^^ like =$?= or =$@= to refer to specific values, [[blue#]]^^whereas other languages refer to them explicitly^^, like =exitCode= or =sys.args= respectively.
*** Therefore, [[hl-2#]]^^for larger and/or more complex scripts we recommend using more mature scripting languages like Python or Ruby^^. You can find [[hl-3#]]^^online countless libraries^^ that people have already written to solve common problems in these languages. If you find a library that implements the specific functionality you care about in some language, usually the best thing to do is to just use that language.
:PROPERTIES:
:collapsed: false
:END:
** What is the difference between =source script.sh= and =./script.sh=
:PROPERTIES:
:heading: 4
:collapsed: true
:END:
*** In both cases the =script.sh= will be read and executed in a bash session, the difference lies in which session is running the commands.
*** For =source= [[hl-1#]]^^the commands are executed in your current bash session^^ and thus any changes made to the current environment, like changing directories or defining functions will persist in the current session once the =source= command finishes executing.
*** When running the script standalone like =./script.sh=, your current bash session [[hl-2#]]^^starts a new instance of bash that will run the commands in^^ =script.sh=.
**** Thus, if =script.sh= changes directories, the new bash instance will change directories but once it exits and returns control to the parent bash session, the parent session will remain in the same place.
**** Similarly, if =script.sh= [[hl-5#]]^^defines a function that you want to access in your terminal^^, you need to =source= it for it to be defined in your current bash session. Otherwise, if you run it, the new bash process will be the one to process the function definition instead of your current shell.
** What are the places where various packages and tools are stored and how does referencing them work? What even is =/bin= or =/lib=?
:PROPERTIES:
:heading: 4
:collapsed: true
:END:
*** Regarding programs that you execute in your terminal, they are all found in the directories listed in your =PATH= environment variable and you can use the =which= command (or the =type= command) to [[blue#]]^^check where your shell is finding a specific program^^.
*** In general, there are some [[red#]]^^conventions about where specific types of files live^^. Here are some of the ones we talked about, check the [[https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard][Filesystem, Hierarchy Standard]] for a more comprehensive list.
:PROPERTIES:
:END:
**** =/bin= - Essential command binaries
**** =/sbin= - Essential system binaries, usually to be run by root
**** =/dev= - Device files, special files that often are interfaces to hardware devices
**** =/etc= - Host-specific system-wide configuration files
**** =/home= - Home directories for users in the system
**** =/lib= - Common libraries for system programs
**** =/opt= - Optional application software
**** =/sys= - Contains information and configuration for the system (covered in the [[https://missing.csail.mit.edu/2020/course-shell/][first lecture]])
**** =/tmp= - Temporary files (also =/var/tmp=). Usually deleted between reboots.
**** =/usr/= - Read only user data
***** =/usr/bin= - Non-essential command binaries
***** =/usr/sbin= - Non-essential system binaries, usually to be run by root
***** =/usr/local/bin= - Binaries for user compiled programs
**** =/var= - Variable files like logs or caches
** Should I =apt-get install= a python-whatever, or =pip install= whatever package?
:PROPERTIES:
:heading: 4
:collapsed: true
:END:
*** There's no universal answer to this question. It's related to the more general question of whether you should use your system's package manager or a language-specific package manager to install software. A few things to take into account:
**** Common packages will be available through both, but less popular ones or more recent ones might not be available in your system package manager. In this case, using the language-specific tool is the better choice.
**** Similarly, language-specific package managers usually have more up to date versions of packages than system package managers.
**** When using your system package manager, libraries will be installed system wide. This means that if you need different versions of a library for development purposes, the system package manager might not suffice. For this scenario, most programming languages provide some sort of [[blue#]]^^isolated or virtual environment^^ so you can install different versions of libraries without running into conflicts. For Python, there's virtualenv, and for Ruby, there's RVM.
**** Depending on the operating system and the hardware architecture, some of these packages might come with binaries or might need to be compiled.
***** For instance, in ARM computers like the Raspberry Pi, using the system package manager can be better than the language specific one if the former comes in form of binaries and the latter needs to be compiled. This is highly dependent on your specific setup.
**** You should try to use one solution or the other and [[red#]]^^not both^^ since that can lead to conflicts that are hard to debug. Our recommendation is to use the language-specific package manager whenever possible, and to use [[blue#]]^^isolated environments (like Python's virtualenv) to avoid polluting the global environment^^.
** What's the easiest and best profiling tools to use to improve performance of my code?
:PROPERTIES:
:heading: 4
:collapsed: true
:END:
*** The easiest tool that is quite useful for profiling purposes is [[https://missing.csail.mit.edu/2020/debugging-profiling/#timing][print timing]]. You just manually compute the time taken between different parts of your code. By repeatedly doing this, you can [[blue#]]^^effectively do a binary search over your code and find the segment of code that took the longest^^.
*** For more advanced tools, Valgrind's [[http://valgrind.org/docs/manual/cl-manual.html][Callgrind]] lets you run your program and [[green#]]^^measure how long everything takes and all the call stacks,^^ namely [[hl-1#]]^^which function called which other function^^.
**** It then produces an annotated version of your program's source code with the time taken per line.
**** However, it [[hl-2#]]^^slows down your program by an order of magnitude and does not support threads^^.
*** For other cases, the [[http://www.brendangregg.com/perf.html][perf]] tool and other language specific sampling profilers can output useful data pretty quickly.
*** [[http://www.brendangregg.com/flamegraphs.html][Flamegraphs]] are a good visualization tool for the output of said sampling profilers.
*** You should also try to use specific tools for the programming language or task you are working with.
**** For example, for web development, the dev tools built into Chrome and Firefox have fantastic profilers.
*** Sometimes the slow part of your code will be because your system is waiting for an event like a disk read or a network packet.
**** In those cases, it is worth checking that back-of-the-envelope calculations about the theoretical speed in terms of hardware capabilities do not deviate from the actual readings.
**** There are also specialized tools to analyze the wait times in system calls. These include tools like [[http://www.brendangregg.com/blog/2019-01-01/learn-ebpf-tracing.html][eBPF]] that perform kernel tracing of user programs.
**** In particular [[https://github.com/iovisor/bpftrace][bpftrace]] is worth checking out if you need to perform this sort of low level profiling.
** What browser plugins do you use?
:PROPERTIES:
:heading: 4
:collapsed: true
:END:
*** Some of our favorites, mostly related to security and usability:
**** [[https://github.com/gorhill/uBlock][uBlock Origin]]
***** It is a [[https://github.com/gorhill/uBlock/wiki/Blocking-mode][wide-spectrum]] blocker that doesn't just stop ads, but all sorts of third-party communication a page may try to do. This also covers inline scripts and other types of resource loading. If you're willing to spend some time on configuration to make things work, go to [[https://github.com/gorhill/uBlock/wiki/Blocking-mode:-medium-mode][medium mode]] or even [[https://github.com/gorhill/uBlock/wiki/Blocking-mode:-hard-mode][hard mode]]. Those will make some sites not work until you've fiddled with the settings enough, but will also significantly improve your online security. Otherwise, the [[https://github.com/gorhill/uBlock/wiki/Blocking-mode:-easy-mode][easy mode]] is already a good default that blocks most ads and tracking. You can also define your own rules about what website objects to block.
**** [[https://github.com/openstyles/stylus/][Stylus]]
***** A fork of Stylish (don't use Stylish, it was shown to [[https://www.theregister.co.uk/2018/07/05/browsers_pull_stylish_but_invasive_browser_extension/][steal users' browsing history]]), allows you to sideload custom CSS stylesheets to websites. With Stylus you can easily customize and modify the appearance of websites. This can be removing a sidebar, changing the background color or even the text size or font choice. This is fantastic for making websites that you visit frequently more readable. Moreover, Stylus can find styles written by other users and published in [[https://userstyles.org/][userstyles.org]]. Most common websites have one or several dark theme stylesheets for instance.
**** Full Page Screen Capture
***** [[https://screenshots.firefox.com/][Built into Firefox]] and [[https://chrome.google.com/webstore/detail/full-page-screen-capture/fdpohaocaechififmbbbbbknoalclacl?hl=en][Chrome extension]]. Lets you take a screenshot of a full website, often much better than printing for reference purposes.
**** [[https://addons.mozilla.org/en-US/firefox/addon/multi-account-containers/][Multi Account Containers]]
***** Lets you separate cookies into “containers”, allowing you to browse the web with different identities and/or ensuring that websites are unable to share information between them.
**** Password Manager Integration
***** Most password managers have browser extensions that make inputting your credentials into websites not only more convenient but also more secure. Compared to simply copy-pasting your user and password, these tools will first check that the website domain matches the one listed for the entry, preventing phishing attacks that impersonate popular websites to steal credentials.
**** [[https://github.com/philc/vimium][Vimium]]
***** A browser extension that provides keyboard-based navigation and control of the web in the spirit of the Vim editor.
** What are other useful data wrangling tools?
:PROPERTIES:
:heading: 4
:collapsed: true
:END:
*** Some of the data wrangling tools we did not have time to cover during the data wrangling lecture include =jq= or =pup= which are specialized parsers for JSON and HTML data respectively.
*** The [[hl-1#]]^^Perl^^ programming language is another good tool for more advanced data wrangling pipelines.
*** Another trick is the =column -t= command that can be used to [[blue#]]^^convert whitespace text (not necessarily aligned) into properly column aligned text^^.
*** More generally a couple of more unconventional data wrangling tools are [[hl-4#]]^^vim and Python^^.
**** For some complex and multi-line transformations, vim macros can be a quite invaluable tool to use.
***** You can just record a series of actions and repeat them as many times as you want, for instance in the editors [[https://missing.csail.mit.edu/2020/editors/#macros][lecture notes]] there is an example of converting an XML-formatted file into JSON just using vim macros.
**** For tabular data, often presented in CSVs, the [[https://pandas.pydata.org/][pandas]] Python library is a great tool.
***** Not only because it makes it quite easy to define complex operations like [[blue#]]^^group by, join or filters^^; but also makes it quite easy to [[green#]]^^plot^^ different properties of your data.
***** It also supports [[hl-2#]]^^exporting to many table formats^^ including XLS, HTML or LaTeX.
**** Alternatively the R programming language (an arguably [[http://arrgh.tim-smith.us/][bad]] programming language) has lots of functionality for computing statistics over data and can be quite useful as the last step of your pipeline.
***** [[https://ggplot2.tidyverse.org/][ggplot2]] is a great plotting library in R.
** What is the difference between Docker and a Virtual Machine?
:PROPERTIES:
:heading: 4
:collapsed: true
:END:
*** Docker is based on a more general concept called [[red#]]^^containers^^.
*** The main difference between containers and virtual machines is that [[blue#]]^^virtual machines will execute an entire OS stack^^, including the kernel, even if the kernel is the same as the host machine.
*** Unlike VMs, [[hl-1#]]^^containers^^ avoid running another instance of the kernel and instead [[hl-1#]]^^share the kernel with the host^^.
**** In Linux, this is achieved through a mechanism called [[hl-2#]]^^LXC^^, and it makes use of a series of isolation mechanisms to spin up a program that thinks it's running on its own hardware but it's actually sharing the hardware and kernel with the host.
**** Thus, containers have a lower overhead than a full VM. On the flip side, [[hl-3#]]^^containers have a weaker isolation and only work if the host runs the same kernel^^.
***** For instance if you run Docker on macOS, Docker needs to spin up a Linux virtual machine to get an initial Linux kernel and thus the overhead is still significant.
*** Lastly, [[hl-4#]]^^Docker^^ is a specific implementation of containers and it [[hl-4#]]^^is tailored for software deployment^^.
**** Because of this, it has some quirks: for example, Docker containers will not persist any form of storage between reboots by default.
** What are the advantages and disadvantages of each OS and how can we choose between them (e.g. choosing the best Linux distribution for our purposes)?
:PROPERTIES:
:heading: 4
:collapsed: true
:END:
*** Regarding [[red#]]^^Linux distros^^, even though there are many, many distros, most of them will behave fairly identically for most use cases.
**** Most of Linux and UNIX features and inner workings can be learned in any distro.
**** A fundamental [[hl-1#]]^^difference^^ between distros is [[hl-1#]]^^how they deal with package updates^^.
***** Some distros, like Arch Linux, use a rolling update policy where things are bleeding-edge but things might break every so often.
***** On the other hand, some distros like Debian, CentOS or Ubuntu LTS releases are much more conservative with releasing updates in their repositories so things are usually more stable at the expense of sacrificing newer features.
**** Our recommendation for an easy and stable experience with both desktops and servers is to use Debian or Ubuntu.
*** Mac OS is a good middle point between Windows and Linux that has a nicely polished interface. However, [[blue#]]^^Mac OS is based on BSD rather than Linux^^, so some parts of the system and commands are different.
*** An alternative worth checking is [[green#]]^^FreeBSD^^. Even though some programs will not run on FreeBSD, [[hl-3#]]^^the BSD ecosystem is much less fragmented and better documented than Linux^^.
*** [[hl-4#]]^^We discourage Windows for anything but for developing Windows applications^^ or if there is some deal breaker feature that you need, like [[hl-5#]]^^good driver support for gaming^^.
*** For [[hl-2#]]^^dual boot systems^^, we think that the most working implementation is macOS' bootcamp and that any other combination can be problematic on the long run, specially if you combine it with other features like disk encryption.
** Vim vs Emacs?
:PROPERTIES:
:heading: 4
:collapsed: true
:END:
*** The three of us use vim as our primary editor but Emacs is also a good alternative and it's worth trying both to see which works better for you. Emacs does not follow vim's modal editing, but this can be enabled through Emacs plugins like [[https://github.com/emacs-evil/evil][Evil]] or [[https://github.com/hlissner/doom-emacs][Doom Emacs]].
*** An advantage of using Emacs is that extensions can be implemented in [[red#]]^^Lisp, a better scripting language than vimscript^^, Vim's default scripting language.
** Any tips or tricks for Machine Learning applications?
:PROPERTIES:
:heading: 4
:collapsed: true
:END:
*** Some of the lessons and takeaways from this class can directly be applied to ML applications.
*** As it is the case with many science disciplines, in ML you often perform a series of experiments and want to check what things worked and what didn't.
*** You can use shell tools to easily and quickly search through these experiments and aggregate the results in a sensible way.
*** This could mean subselecting all experiments in a given time frame or that use a specific dataset.
*** By [[hl-5#]]^^using a simple JSON file to log all relevant parameters of the experiments^^, this can be incredibly simple with the tools we covered in this class.
*** Lastly, if you do not work with some sort of cluster where you submit your GPU jobs, you should look into how to automate this process since it can be a quite time consuming task that also eats away your mental energy.
** Any more Vim tips?
:PROPERTIES:
:heading: 4
:collapsed: true
:END:
*** A few more tips:
**** Plugins
***** Take your time and explore the plugin landscape. There are a lot of great plugins that address some of vim's shortcomings or add new functionality that composes well with existing vim workflows. For this, good resources are [[https://vimawesome.com/][VimAwesome]] and other programmers' dotfiles.
**** Marks
***** In vim, you can set a mark doing =m<X>= for some letter =X=. You can then go back to that mark doing ='<X>=. This lets you quickly navigate to specific locations within a file or even across files.
**** Navigation
***** =Ctrl+O= and =Ctrl+I= move you backward and forward respectively through your recently visited locations.
**** Undo Tree
***** Vim has a quite fancy mechanism for keeping track of changes. Unlike other editors, vim stores a tree of changes so even if you undo and then make a different change you can still go back to the original state by navigating the undo tree. Some plugins like [[https://github.com/sjl/gundo.vim][gundo.vim]] and [[https://github.com/mbbill/undotree][undotree]] expose this tree in a graphical way.
***** Undo with time - The =:earlier= and =:later= commands will let you navigate the files using time references instead of one change at a time.
***** [[https://github.com/casouri/vundo][vundo: Visualize the undo tree.]] in emacs
**** [[https://vim.fandom.com/wiki/Using_undo_branches#Persistent_undo][Persistent undo]] is an amazing built-in feature of vim that is disabled by default. It persists undo history between vim invocations. By setting =undofile= and =undodir= in your =.vimrc=, vim will store a per-file history of changes.
***** undo-tree in emacs
**** Leader Key
***** The leader key is a special key that is often left to the user to be configured for custom commands.
***** The pattern is usually to [[hl-5#]]^^press and release this key (often the space key) and then some other key to execute a certain command^^.
***** Often, plugins will use this key to add their own functionality, for instance the UndoTree plugin uses =<Leader> U= to open the undo tree.
**** Advanced Text Objects
***** Text objects like searches can also be composed with vim commands. E.g. =d/<pattern>= will delete to the next match of said pattern or =cgn= will change the next occurrence of the last searched string.
** What is 2FA and why should I use it?
:PROPERTIES:
:heading: 4
:collapsed: true
:END:
*** Two Factor Authentication (2FA) adds an extra layer of protection to your accounts on top of passwords.
*** In order to login, you not only have to know some password, but you also have to “prove” in some way you have access to some hardware device.
*** In the most simple case, this can be achieved by receiving an SMS on your phone, although there are [[https://www.kaspersky.com/blog/2fa-practical-guide/24219/][known issues]] with SMS 2FA. [[red#]]^^A better alternative^^ we endorse is to use a [[https://en.wikipedia.org/wiki/Universal_2nd_Factor][U2F]] solution like [[https://www.yubico.com/][YubiKey]].
** Any comments on differences between web browsers?
:PROPERTIES:
:heading: 4
:collapsed: true
:END:
*** The current landscape of browsers as of 2020 is that most of them are like Chrome because they use the same engine (Blink).
*** This means that Microsoft Edge which is also based on Blink, and Safari, which is based on WebKit, a similar engine to Blink, are just worse versions of Chrome.
*** [[hl-4#]]^^Chrome is a reasonably good browser both in terms of performance and usability^^.
*** Should you want an alternative, [[hl-3#]]^^Firefox is our recommendation^^.
**** It is comparable to Chrome in pretty much every regard and it excels for privacy reasons.
*** Another browser called [[https://www.ekioh.com/flow-browser/][Flow]] is not user ready yet, but it is implementing a new rendering engine that promises to be faster than the current ones.
:PROPERTIES:
:collapsed: false
:END: